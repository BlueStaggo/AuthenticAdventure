--- net/minecraft/src/ItemBlock.java
+++ net/minecraft/src/ItemBlock.java
@@ -47,8 +47,6 @@
 			return false;
 		} else if(!var2.canPlayerEdit(var4, var5, var6)) {
 			return false;
-		} else if(var5 == 255 && Block.blocksList[this.blockID].blockMaterial.isSolid()) {
-			return false;
 		} else if(var3.canBlockBePlacedAt(this.blockID, var4, var5, var6, false, var7)) {
 			Block var9 = Block.blocksList[this.blockID];
 			if(var3.setBlockAndMetadataWithNotify(var4, var5, var6, this.blockID, this.getMetadata(var1.getItemDamage()))) {
--- net/minecraft/src/WorldGenBigMushroom.java
+++ net/minecraft/src/WorldGenBigMushroom.java
@@ -22,7 +22,7 @@
 
 		int var7 = var2.nextInt(3) + 4;
 		boolean var8 = true;
-		if(var4 >= 1 && var4 + var7 + 1 < 256) {
+		if(var4 >= 1) {
 			int var9;
 			int var11;
 			int var12;
@@ -35,7 +35,7 @@
 
 				for(var11 = var3 - var10; var11 <= var3 + var10 && var8; ++var11) {
 					for(var12 = var5 - var10; var12 <= var5 + var10 && var8; ++var12) {
-						if(var9 >= 0 && var9 < 256) {
+						if(var9 >= 0) {
 							var13 = var1.getBlockId(var11, var9, var12);
 							if(var13 != 0 && var13 != Block.leaves.blockID) {
 								var8 = false;
@@ -52,8 +52,6 @@
 			} else {
 				var9 = var1.getBlockId(var3, var4 - 1, var5);
 				if(var9 != Block.dirt.blockID && var9 != Block.grass.blockID && var9 != Block.mycelium.blockID) {
-					return false;
-				} else if(!Block.mushroomBrown.canPlaceBlockAt(var1, var3, var4, var5)) {
 					return false;
 				} else {
 					this.setBlockAndMetadata(var1, var3, var4 - 1, var5, Block.dirt.blockID, 0);
--- net/minecraft/src/BiomeGenSnow.java
+++ net/minecraft/src/BiomeGenSnow.java
@@ -3,5 +3,8 @@
 public class BiomeGenSnow extends BiomeGenBase {
 	public BiomeGenSnow(int var1) {
 		super(var1);
+		this.biomeDecorator.grassPerChunk = 0;
+		this.biomeDecorator.flowersPerChunk = 0;
+		this.biomeDecorator.mushroomsPerChunk = 0;
 	}
 }
--- net/minecraft/src/GenLayerShore.java
+++ net/minecraft/src/GenLayerShore.java
@@ -1,6 +1,15 @@
 package net.minecraft.src;
 
+import static net.minecraft.src.BiomeGenBase.oceanList;
+
 public class GenLayerShore extends GenLayer {
+	private final BiomeGenBase[] beaches = {
+			BiomeGenBase.beach,
+			BiomeGenBase.beach,
+			BiomeGenBase.beach,
+			BiomeGenBase.gravelBeach
+	};
+
 	public GenLayerShore(long var1, GenLayer var3) {
 		super(var1);
 		this.parent = var3;
@@ -12,44 +21,50 @@
 
 		for(int var7 = 0; var7 < var4; ++var7) {
 			for(int var8 = 0; var8 < var3; ++var8) {
-				this.initChunkSeed((long)(var8 + var1), (long)(var7 + var2));
+				this.initChunkSeed((long)(var8 + var1) >> 1, (long)(var7 + var2) >> 1);
 				int var9 = var5[var8 + 1 + (var7 + 1) * (var3 + 2)];
-				int var10;
-				int var11;
-				int var12;
-				int var13;
+				BiomeGenBase biome = BiomeGenBase.biomeList[var9];
+				BiomeGenBase beach = this.beaches[this.nextInt(this.beaches.length)];
+
+				int var10 = var5[var8 + 1 + (var7 + 1 - 1) * (var3 + 2)];
+				int var11 = var5[var8 + 1 + 1 + (var7 + 1) * (var3 + 2)];
+				int var12 = var5[var8 + 1 - 1 + (var7 + 1) * (var3 + 2)];
+				int var13 = var5[var8 + 1 + (var7 + 1 + 1) * (var3 + 2)];
+				int var14 = var8 + var7 * var3;
+
 				if(var9 == BiomeGenBase.mushroomIsland.biomeID) {
-					var10 = var5[var8 + 1 + (var7 + 1 - 1) * (var3 + 2)];
-					var11 = var5[var8 + 1 + 1 + (var7 + 1) * (var3 + 2)];
-					var12 = var5[var8 + 1 - 1 + (var7 + 1) * (var3 + 2)];
-					var13 = var5[var8 + 1 + (var7 + 1 + 1) * (var3 + 2)];
-					if(var10 != BiomeGenBase.ocean.biomeID && var11 != BiomeGenBase.ocean.biomeID && var12 != BiomeGenBase.ocean.biomeID && var13 != BiomeGenBase.ocean.biomeID) {
-						var6[var8 + var7 * var3] = var9;
-					} else {
-						var6[var8 + var7 * var3] = BiomeGenBase.mushroomIslandShore.biomeID;
-					}
-				} else if(var9 != BiomeGenBase.ocean.biomeID && var9 != BiomeGenBase.river.biomeID && var9 != BiomeGenBase.swampland.biomeID && var9 != BiomeGenBase.extremeHills.biomeID) {
-					var10 = var5[var8 + 1 + (var7 + 1 - 1) * (var3 + 2)];
-					var11 = var5[var8 + 1 + 1 + (var7 + 1) * (var3 + 2)];
-					var12 = var5[var8 + 1 - 1 + (var7 + 1) * (var3 + 2)];
-					var13 = var5[var8 + 1 + (var7 + 1 + 1) * (var3 + 2)];
-					if(var10 != BiomeGenBase.ocean.biomeID && var11 != BiomeGenBase.ocean.biomeID && var12 != BiomeGenBase.ocean.biomeID && var13 != BiomeGenBase.ocean.biomeID) {
-						var6[var8 + var7 * var3] = var9;
-					} else {
-						var6[var8 + var7 * var3] = BiomeGenBase.beach.biomeID;
-					}
-				} else if(var9 == BiomeGenBase.extremeHills.biomeID) {
-					var10 = var5[var8 + 1 + (var7 + 1 - 1) * (var3 + 2)];
-					var11 = var5[var8 + 1 + 1 + (var7 + 1) * (var3 + 2)];
-					var12 = var5[var8 + 1 - 1 + (var7 + 1) * (var3 + 2)];
-					var13 = var5[var8 + 1 + (var7 + 1 + 1) * (var3 + 2)];
-					if(var10 == BiomeGenBase.extremeHills.biomeID && var11 == BiomeGenBase.extremeHills.biomeID && var12 == BiomeGenBase.extremeHills.biomeID && var13 == BiomeGenBase.extremeHills.biomeID) {
-						var6[var8 + var7 * var3] = var9;
-					} else {
-						var6[var8 + var7 * var3] = BiomeGenBase.extremeHillsEdge.biomeID;
+					if(!oceanList[var10] && !oceanList[var11] && !oceanList[var12] && !oceanList[var13]) {
+						var6[var14] = var9;
+					} else {
+						var6[var14] = BiomeGenBase.mushroomIslandShore.biomeID;
 					}
 				} else {
-					var6[var8 + var7 * var3] = var9;
+					boolean coast = oceanList[var10] || oceanList[var11] || oceanList[var12] || oceanList[var13];
+					boolean frozenCoast = var10 == BiomeGenBase.frozenOcean.biomeID
+							|| var11 == BiomeGenBase.frozenOcean.biomeID
+							|| var12 == BiomeGenBase.frozenOcean.biomeID
+							|| var13 == BiomeGenBase.frozenOcean.biomeID;
+					if(!oceanList[var9] && biome.hasBeach && biome.edgeVariant == null) {
+						if(!coast) {
+							var6[var14] = var9;
+						} else if (frozenCoast) {
+							var6[var14] = BiomeGenBase.frozenBeach.biomeID;
+						} else {
+							var6[var14] = beach.biomeID;
+						}
+					} else if(biome.edgeVariant != null) {
+						if (var10 == BiomeGenBase.river.biomeID || var11 == BiomeGenBase.river.biomeID || var12 == BiomeGenBase.river.biomeID || var13 == BiomeGenBase.river.biomeID) {
+							var6[var14] = biome.edgeVariant.biomeID;
+						} else if(var10 == var9 && var11 == var9 && var12 == var9 && var13 == var9) {
+							var6[var14] = var9;
+						} else if(biome.hasBeach && coast) {
+							var6[var14] = frozenCoast ? BiomeGenBase.frozenBeach.biomeID : beach.biomeID;
+						} else {
+							var6[var14] = biome.edgeVariant.biomeID;
+						}
+					} else {
+						var6[var14] = var9;
+					}
 				}
 			}
 		}
--- net/minecraft/src/StructureStrongholdPieceWeight.java
+++ net/minecraft/src/StructureStrongholdPieceWeight.java
@@ -5,11 +5,17 @@
 	public final int pieceWeight;
 	public int instancesSpawned;
 	public int instancesLimit;
+	public boolean noSurface;
 
 	public StructureStrongholdPieceWeight(Class var1, int var2, int var3) {
+		this(var1, var2, var3, false);
+	}
+
+	public StructureStrongholdPieceWeight(Class var1, int var2, int var3, boolean var4) {
 		this.pieceClass = var1;
 		this.pieceWeight = var2;
 		this.instancesLimit = var3;
+		this.noSurface = var4;
 	}
 
 	public boolean canSpawnMoreStructuresOfType(int var1) {
--- /dev/null
+++ net/minecraft/src/WorldGenMud.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenMud extends WorldGenerator {
+	private int mudID;
+	private int radius;
+
+	public WorldGenMud(int var1, int var2) {
+		this.mudID = var2;
+		this.radius = var1;
+	}
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int var6 = var2.nextInt(this.radius - 2) + 2;
+		int var6sq = var6 * var6;
+		byte var7 = 2;
+
+		for(int var8 = var3 - var6; var8 <= var3 + var6; ++var8) {
+			for(int var9 = var5 - var6; var9 <= var5 + var6; ++var9) {
+				int var10 = var8 - var3;
+				int var11 = var9 - var5;
+				if(var10 * var10 + var11 * var11 <= var6sq - var2.nextInt(var6sq)) {
+					for(int var12 = var4 - var7; var12 <= var4 + var7; ++var12) {
+						int var13 = var1.getBlockId(var8, var12, var9);
+						if(var13 == Block.dirt.blockID || var13 == Block.grass.blockID) {
+							var1.setBlock(var8, var12, var9, this.mudID);
+						}
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/NetLoginHandler.java
+++ net/minecraft/src/NetLoginHandler.java
@@ -62,8 +62,8 @@
 
 	public void handleLogin(Packet1Login var1) {
 		this.username = var1.username;
-		if(var1.protocolVersion != 29) {
-			if(var1.protocolVersion > 29) {
+		if(var1.protocolVersion != 4070001) {
+			if(var1.protocolVersion > 4070001) {
 				this.kickUser("Outdated server!");
 			} else {
 				this.kickUser("Outdated client!");
@@ -90,7 +90,7 @@
 			ChunkCoordinates var4 = var3.getSpawnPoint();
 			var2.itemInWorldManager.func_35695_b(var3.getWorldInfo().getGameType());
 			NetServerHandler var5 = new NetServerHandler(this.mcServer, this.netManager, var2);
-			var5.sendPacket(new Packet1Login("", var2.entityId, var3.getWorldInfo().getTerrainType(), var2.itemInWorldManager.getGameType(), var3.worldProvider.worldType, (byte)var3.difficultySetting, (byte)var3.getHeight(), (byte)this.mcServer.configManager.getMaxPlayers()));
+			var5.sendPacket(new Packet1Login("", var2.entityId, var3.getWorldInfo().getTerrainType(), var2.itemInWorldManager.getGameType(), var3.worldProvider.worldType, (byte)var3.difficultySetting, (byte)var3.getHeight(), (byte)this.mcServer.configManager.getMaxPlayers(), this.mcServer.getWorldManager(0).getSeed()));
 			var5.sendPacket(new Packet6SpawnPosition(var4.posX, var4.posY, var4.posZ));
 			var5.sendPacket(new Packet202PlayerAbilities(var2.capabilities));
 			this.mcServer.configManager.func_28170_a(var2, var3);
--- net/minecraft/src/StructureStrongholdPieces.java
+++ net/minecraft/src/StructureStrongholdPieces.java
@@ -6,13 +6,30 @@
 import java.util.Random;
 
 public class StructureStrongholdPieces {
-	private static final StructureStrongholdPieceWeight[] pieceWeightArray = new StructureStrongholdPieceWeight[]{new StructureStrongholdPieceWeight(ComponentStrongholdStraight.class, 40, 0), new StructureStrongholdPieceWeight(ComponentStrongholdPrison.class, 5, 5), new StructureStrongholdPieceWeight(ComponentStrongholdLeftTurn.class, 20, 0), new StructureStrongholdPieceWeight(ComponentStrongholdRightTurn.class, 20, 0), new StructureStrongholdPieceWeight(ComponentStrongholdRoomCrossing.class, 10, 6), new StructureStrongholdPieceWeight(ComponentStrongholdStairsStraight.class, 5, 5), new StructureStrongholdPieceWeight(ComponentStrongholdStairs.class, 5, 5), new StructureStrongholdPieceWeight(ComponentStrongholdCrossing.class, 5, 4), new StructureStrongholdPieceWeight(ComponentStrongholdChestCorridor.class, 5, 4), new StructureStrongholdPieceWeight2(ComponentStrongholdLibrary.class, 10, 2), new StructureStrongholdPieceWeight3(ComponentStrongholdPortalRoom.class, 20, 1)};
+	private static final StructureStrongholdPieceWeight[] pieceWeightArray = new StructureStrongholdPieceWeight[] {
+			new StructureStrongholdPieceWeight(ComponentStrongholdStraight.class, 40, 0),
+			new StructureStrongholdPieceWeight(ComponentStrongholdPrison.class, 5, 5, true),
+			new StructureStrongholdPieceWeight(ComponentStrongholdLeftTurn.class, 20, 0),
+			new StructureStrongholdPieceWeight(ComponentStrongholdRightTurn.class, 20, 0),
+			new StructureStrongholdPieceWeight(ComponentStrongholdRoomCrossing.class, 10, 6, true),
+			new StructureStrongholdPieceWeight(ComponentStrongholdStairsStraight.class, 5, 5),
+			new StructureStrongholdPieceWeight(ComponentStrongholdStairs.class, 10, 25),
+			new StructureStrongholdPieceWeight(ComponentStrongholdCrossing.class, 5, 4, true),
+			new StructureStrongholdPieceWeight(ComponentStrongholdChestCorridor.class, 10, 10, true),
+			new StructureStrongholdPieceWeight2(ComponentStrongholdLibrary.class, 10, 3, true),
+			new StructureStrongholdPieceWeight3(ComponentStrongholdPortalRoom.class, 20, 1, true)
+	};
+	private static boolean hasPortal;
 	private static List structurePieceList;
 	private static Class strongComponentType;
 	static int totalWeight = 0;
 	private static final StructureStrongholdStones strongholdStones = new StructureStrongholdStones((StructureStrongholdPieceWeight2)null);
 
-	public static void prepareStructurePieces() {
+	public static boolean hasPortal() {
+		return hasPortal;
+	}
+
+	public static void prepareStructurePieces(Random rand) {
 		structurePieceList = new ArrayList();
 		StructureStrongholdPieceWeight[] var0 = pieceWeightArray;
 		int var1 = var0.length;
@@ -24,6 +41,7 @@
 		}
 
 		strongComponentType = null;
+		hasPortal = rand.nextInt(5) == 0;
 	}
 
 	private static boolean canAddStructurePieces() {
@@ -93,7 +111,10 @@
 					StructureStrongholdPieceWeight var11 = (StructureStrongholdPieceWeight)var10.next();
 					var9 -= var11.pieceWeight;
 					if(var9 < 0) {
-						if(!var11.canSpawnMoreStructuresOfType(var7) || var11 == var0.field_35329_a) {
+						if(!var11.canSpawnMoreStructuresOfType(var7)
+								|| var11 == var0.field_35329_a
+								|| (var4 >= 50 && var11.noSurface)
+								|| (ComponentStrongholdPortalRoom.class.isAssignableFrom(var11.pieceClass) && !hasPortal)) {
 							break;
 						}
 
@@ -112,7 +133,7 @@
 			}
 
 			StructureBoundingBox var14 = ComponentStrongholdCorridor.func_35342_a(var1, var2, var3, var4, var5, var6);
-			if(var14 != null && var14.minY > 1) {
+			if(var14 != null && var14.minY > 1 && var14.minY < 60) {
 				return new ComponentStrongholdCorridor(var7, var2, var14, var6);
 			} else {
 				return null;
--- net/minecraft/src/GenLayerRiverMix.java
+++ net/minecraft/src/GenLayerRiverMix.java
@@ -1,36 +1,38 @@
 package net.minecraft.src;
 
+import static net.minecraft.src.BiomeGenBase.oceanList;
+
 public class GenLayerRiverMix extends GenLayer {
-	private GenLayer field_35033_b;
 	private GenLayer field_35034_c;
 
 	public GenLayerRiverMix(long var1, GenLayer var3, GenLayer var4) {
 		super(var1);
-		this.field_35033_b = var3;
+		this.parent = var3;
 		this.field_35034_c = var4;
 	}
 
 	public void initWorldGenSeed(long var1) {
-		this.field_35033_b.initWorldGenSeed(var1);
+		this.parent.initWorldGenSeed(var1);
 		this.field_35034_c.initWorldGenSeed(var1);
 		super.initWorldGenSeed(var1);
 	}
 
 	public int[] getInts(int var1, int var2, int var3, int var4) {
-		int[] var5 = this.field_35033_b.getInts(var1, var2, var3, var4);
+		int[] var5 = this.parent.getInts(var1, var2, var3, var4);
 		int[] var6 = this.field_35034_c.getInts(var1, var2, var3, var4);
 		int[] var7 = IntCache.getIntCache(var3 * var4);
 
 		for(int var8 = 0; var8 < var3 * var4; ++var8) {
-			if(var5[var8] == BiomeGenBase.ocean.biomeID) {
+			if(oceanList[var5[var8]]) {
 				var7[var8] = var5[var8];
-			} else if(var6[var8] >= 0) {
-				if(var5[var8] == BiomeGenBase.icePlains.biomeID) {
+			} else if(var6[var8] > 0) {
+				BiomeGenBase biome = BiomeGenBase.biomeList[var5[var8]];
+				if(biome.getFloatTemperature() < 0.15F) {
 					var7[var8] = BiomeGenBase.frozenRiver.biomeID;
-				} else if(var5[var8] != BiomeGenBase.mushroomIsland.biomeID && var5[var8] != BiomeGenBase.mushroomIslandShore.biomeID) {
-					var7[var8] = var6[var8];
-				} else {
+				} else if(var5[var8] == BiomeGenBase.mushroomIsland.biomeID || var5[var8] == BiomeGenBase.mushroomIslandShore.biomeID) {
 					var7[var8] = BiomeGenBase.mushroomIslandShore.biomeID;
+				} else {
+					var7[var8] = var6[var8];
 				}
 			} else {
 				var7[var8] = var5[var8];
--- net/minecraft/src/ChunkCache.java
+++ net/minecraft/src/ChunkCache.java
@@ -74,4 +74,12 @@
 		Block var4 = Block.blocksList[this.getBlockId(var1, var2, var3)];
 		return var4 == null ? false : var4.blockMaterial.blocksMovement() && var4.renderAsNormalBlock();
 	}
+
+	public float getTemperature(int var1, int var2) {
+		return this.worldObj.getTemperature(var1, var2);
+	}
+
+	public float getRainfall(int var1, int var2) {
+		return this.worldObj.getRainfall(var1, var2);
+	}
 }
--- /dev/null
+++ net/minecraft/src/BiomeGenSavanna.java
@@ -1,0 +1,10 @@
+package net.minecraft.src;
+
+public class BiomeGenSavanna extends BiomeGenBase {
+	protected BiomeGenSavanna(int var1) {
+		super(var1);
+		this.biomeDecorator.treesPerChunk = 0;
+		this.biomeDecorator.flowersPerChunk = 0;
+		this.biomeDecorator.grassPerChunk = 0;
+	}
+}
--- net/minecraft/src/MapGenVillage.java
+++ net/minecraft/src/MapGenVillage.java
@@ -5,7 +5,14 @@
 import java.util.Random;
 
 public class MapGenVillage extends MapGenStructure {
-	public static List villageSpawnBiomes = Arrays.asList(new BiomeGenBase[]{BiomeGenBase.plains, BiomeGenBase.desert});
+	public static List villageSpawnBiomes = Arrays.asList(
+			BiomeGenBase.plains,
+			BiomeGenBase.desert,
+			BiomeGenBase.forest,
+			BiomeGenBase.taiga,
+			BiomeGenBase.swampland
+//			BiomeGenBase.seasonalForest
+	);
 	private final int terrainType;
 
 	public MapGenVillage(int var1) {
--- net/minecraft/src/WorldGenHugeTrees.java
+++ net/minecraft/src/WorldGenHugeTrees.java
@@ -17,7 +17,7 @@
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		int var6 = var2.nextInt(3) + this.field_48406_a;
 		boolean var7 = true;
-		if(var4 >= 1 && var4 + var6 + 1 <= 256) {
+		if(var4 >= 1) {
 			int var8;
 			int var10;
 			int var11;
@@ -34,7 +34,7 @@
 
 				for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
 					for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-						if(var8 >= 0 && var8 < 256) {
+						if(var8 >= 0) {
 							var12 = var1.getBlockId(var10, var8, var11);
 							if(var12 != 0 && var12 != Block.leaves.blockID && var12 != Block.grass.blockID && var12 != Block.dirt.blockID && var12 != Block.wood.blockID && var12 != Block.sapling.blockID) {
 								var7 = false;
@@ -50,7 +50,7 @@
 				return false;
 			} else {
 				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 256 - var6 - 1) {
+				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID)) {
 					var1.setBlock(var3, var4 - 1, var5, Block.dirt.blockID);
 					var1.setBlock(var3 + 1, var4 - 1, var5, Block.dirt.blockID);
 					var1.setBlock(var3, var4 - 1, var5 + 1, Block.dirt.blockID);
--- net/minecraft/src/StructureStrongholdPieceWeight3.java
+++ net/minecraft/src/StructureStrongholdPieceWeight3.java
@@ -5,6 +5,10 @@
 		super(var1, var2, var3);
 	}
 
+	StructureStrongholdPieceWeight3(Class var1, int var2, int var3, boolean var4) {
+		super(var1, var2, var3, var4);
+	}
+
 	public boolean canSpawnMoreStructuresOfType(int var1) {
 		return super.canSpawnMoreStructuresOfType(var1) && var1 > 5;
 	}
--- net/minecraft/src/MathHelper.java
+++ net/minecraft/src/MathHelper.java
@@ -4,6 +4,7 @@
 
 public class MathHelper {
 	private static float[] SIN_TABLE = new float[65536];
+	public static final float PI_F = (float)Math.PI;
 
 	public static final float sin(float var0) {
 		return SIN_TABLE[(int)(var0 * 10430.378F) & '\uffff'];
--- net/minecraft/src/BiomeGenDesert.java
+++ net/minecraft/src/BiomeGenDesert.java
@@ -12,6 +12,7 @@
 		this.biomeDecorator.deadBushPerChunk = 2;
 		this.biomeDecorator.reedsPerChunk = 50;
 		this.biomeDecorator.cactiPerChunk = 10;
+		this.biomeDecorator.generateLakes = false;
 	}
 
 	public void decorate(World var1, Random var2, int var3, int var4) {
@@ -23,5 +24,9 @@
 			var7.generate(var1, var2, var5, var1.getHeightValue(var5, var6) + 1, var6);
 		}
 
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return super.getMaxHeight(x, z) + (doHills(x, z) ? 0.6F : 0.0F);
 	}
 }
--- net/minecraft/src/EntityCow.java
+++ net/minecraft/src/EntityCow.java
@@ -60,7 +60,7 @@
 			this.dropItem(Item.leather.shiftedIndex, 1);
 		}
 
-		var3 = this.rand.nextInt(3) + 1 + this.rand.nextInt(1 + var2);
+		var3 = this.rand.nextInt(3) + this.rand.nextInt(1 + var2);
 
 		for(var4 = 0; var4 < var3; ++var4) {
 			if(this.isBurning()) {
--- net/minecraft/src/EntityCreeper.java
+++ net/minecraft/src/EntityCreeper.java
@@ -23,7 +23,7 @@
 	}
 
 	public int getMaxHealth() {
-		return 20;
+		return this.worldObj != null && this.worldObj.getWorldInfo().isHardcoreModeEnabled() ? 30 : 20;
 	}
 
 	protected void entityInit() {
--- /dev/null
+++ net/minecraft/src/StructureVillageStones.java
@@ -1,0 +1,22 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+class StructureVillageStones extends StructurePieceBlockSelector {
+	StructureVillageStones() {
+	}
+
+	public void selectBlocks(World var0, Random var1, int var2, int var3, int var4, boolean var5) {
+		if(!var5) {
+			this.selectedBlockId = 0;
+			this.selectedBlockMetaData = 0;
+		} else {
+			this.selectedBlockId = Block.cobblestone.blockID;
+			float var6 = var1.nextFloat();
+			if(var6 < 0.4F) {
+				this.selectedBlockId = Block.cobblestoneMossy.blockID;
+			}
+		}
+
+	}
+}
--- net/minecraft/src/WorldGenTrees.java
+++ net/minecraft/src/WorldGenTrees.java
@@ -23,7 +23,7 @@
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		int var6 = var2.nextInt(3) + this.field_48402_a;
 		boolean var7 = true;
-		if(var4 >= 1 && var4 + var6 + 1 <= 256) {
+		if(var4 >= 1) {
 			int var8;
 			byte var9;
 			int var11;
@@ -40,7 +40,7 @@
 
 				for(int var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
 					for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-						if(var8 >= 0 && var8 < 256) {
+						if(var8 >= 0) {
 							var12 = var1.getBlockId(var10, var8, var11);
 							if(var12 != 0 && var12 != Block.leaves.blockID && var12 != Block.grass.blockID && var12 != Block.dirt.blockID && var12 != Block.wood.blockID) {
 								var7 = false;
@@ -56,7 +56,7 @@
 				return false;
 			} else {
 				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 256 - var6 - 1) {
+				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID)) {
 					this.func_50023_a(var1, var3, var4 - 1, var5, Block.dirt.blockID);
 					var9 = 3;
 					byte var18 = 0;
--- net/minecraft/src/Packet14BlockDig.java
+++ net/minecraft/src/Packet14BlockDig.java
@@ -14,7 +14,7 @@
 	public void readPacketData(DataInputStream var1) throws IOException {
 		this.status = var1.read();
 		this.xPosition = var1.readInt();
-		this.yPosition = var1.read();
+		this.yPosition = var1.readShort();
 		this.zPosition = var1.readInt();
 		this.face = var1.read();
 	}
@@ -22,7 +22,7 @@
 	public void writePacketData(DataOutputStream var1) throws IOException {
 		var1.write(this.status);
 		var1.writeInt(this.xPosition);
-		var1.write(this.yPosition);
+		var1.writeShort(this.yPosition);
 		var1.writeInt(this.zPosition);
 		var1.write(this.face);
 	}
@@ -32,6 +32,6 @@
 	}
 
 	public int getPacketSize() {
-		return 11;
+		return 12;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BiomeGenWoodedHills.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenWoodedHills extends BiomeGenBase {
+	protected BiomeGenWoodedHills(int var1) {
+		super(var1);
+		this.biomeDecorator.treesPerChunk = 5;
+		this.biomeDecorator.grassPerChunk = 3;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(3) == 0
+				? (var1.nextInt(3) == 0 ? new WorldGenTaiga1() : new WorldGenTaiga2(false))
+				: (var1.nextInt(5) == 0 ? this.worldGenBigTree : this.worldGenTrees);
+	}
+}
--- net/minecraft/src/GenLayerSwampRivers.java
+++ net/minecraft/src/GenLayerSwampRivers.java
@@ -1,9 +1,12 @@
 package net.minecraft.src;
 
 public class GenLayerSwampRivers extends GenLayer {
-	public GenLayerSwampRivers(long var1, GenLayer var3) {
+	private final int layer;
+
+	public GenLayerSwampRivers(long var1, GenLayer var3, int layer) {
 		super(var1);
 		this.parent = var3;
+		this.layer = layer;
 	}
 
 	public int[] getInts(int var1, int var2, int var3, int var4) {
@@ -14,10 +17,9 @@
 			for(int var8 = 0; var8 < var3; ++var8) {
 				this.initChunkSeed((long)(var8 + var1), (long)(var7 + var2));
 				int var9 = var5[var8 + 1 + (var7 + 1) * (var3 + 2)];
-				if(var9 == BiomeGenBase.swampland.biomeID && this.nextInt(6) == 0) {
-					var6[var8 + var7 * var3] = BiomeGenBase.river.biomeID;
-				} else if((var9 == BiomeGenBase.jungle.biomeID || var9 == BiomeGenBase.jungleHills.biomeID) && this.nextInt(8) == 0) {
-					var6[var8 + var7 * var3] = BiomeGenBase.river.biomeID;
+				BiomeGenBase biome = BiomeGenBase.biomeList[var9];
+				if(biome.internalVariant != null && biome.internalLayer == this.layer && this.nextInt(biome.internalChance) == 0) {
+					var6[var8 + var7 * var3] = biome.internalVariant.biomeID;
 				} else {
 					var6[var8 + var7 * var3] = var9;
 				}
--- net/minecraft/src/WorldProvider.java
+++ net/minecraft/src/WorldProvider.java
@@ -29,7 +29,7 @@
 
 	protected void registerWorldChunkManager() {
 		if(this.worldObj.getWorldInfo().getTerrainType() == WorldType.FLAT) {
-			this.worldChunkMgr = new WorldChunkManagerHell(BiomeGenBase.plains, 0.5F, 0.5F);
+			this.worldChunkMgr = new WorldChunkManagerHell(BiomeGenBase.plains, 0.8F, 0.8F);
 		} else {
 			this.worldChunkMgr = new WorldChunkManager(this.worldObj);
 		}
@@ -42,7 +42,9 @@
 
 	public boolean canCoordinateBeSpawn(int var1, int var2) {
 		int var3 = this.worldObj.getFirstUncoveredBlock(var1, var2);
-		return var3 == Block.grass.blockID;
+		return var3 == Block.grass.blockID
+				|| var3 == Block.sand.blockID
+				|| var3 == Block.gravel.blockID;
 	}
 
 	public float calculateCelestialAngle(long var1, float var3) {
--- /dev/null
+++ net/minecraft/src/BlockStepStone.java
@@ -1,0 +1,31 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockStepStone extends BlockStep {
+	public static final String[] blockStepTypes = new String[]{"stone", "sand", "wood", "cobble", "brick", "smoothStoneBrick", "netherBrick"};
+
+	public BlockStepStone(int var1, boolean var2) {
+		super(var1, var2, Material.rock);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		int var3 = var2 & 7;
+		return var3 == 0 ? (var1 <= 1 ? 6 : 5)
+				: var3 == 1 ? (var1 == 0 ? 208 : var1 == 1 ? 176 : 192)
+				: var3 == 2 ? Block.planks.blockIndexInTexture
+				: var3 == 3 ? Block.cobblestone.blockIndexInTexture
+				: var3 == 4 ? Block.brick.blockIndexInTexture
+				: var3 == 5 ? Block.stoneBrick.blockIndexInTexture
+				: var3 == 6 ? Block.netherBrick.blockIndexInTexture
+				: 6;
+	}
+
+	public int idDropped(int var1, Random var2, int var3) {
+		return Block.stairSingle.blockID;
+	}
+
+	protected ItemStack createStackedBlock(int var1) {
+		return new ItemStack(Block.stairSingle.blockID, 1, var1 & 7);
+	}
+}
--- net/minecraft/src/BiomeGenForest.java
+++ net/minecraft/src/BiomeGenForest.java
@@ -11,6 +11,14 @@
 	}
 
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
-		return (WorldGenerator)(var1.nextInt(5) == 0 ? this.worldGenForest : (var1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees));
+		return var1.nextInt(5) == 0 ? this.worldGenForest : (var1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
+	}
+
+	public float getMinHeight(int x, int z) {
+		return super.getMinHeight(x, z) + (getHeightNoiseValue(x, z) > 0.0D ? 0.4F : 0.0F);
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return super.getMaxHeight(x, z) + (getHeightNoiseValue(x, z) > 0.0D ? 0.1F : 0.0F);
 	}
 }
--- net/minecraft/src/EntityPigZombie.java
+++ net/minecraft/src/EntityPigZombie.java
@@ -92,7 +92,7 @@
 
 		int var4;
 		for(var4 = 0; var4 < var3; ++var4) {
-			this.dropItem(Item.rottenFlesh.shiftedIndex, 1);
+			this.dropItem(Item.pigmanFlesh.shiftedIndex, 1);
 		}
 
 		var3 = this.rand.nextInt(2 + var2);
@@ -106,7 +106,7 @@
 	protected void dropRareDrop(int var1) {
 		if(var1 > 0) {
 			ItemStack var2 = new ItemStack(Item.swordGold);
-			EnchantmentHelper.func_48622_a(this.rand, var2, 5);
+			EnchantmentHelper.func_48622_a(this.rand, var2, 5, this.worldObj.getWorldInfo().isHardcoreModeEnabled());
 			this.entityDropItem(var2, 0.0F);
 		} else {
 			int var3 = this.rand.nextInt(3);
@@ -122,6 +122,6 @@
 	}
 
 	protected int getDropItemId() {
-		return Item.rottenFlesh.shiftedIndex;
+		return Item.pigmanFlesh.shiftedIndex;
 	}
 }
--- net/minecraft/src/GenLayerRiver.java
+++ net/minecraft/src/GenLayerRiver.java
@@ -27,6 +27,8 @@
 					} else {
 						var10[var12 + var11 * var3] = BiomeGenBase.river.biomeID;
 					}
+				} else if (var17 == 0) {
+					var10[var12 + var11 * var3] = var17;
 				} else {
 					var10[var12 + var11 * var3] = BiomeGenBase.river.biomeID;
 				}
--- net/minecraft/src/GenLayer.java
+++ net/minecraft/src/GenLayer.java
@@ -1,71 +1,132 @@
 package net.minecraft.src;
 
 public abstract class GenLayer {
+	public final long seed;
 	private long worldGenSeed;
 	protected GenLayer parent;
 	private long chunkSeed;
 	private long baseSeed;
 
-	public static GenLayer[] func_48425_a_authadvstyle(long l, WorldType wt) {
-		GenLayer genLayer = new GenLayerIsland(1L);
-		genLayer = new GenLayerFuzzyZoom(2000L, genLayer);
-		genLayer = new GenLayerAddIsland(1L, genLayer);
-		genLayer = new GenLayerZoom(2001L, genLayer);
-		genLayer = new GenLayerAddIsland(2L, genLayer);
-		genLayer = new GenLayerAddSnow(2L, genLayer);
-		genLayer = new GenLayerZoom(2002L, genLayer);
-		genLayer = new GenLayerAddIsland(3L, genLayer);
-		genLayer = new GenLayerZoom(2003L, genLayer);
-		genLayer = new GenLayerAddIsland(4L, genLayer);
-	}
-
-	public static GenLayer[] func_48391_a(long var0, WorldType var2) {
-		GenLayerIsland var3 = new GenLayerIsland(1L);
-		GenLayerFuzzyZoom var9 = new GenLayerFuzzyZoom(2000L, var3);
-		GenLayerAddIsland var10 = new GenLayerAddIsland(1L, var9);
-		GenLayerZoom var11 = new GenLayerZoom(2001L, var10);
-		var10 = new GenLayerAddIsland(2L, var11);
-		GenLayerAddSnow var12 = new GenLayerAddSnow(2L, var10);
-		var11 = new GenLayerZoom(2002L, var12);
-		var10 = new GenLayerAddIsland(3L, var11);
-		var11 = new GenLayerZoom(2003L, var10);
-		var10 = new GenLayerAddIsland(4L, var11);
-		GenLayerAddMushroomIsland var15 = new GenLayerAddMushroomIsland(5L, var10);
-		byte var4 = 4;
-		GenLayer var5 = GenLayerZoom.func_35025_a(1000L, var15, 0);
-		GenLayerRiverInit var13 = new GenLayerRiverInit(100L, var5);
-		var5 = GenLayerZoom.func_35025_a(1000L, var13, var4 + 2);
-		GenLayerRiver var14 = new GenLayerRiver(1L, var5);
-		GenLayerSmooth var16 = new GenLayerSmooth(1000L, var14);
-		GenLayer var6 = GenLayerZoom.func_35025_a(1000L, var15, 0);
-		GenLayerBiome var17 = new GenLayerBiome(200L, var6, var2);
-		var6 = GenLayerZoom.func_35025_a(1000L, var17, 2);
-		Object var18 = new GenLayerHills(1000L, var6);
-
-		for(int var7 = 0; var7 < var4; ++var7) {
-			var18 = new GenLayerZoom((long)(1000 + var7), (GenLayer)var18);
-			if(var7 == 0) {
-				var18 = new GenLayerAddIsland(3L, (GenLayer)var18);
-			}
-
-			if(var7 == 1) {
-				var18 = new GenLayerShore(1000L, (GenLayer)var18);
-			}
-
-			if(var7 == 1) {
-				var18 = new GenLayerSwampRivers(1000L, (GenLayer)var18);
-			}
-		}
-
-		GenLayerSmooth var19 = new GenLayerSmooth(1000L, (GenLayer)var18);
-		GenLayerRiverMix var20 = new GenLayerRiverMix(100L, var19, var16);
-		GenLayerVoronoiZoom var8 = new GenLayerVoronoiZoom(10L, var20);
-		var20.initWorldGenSeed(var0);
-		var8.initWorldGenSeed(var0);
-		return new GenLayer[]{var20, var8, var20};
+	public static GenLayer[] func_48391_a(long l, WorldType wt) {
+		boolean gen11 = wt == WorldType.DEFAULT_1_1;
+		boolean isSingleBiome = false;
+		boolean isOcean = false;
+		boolean genOceans = true;
+		boolean genOceanBiomes = true;
+		boolean genBeaches = true;
+		boolean genRivers = true;
+		boolean randomDist = wt.useLegacyWorldGen();
+		int biomeSize = 4;
+
+		if (wt == WorldType.SMALL_BIOMES) {
+			biomeSize = 3;
+		} else if (wt == WorldType.LARGE_BIOMES) {
+			biomeSize = 6;
+		} else if (wt instanceof WorldTypeCustomized) {
+			WorldTypeCustomized sb = (WorldTypeCustomized) wt;
+			isSingleBiome = sb.getBiome() >= 0;
+			isOcean = isSingleBiome && BiomeGenBase.oceanList[sb.getBiome()];
+			genOceans = sb.hasOceans();
+			genOceanBiomes = sb.hasOceanBiomes();
+			genBeaches = sb.hasBeaches();
+			genRivers = sb.hasRivers() && !isOcean;
+			biomeSize = sb.getBiomeSize();
+			randomDist = sb.useLegacyWorldGen();
+		}
+
+        GenLayer genLayer = isOcean || !genOceans ? new GenLayerSingleBiome(isOcean ? 0 : 1) : new GenLayerIsland(1L, gen11 ? 10 : 100);
+		if (gen11) {
+			genLayer = new GenLayerFuzzyZoom(2000L, genLayer);
+			genLayer = new GenLayerAddIsland(1L, genLayer);
+			genLayer = new GenLayerZoom(2001L, genLayer);
+			genLayer = new GenLayerAddIsland(2L, genLayer);
+			genLayer = new GenLayerAddSnow(2L, genLayer);
+			genLayer = new GenLayerZoom(2002L, genLayer);
+			genLayer = new GenLayerAddIsland(3L, genLayer);
+			genLayer = new GenLayerZoom(2003L, genLayer);
+			genLayer = new GenLayerAddIsland(4L, genLayer);
+			genLayer = new GenLayerAddMushroomIsland(5L, genLayer);
+		} else {
+			if (!isOcean && genOceans) {
+		        genLayer = new GenLayerAddIsland(1L, genLayer).smooth();
+				genLayer = new GenLayerAddIsland(2L, genLayer).smooth();
+				genLayer = new GenLayerMoreIslands(1000L, genLayer);
+				genLayer = new GenLayerAddIsland(3L, genLayer);
+				genLayer = new GenLayerAddIsland(4L, genLayer);
+				genLayer = new GenLayerAddIsland(5L, genLayer).smooth();
+				genLayer = new GenLayerFuzzyZoom(2000L, genLayer);
+				genLayer = new GenLayerMoreIslands(1001L, genLayer);
+				genLayer = new GenLayerAddIsland(7L, genLayer).smooth();
+				genLayer = new GenLayerZoom(2001L, genLayer);
+				genLayer = new GenLayerAddIsland(8L, genLayer).smooth();
+				genLayer = new GenLayerAddIsland(9L, genLayer);
+				if (!isSingleBiome) genLayer = randomDist ? new GenLayerAddSnow(1001L, genLayer) : new GenLayerClimate(1001L, genLayer);
+				genLayer = new GenLayerZoom(2002L, genLayer);
+				genLayer = new GenLayerAddIsland(10L, genLayer);
+				if (!isSingleBiome && !randomDist) genLayer = new GenLayerTemperateBorder(1002L, genLayer);
+			}
+	        if (genOceans && genOceanBiomes) genLayer = new GenLayerAddMushroomIsland(1002L, genLayer);
+		}
+
+        GenLayer genLayer2 = genRivers ? genLayer : null;
+		if (genRivers) {
+	        genLayer2 = GenLayerZoom.multiZoom(1000L, genLayer2, 0);
+	        genLayer2 = new GenLayerRiverInit(100L, genLayer2);
+	        genLayer2 = GenLayerZoom.multiZoom(1000L, genLayer2, biomeSize + 1);
+	        genLayer2 = new GenLayerRiver(1L, genLayer2);
+	        genLayer2 = new GenLayerSmooth(1000L, genLayer2);
+		}
+        GenLayer genLayer3 = genLayer;
+        genLayer3 = GenLayerZoom.multiZoom(1000L, genLayer3, 0);
+        genLayer3 = new GenLayerBiome(200L, genLayer3, wt);
+		genLayer = genLayer3;
+        genLayer3 = GenLayerZoom.multiZoom(1000L, genLayer3, 2);
+        GenLayer genLayer4 = new GenLayerBiomeTemperature(genLayer3);
+        GenLayer genLayer5 = new GenLayerBiomeDownfall(genLayer3);
+		genLayer3 = new GenLayerSwampRivers(1000L, genLayer3, 0);
+        for (int i = 0; i < biomeSize; ++i) {
+			if (i == biomeSize - 1 && genRivers) {
+		        genLayer3 = new GenLayerRiverMix(100L, genLayer3, genLayer2);
+			}
+
+            genLayer3 = new GenLayerZoom(1000 + i, genLayer3);
+			if (i == 0 && !isOcean && genOceans) {
+				if (gen11) {
+					genLayer3 = new GenLayerAddIsland(3L, genLayer3);
+				} else if (genBeaches) {
+					genLayer3 = new GenLayerShore(1000L, genLayer3);
+				}
+			}
+
+			if (i == 1) {
+				if (gen11) {
+					genLayer3 = new GenLayerShore(1000L, genLayer3);
+				}
+			}
+
+			genLayer3 = new GenLayerSwampRivers(1000L, genLayer3, i + 1);
+        }
+        genLayer3 = new GenLayerSmooth(1000L, genLayer3);
+		genLayer4 = GenLayerZoom.multiZoom(1000L, genLayer4, biomeSize - 2);
+        genLayer5 = GenLayerZoom.multiZoom(1000L, genLayer5, biomeSize - 2);
+		genLayer4 = new GenLayerZoom(1000L + biomeSize - 2, genLayer4);
+		genLayer5 = new GenLayerZoom(1000L + biomeSize - 2, genLayer5);
+		genLayer4 = new GenLayerBlur(genLayer4);
+		genLayer5 = new GenLayerBlur(genLayer5);
+		genLayer4 = GenLayerSmoothZoom.multiZoom(1000L + biomeSize - 1, genLayer4, 3);
+		genLayer5 = GenLayerSmoothZoom.multiZoom(1000L + biomeSize - 1, genLayer5, 3);
+		genLayer4 = new GenLayerBlur(genLayer4);
+		genLayer5 = new GenLayerBlur(genLayer5);
+        GenLayerVoronoiZoom genLayerVoronoiZoom = new GenLayerVoronoiZoom(10L, genLayer3);
+        genLayer3.initWorldGenSeed(l);
+        genLayer4.initWorldGenSeed(l);
+        genLayer5.initWorldGenSeed(l);
+        genLayerVoronoiZoom.initWorldGenSeed(l);
+        return new GenLayer[]{genLayer3, genLayerVoronoiZoom, genLayer4, genLayer5, genLayer};
 	}
 
 	public GenLayer(long var1) {
+		this.seed = var1;
 		this.baseSeed = var1;
 		this.baseSeed *= this.baseSeed * 6364136223846793005L + 1442695040888963407L;
 		this.baseSeed += var1;
@@ -110,6 +171,10 @@
 		this.chunkSeed *= this.chunkSeed * 6364136223846793005L + 1442695040888963407L;
 		this.chunkSeed += this.worldGenSeed;
 		return var2;
+	}
+
+	public long getWorldGenSeed() {
+		return this.worldGenSeed;
 	}
 
 	public abstract int[] getInts(int var1, int var2, int var3, int var4);
--- net/minecraft/src/Enchantment.java
+++ net/minecraft/src/Enchantment.java
@@ -9,6 +9,8 @@
 	public static final Enchantment projectileProtection = new EnchantmentProtection(4, 5, 4);
 	public static final Enchantment respiration = new EnchantmentOxygen(5, 2);
 	public static final Enchantment aquaAffinity = new EnchantmentWaterWorker(6, 2);
+	public static final Enchantment velocity = new EnchantmentVelocity(7, 5);
+	public static final Enchantment stamina = new EnchantmentStamina(8, 5);
 	public static final Enchantment sharpness = new EnchantmentDamage(16, 10, 0);
 	public static final Enchantment smite = new EnchantmentDamage(17, 5, 1);
 	public static final Enchantment baneOfArthropods = new EnchantmentDamage(18, 5, 2);
--- net/minecraft/src/NoiseGeneratorPerlin.java
+++ net/minecraft/src/NoiseGeneratorPerlin.java
@@ -32,6 +32,43 @@
 
 	}
 
+	public double generateNoise(double var1, double var3, double var5) {
+		double var7 = var1 + this.xCoord;
+		double var9 = var3 + this.yCoord;
+		double var11 = var5 + this.zCoord;
+		int var13 = (int)var7;
+		int var14 = (int)var9;
+		int var15 = (int)var11;
+		if(var7 < (double)var13) {
+			--var13;
+		}
+
+		if(var9 < (double)var14) {
+			--var14;
+		}
+
+		if(var11 < (double)var15) {
+			--var15;
+		}
+
+		int var16 = var13 & 255;
+		int var17 = var14 & 255;
+		int var18 = var15 & 255;
+		var7 -= (double)var13;
+		var9 -= (double)var14;
+		var11 -= (double)var15;
+		double var19 = var7 * var7 * var7 * (var7 * (var7 * 6.0D - 15.0D) + 10.0D);
+		double var21 = var9 * var9 * var9 * (var9 * (var9 * 6.0D - 15.0D) + 10.0D);
+		double var23 = var11 * var11 * var11 * (var11 * (var11 * 6.0D - 15.0D) + 10.0D);
+		int var25 = this.permutations[var16] + var17;
+		int var26 = this.permutations[var25] + var18;
+		int var27 = this.permutations[var25 + 1] + var18;
+		int var28 = this.permutations[var16 + 1] + var17;
+		int var29 = this.permutations[var28] + var18;
+		int var30 = this.permutations[var28 + 1] + var18;
+		return this.lerp(var23, this.lerp(var21, this.lerp(var19, this.grad(this.permutations[var26], var7, var9, var11), this.grad(this.permutations[var29], var7 - 1.0D, var9, var11)), this.lerp(var19, this.grad(this.permutations[var27], var7, var9 - 1.0D, var11), this.grad(this.permutations[var30], var7 - 1.0D, var9 - 1.0D, var11))), this.lerp(var21, this.lerp(var19, this.grad(this.permutations[var26 + 1], var7, var9, var11 - 1.0D), this.grad(this.permutations[var29 + 1], var7 - 1.0D, var9, var11 - 1.0D)), this.lerp(var19, this.grad(this.permutations[var27 + 1], var7, var9 - 1.0D, var11 - 1.0D), this.grad(this.permutations[var30 + 1], var7 - 1.0D, var9 - 1.0D, var11 - 1.0D))));
+	}
+
 	public final double lerp(double var1, double var3, double var5) {
 		return var3 + var1 * (var5 - var3);
 	}
--- net/minecraft/src/EntityBoat.java
+++ net/minecraft/src/EntityBoat.java
@@ -65,15 +65,7 @@
 					this.riddenByEntity.mountEntity(this);
 				}
 
-				int var3;
-				for(var3 = 0; var3 < 3; ++var3) {
-					this.dropItemWithOffset(Block.planks.blockID, 1, 0.0F);
-				}
-
-				for(var3 = 0; var3 < 2; ++var3) {
-					this.dropItemWithOffset(Item.stick.shiftedIndex, 1, 0.0F);
-				}
-
+				this.dropItemWithOffset(Item.boat.shiftedIndex, 1, 0.0F);
 				this.setDead();
 			}
 
@@ -213,24 +205,9 @@
 			}
 
 			this.moveEntity(this.motionX, this.motionY, this.motionZ);
-			if(this.isCollidedHorizontally && var21 > 0.2D) {
-				if(!this.worldObj.isRemote) {
-					this.setDead();
-
-					int var22;
-					for(var22 = 0; var22 < 3; ++var22) {
-						this.dropItemWithOffset(Block.planks.blockID, 1, 0.0F);
-					}
-
-					for(var22 = 0; var22 < 2; ++var22) {
-						this.dropItemWithOffset(Item.stick.shiftedIndex, 1, 0.0F);
-					}
-				}
-			} else {
-				this.motionX *= (double)0.99F;
-				this.motionY *= (double)0.95F;
-				this.motionZ *= (double)0.99F;
-			}
+			this.motionX *= (double)0.99F;
+			this.motionY *= (double)0.95F;
+			this.motionZ *= (double)0.99F;
 
 			this.rotationPitch = 0.0F;
 			var8 = (double)this.rotationYaw;
--- net/minecraft/src/ChunkProviderGenerate.java
+++ net/minecraft/src/ChunkProviderGenerate.java
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.Arrays;
 import java.util.List;
 import java.util.Random;
 
@@ -12,9 +13,11 @@
 	public NoiseGeneratorOctaves noiseGen5;
 	public NoiseGeneratorOctaves noiseGen6;
 	public NoiseGeneratorOctaves mobSpawnerNoise;
+	public NoiseGeneratorSimplexOctaves simplexNoise;
 	private World worldObj;
+	private WorldType worldType;
 	private final boolean mapFeaturesEnabled;
-	private double[] noiseArray;
+	private double[] noiseArray = new double[825];
 	private double[] stoneNoise = new double[256];
 	private MapGenBase caveGenerator = new MapGenCaves();
 	private MapGenStronghold strongholdGenerator = new MapGenStronghold();
@@ -22,6 +25,11 @@
 	private MapGenMineshaft mineshaftGenerator = new MapGenMineshaft();
 	private MapGenBase ravineGenerator = new MapGenRavine();
 	private BiomeGenBase[] biomesForGeneration;
+	private float[] minHeights = new float[100];
+	private float[] maxHeights = new float[100];
+	private byte[] blocksForGeneration = new byte[16 * 16 * 256];
+	private byte[] metadataForGeneration = new byte[16 * 16 * 256];
+	private int topTerrainHeight;
 	double[] noise3;
 	double[] noise1;
 	double[] noise2;
@@ -32,6 +40,7 @@
 
 	public ChunkProviderGenerate(World var1, long var2, boolean var4) {
 		this.worldObj = var1;
+		this.worldType = var1.getWorldInfo().getTerrainType();
 		this.mapFeaturesEnabled = var4;
 		this.rand = new Random(var2);
 		this.noiseGen1 = new NoiseGeneratorOctaves(this.rand, 16);
@@ -41,14 +50,25 @@
 		this.noiseGen5 = new NoiseGeneratorOctaves(this.rand, 10);
 		this.noiseGen6 = new NoiseGeneratorOctaves(this.rand, 16);
 		this.mobSpawnerNoise = new NoiseGeneratorOctaves(this.rand, 8);
+		this.simplexNoise = new NoiseGeneratorSimplexOctaves(this.rand, 4);
+		BiomeGenBase.setupNoise(this.rand);
+
+		this.field_35561_l = new float[25];
+		for(int var8 = -2; var8 <= 2; ++var8) {
+			for(int var9 = -2; var9 <= 2; ++var9) {
+				float var10 = 10.0F / MathHelper.sqrt_float((float)(var8 * var8 + var9 * var9) + 0.2F);
+				this.field_35561_l[var8 + 2 + (var9 + 2) * 5] = var10;
+			}
+		}
 	}
 
 	public void generateTerrain(int var1, int var2, byte[] var3) {
+		int height = var3.length / 256;
 		byte var4 = 4;
-		byte var5 = 16;
+		int var5 = height / 8;
 		byte var6 = 63;
 		int var7 = var4 + 1;
-		byte var8 = 17;
+		int var8 = var5 + 1;
 		int var9 = var4 + 1;
 		this.biomesForGeneration = this.worldObj.getWorldChunkManager().getBiomesForGeneration(this.biomesForGeneration, var1 * 4 - 2, var2 * 4 - 2, var7 + 5, var9 + 5);
 		this.noiseArray = this.initializeNoiseField(this.noiseArray, var1 * var4, 0, var2 * var4, var7, var8, var9);
@@ -74,19 +94,23 @@
 						double var40 = (var21 - var17) * var32;
 
 						for(int var42 = 0; var42 < 4; ++var42) {
-							int var43 = var42 + var10 * 4 << 11 | 0 + var11 * 4 << 7 | var12 * 8 + var31;
-							short var44 = 128;
+							int var43 = (var42 + var10 * 4) * height * 16 | var11 * 4 * height | var12 * 8 + var31;
+							short var44 = (short)height;
 							var43 -= var44;
 							double var45 = 0.25D;
 							double var49 = (var36 - var34) * var45;
 							double var47 = var34 - var49;
 
 							for(int var51 = 0; var51 < 4; ++var51) {
+								int y = var12 * 8 + var31;
 								var47 += var49;
 								if(var47 > 0.0D) {
 									var43 += var44;
 									var3[var43] = (byte)Block.stone.blockID;
-								} else if(var12 * 8 + var31 < var6) {
+									if (y > this.topTerrainHeight) {
+										this.topTerrainHeight = y;
+									}
+								} else if(y < var6) {
 									var43 += var44;
 									var3[var43] = (byte)Block.waterStill.blockID;
 								} else {
@@ -110,66 +134,28 @@
 
 	}
 
-	public void replaceBlocksForBiome(int var1, int var2, byte[] var3, BiomeGenBase[] var4) {
-		byte var5 = 63;
+	public void replaceBlocksForBiome(int var1, int var2, byte[] var3, byte[] var3a, BiomeGenBase[] var4) {
 		double var6 = 1.0D / 32.0D;
-		this.stoneNoise = this.noiseGen4.generateNoiseOctaves(this.stoneNoise, var1 * 16, var2 * 16, 0, 16, 16, 1, var6 * 2.0D, var6 * 2.0D, var6 * 2.0D);
-
-		for(int var8 = 0; var8 < 16; ++var8) {
-			for(int var9 = 0; var9 < 16; ++var9) {
-				BiomeGenBase var10 = var4[var9 + var8 * 16];
-				float var11 = var10.getFloatTemperature();
-				int var12 = (int)(this.stoneNoise[var8 + var9 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
-				int var13 = -1;
-				byte var14 = var10.topBlock;
-				byte var15 = var10.fillerBlock;
-
-				for(int var16 = 127; var16 >= 0; --var16) {
-					int var17 = (var9 * 16 + var8) * 128 + var16;
-					if(var16 <= 0 + this.rand.nextInt(5)) {
-						var3[var17] = (byte)Block.bedrock.blockID;
-					} else {
-						byte var18 = var3[var17];
-						if(var18 == 0) {
-							var13 = -1;
-						} else if(var18 == Block.stone.blockID) {
-							if(var13 == -1) {
-								if(var12 <= 0) {
-									var14 = 0;
-									var15 = (byte)Block.stone.blockID;
-								} else if(var16 >= var5 - 4 && var16 <= var5 + 1) {
-									var14 = var10.topBlock;
-									var15 = var10.fillerBlock;
-								}
-
-								if(var16 < var5 && var14 == 0) {
-									if(var11 < 0.15F) {
-										var14 = (byte)Block.ice.blockID;
-									} else {
-										var14 = (byte)Block.waterStill.blockID;
-									}
-								}
-
-								var13 = var12;
-								if(var16 >= var5 - 1) {
-									var3[var17] = var14;
-								} else {
-									var3[var17] = var15;
-								}
-							} else if(var13 > 0) {
-								--var13;
-								var3[var17] = var15;
-								if(var13 == 0 && var15 == Block.sand.blockID) {
-									var13 = this.rand.nextInt(4);
-									var15 = (byte)Block.sandStone.blockID;
-								}
-							}
-						}
-					}
-				}
+		this.stoneNoise = this.simplexNoise.func_151599_a(this.stoneNoise, var1 * 16, var2 * 16, 16, 16, var6 * 2.0D, var6 * 2.0D, 1.0D);
+
+		for (int x = 0; x < 16; ++x) {
+			for (int z = 0; z < 16; ++z) {
+				BiomeGenBase biome = var4[z << 4 | x];
+				int xx = var1 << 4 | x;
+				int zz = var2 << 4 | z;
+				biome.buildBiomeSurface(
+						this.worldObj,
+						this.rand,
+						var3,
+						var3a,
+						xx,
+						zz,
+						this.topTerrainHeight,
+						this.noiseGen4.generateNoiseOctaves(xx * var6 * 2.0D, zz * var6 * 2.0D, 1.0D),
+						this.stoneNoise[x + z * 16]
+				);
 			}
 		}
-
 	}
 
 	public Chunk loadChunk(int var1, int var2) {
@@ -177,20 +163,22 @@
 	}
 
 	public Chunk provideChunk(int var1, int var2) {
+		this.topTerrainHeight = 0;
 		this.rand.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
-		byte[] var3 = new byte[-Short.MIN_VALUE];
-		this.generateTerrain(var1, var2, var3);
+		Arrays.fill(this.blocksForGeneration, (byte)0);
+		Arrays.fill(this.metadataForGeneration, (byte)0);
+		this.generateTerrain(var1, var2, this.blocksForGeneration);
 		this.biomesForGeneration = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, var1 * 16, var2 * 16, 16, 16);
-		this.replaceBlocksForBiome(var1, var2, var3, this.biomesForGeneration);
-		this.caveGenerator.generate(this, this.worldObj, var1, var2, var3);
-		this.ravineGenerator.generate(this, this.worldObj, var1, var2, var3);
+		this.replaceBlocksForBiome(var1, var2, this.blocksForGeneration, this.metadataForGeneration, this.biomesForGeneration);
+		this.caveGenerator.generate(this, this.worldObj, var1, var2, this.blocksForGeneration);
+		this.ravineGenerator.generate(this, this.worldObj, var1, var2, this.blocksForGeneration);
 		if(this.mapFeaturesEnabled) {
-			this.mineshaftGenerator.generate(this, this.worldObj, var1, var2, var3);
-			this.villageGenerator.generate(this, this.worldObj, var1, var2, var3);
-			this.strongholdGenerator.generate(this, this.worldObj, var1, var2, var3);
+			this.mineshaftGenerator.generate(this, this.worldObj, var1, var2, this.blocksForGeneration);
+			this.villageGenerator.generate(this, this.worldObj, var1, var2, this.blocksForGeneration);
+			this.strongholdGenerator.generate(this, this.worldObj, var1, var2, this.blocksForGeneration);
 		}
 
-		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
+		Chunk var4 = new Chunk(this.worldObj, this.blocksForGeneration, var1, var2);
 		byte[] var5 = var4.getBiomeArray();
 
 		for(int var6 = 0; var6 < var5.length; ++var6) {
@@ -202,7 +190,7 @@
 	}
 
 	private double[] initializeNoiseField(double[] var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		if(var1 == null) {
+		if(var1 == null || var1.length < var5 * var6 * var7) {
 			var1 = new double[var5 * var6 * var7];
 		}
 
@@ -228,24 +216,44 @@
 		int var12 = 0;
 		int var13 = 0;
 
+		boolean amplified = this.worldType == WorldType.AMPLIFIED
+				|| (this.worldType instanceof WorldTypeCustomized
+						&& ((WorldTypeCustomized)this.worldType).isAmplified());
+
+		for (int i = 0; i < 100; i++) {
+			this.minHeights[i] = this.biomesForGeneration[i].getMinHeight(var2 - 2 + i % 10, var4 - 2 + i / 10);
+			this.maxHeights[i] = this.biomesForGeneration[i].getMaxHeight(var2 - 2 + i % 10, var4 - 2 + i / 10);
+		}
+
 		for(int var14 = 0; var14 < var5; ++var14) {
 			for(int var15 = 0; var15 < var7; ++var15) {
 				float var16 = 0.0F;
 				float var17 = 0.0F;
 				float var18 = 0.0F;
 				byte var19 = 2;
-				BiomeGenBase var20 = this.biomesForGeneration[var14 + 2 + (var15 + 2) * (var5 + 5)];
+
+				int i = var14 + 2 + (var15 + 2) * (var5 + 5);
+				float baseMinHeight = this.minHeights[i];
 
 				for(int var21 = -var19; var21 <= var19; ++var21) {
 					for(int var22 = -var19; var22 <= var19; ++var22) {
-						BiomeGenBase var23 = this.biomesForGeneration[var14 + var21 + 2 + (var15 + var22 + 2) * (var5 + 5)];
-						float var24 = this.field_35561_l[var21 + 2 + (var22 + 2) * 5] / (var23.minHeight + 2.0F);
-						if(var23.minHeight > var20.minHeight) {
+						i = var14 + var21 + 2 + (var15 + var22 + 2) * (var5 + 5);
+						float minHeight = this.minHeights[i];
+						float var25 = minHeight;
+						float var26 = this.maxHeights[i];
+
+						if(amplified && var25 > -0.5F) {
+							var25 = 1.0F + var25 / 2.0F * 2.0F;
+							var26 = 1.0F + var26 / 2.0F * 4.0F;
+						}
+
+						float var24 = this.field_35561_l[var21 + 2 + (var22 + 2) * 5] / (var25 + 2.0F);
+						if(minHeight > baseMinHeight) {
 							var24 /= 2.0F;
 						}
 
-						var16 += var23.maxHeight * var24;
-						var17 += var23.minHeight * var24;
+						var16 += var26 * var24;
+						var17 += var25 * var24;
 						var18 += var24;
 					}
 				}
@@ -277,14 +285,14 @@
 				}
 
 				++var13;
+				double var47 = (double)var17;
+				double var26 = (double)var16;
+				var47 += var45 * 0.2D;
+				var47 = var47 * 8.5D / 8.0D;
+				double var28 = 8.5D + var47 * 4.0D;
 
 				for(int var46 = 0; var46 < var6; ++var46) {
-					double var47 = (double)var17;
-					double var26 = (double)var16;
-					var47 += var45 * 0.2D;
-					var47 = var47 * (double)var6 / 16.0D;
-					double var28 = (double)var6 / 2.0D + var47 * 4.0D;
-					double var30 = 0.0D;
+					double var30;
 					double var32 = ((double)var46 - var28) * 12.0D * 128.0D / 128.0D / var26;
 					if(var32 < 0.0D) {
 						var32 *= 4.0D;
@@ -302,8 +310,10 @@
 					}
 
 					var30 -= var32;
-					if(var46 > var6 - 4) {
-						double var40 = (double)((float)(var46 - (var6 - 4)) / 3.0F);
+					if (var46 > var6 + 1) {
+						var30 = 0.0D;
+ 					} else if(var46 > var6 - 4) {
+						double var40 = (double)((float)(var46 - var6 - 4) / 3.0F);
 						var30 = var30 * (1.0D - var40) + -10.0D * var40;
 					}
 
@@ -339,14 +349,14 @@
 		int var12;
 		int var13;
 		int var14;
-		if(!var11 && this.rand.nextInt(4) == 0) {
+		if(!var11 && var6.biomeDecorator.generateLakes && this.rand.nextInt(4) == 0) {
 			var12 = var4 + this.rand.nextInt(16) + 8;
 			var13 = this.rand.nextInt(128);
 			var14 = var5 + this.rand.nextInt(16) + 8;
 			(new WorldGenLakes(Block.waterStill.blockID)).generate(this.worldObj, this.rand, var12, var13, var14);
 		}
 
-		if(!var11 && this.rand.nextInt(8) == 0) {
+		if(!var11 && var6.biomeDecorator.generateLakes && this.rand.nextInt(8) == 0) {
 			var12 = var4 + this.rand.nextInt(16) + 8;
 			var13 = this.rand.nextInt(this.rand.nextInt(120) + 8);
 			var14 = var5 + this.rand.nextInt(16) + 8;
--- net/minecraft/src/GenLayerHills.java
+++ net/minecraft/src/GenLayerHills.java
@@ -14,20 +14,11 @@
 			for(int var8 = 0; var8 < var3; ++var8) {
 				this.initChunkSeed((long)(var8 + var1), (long)(var7 + var2));
 				int var9 = var5[var8 + 1 + (var7 + 1) * (var3 + 2)];
-				if(this.nextInt(3) == 0) {
+				if(this.nextInt(2) == 0) {
 					int var10 = var9;
-					if(var9 == BiomeGenBase.desert.biomeID) {
-						var10 = BiomeGenBase.desertHills.biomeID;
-					} else if(var9 == BiomeGenBase.forest.biomeID) {
-						var10 = BiomeGenBase.forestHills.biomeID;
-					} else if(var9 == BiomeGenBase.taiga.biomeID) {
-						var10 = BiomeGenBase.taigaHills.biomeID;
-					} else if(var9 == BiomeGenBase.plains.biomeID) {
-						var10 = BiomeGenBase.forest.biomeID;
-					} else if(var9 == BiomeGenBase.icePlains.biomeID) {
-						var10 = BiomeGenBase.iceMountains.biomeID;
-					} else if(var9 == BiomeGenBase.jungle.biomeID) {
-						var10 = BiomeGenBase.jungleHills.biomeID;
+					BiomeGenBase variant = BiomeGenBase.biomeList[var9].hillsVariant;
+					if (variant != null) {
+						var10 = variant.biomeID;
 					}
 
 					if(var10 != var9) {
--- net/minecraft/src/BlockFence.java
+++ net/minecraft/src/BlockFence.java
@@ -94,4 +94,8 @@
 			return true;
 		}
 	}
+
+	protected int damageDropped(int var1) {
+		return this.blockMaterial == Material.wood ? var1 : 0;
+	}
 }
--- net/minecraft/src/GenLayerAddMushroomIsland.java
+++ net/minecraft/src/GenLayerAddMushroomIsland.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import static net.minecraft.src.BiomeGenBase.oceanList;
+
 public class GenLayerAddMushroomIsland extends GenLayer {
 	public GenLayerAddMushroomIsland(long var1, GenLayer var3) {
 		super(var1);
--- /dev/null
+++ net/minecraft/src/GenLayerTemperatureMix.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+public class GenLayerTemperatureMix extends GenLayer {
+    private GenLayer otherParent;
+    private int strength;
+
+    public GenLayerTemperatureMix(GenLayer genLayer, GenLayer genLayer2, int strength) {
+        super(0L);
+        this.parent = genLayer2;
+        this.otherParent = genLayer;
+        this.strength = strength;
+    }
+
+    public int[] getInts(int n, int n2, int n3, int n4) {
+        int[] nArray = this.parent.getInts(n, n2, n3, n4);
+        int[] nArray2 = this.otherParent.getInts(n, n2, n3, n4);
+        int[] nArray3 = IntCache.getIntCache(n3 * n4);
+        for (int i = 0; i < n3 * n4; ++i) {
+            nArray3[i] = nArray2[i] + (BiomeGenBase.biomeList[nArray[i]].getIntTemperature() - nArray2[i]) / (this.strength * 2 + 1);
+        }
+        return nArray3;
+    }
+}
--- net/minecraft/src/NoiseGeneratorOctaves.java
+++ net/minecraft/src/NoiseGeneratorOctaves.java
@@ -49,4 +49,16 @@
 	public double[] generateNoiseOctaves(double[] var1, int var2, int var3, int var4, int var5, double var6, double var8, double var10) {
 		return this.generateNoiseOctaves(var1, var2, 10, var3, var4, 1, var5, var6, 1.0D, var8);
 	}
+
+	public final double generateNoiseOctaves(double var1, double var3, double var5) {
+		double var7 = 0.0D;
+		double var9 = 1.0D;
+
+		for(int var11 = 0; var11 < this.octaves; ++var11) {
+			var7 += this.generatorCollection[var11].generateNoise(var1 * var9, var3 * var9, var5 * var9) / var9;
+			var9 /= 2.0D;
+		}
+
+		return var7;
+	}
 }
--- /dev/null
+++ net/minecraft/src/GenLayerDownfall.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class GenLayerDownfall extends GenLayer {
+    public GenLayerDownfall(GenLayer genLayer) {
+        super(0L);
+        this.parent = genLayer;
+    }
+
+    public int[] getInts(int n, int n2, int n3, int n4) {
+        int[] nArray = this.parent.getInts(n, n2, n3, n4);
+        int[] nArray2 = IntCache.getIntCache(n3 * n4);
+        for (int i = 0; i < n3 * n4; ++i) {
+            nArray2[i] = BiomeGenBase.biomeList[nArray[i]].getIntRainfall();
+        }
+        return nArray2;
+    }
+}
--- net/minecraft/src/BiomeGenJungle.java
+++ net/minecraft/src/BiomeGenJungle.java
@@ -24,9 +24,9 @@
 		super.decorate(var1, var2, var3, var4);
 		WorldGenVines var5 = new WorldGenVines();
 
-		for(int var6 = 0; var6 < 50; ++var6) {
+		for(int var6 = 0; var6 < 80; ++var6) {
 			int var7 = var3 + var2.nextInt(16) + 8;
-			byte var8 = 64;
+			int var8 = var2.nextInt(64);
 			int var9 = var4 + var2.nextInt(16) + 8;
 			var5.generate(var1, var2, var7, var8, var9);
 		}
--- /dev/null
+++ net/minecraft/src/GenLayerBiomeDownfall.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class GenLayerBiomeDownfall extends GenLayer {
+    public GenLayerBiomeDownfall(GenLayer genLayer) {
+        super(0L);
+        this.parent = genLayer;
+    }
+
+    public int[] getInts(int n, int n2, int n3, int n4) {
+        int[] nArray = this.parent.getInts(n, n2, n3, n4);
+        int[] nArray2 = IntCache.getIntCache(n3 * n4);
+        for (int i = 0; i < n3 * n4; ++i) {
+            nArray2[i] = BiomeGenBase.biomeList[nArray[i]].getIntRainfall();
+        }
+        return nArray2;
+    }
+}
--- net/minecraft/src/ItemSoup.java
+++ net/minecraft/src/ItemSoup.java
@@ -1,13 +1,26 @@
 package net.minecraft.src;
 
 public class ItemSoup extends ItemFood {
-	public ItemSoup(int var1, int var2) {
-		super(var1, var2, false);
-		this.setMaxStackSize(1);
-	}
-
-	public ItemStack onFoodEaten(ItemStack var1, World var2, EntityPlayer var3) {
-		super.onFoodEaten(var1, var2, var3);
-		return new ItemStack(Item.bowlEmpty);
-	}
+    public ItemSoup(int var1, int var2) {
+        super(var1, var2, false);
+        this.setMaxStackSize(4);
+    }
+
+    public ItemStack onFoodEaten(ItemStack var1, World var2, EntityPlayer var3) {
+        var1 = super.onFoodEaten(var1, var2, var3);
+        if (var1.stackSize <= 0) {
+            return new ItemStack(Item.bowlEmpty);
+        } else {
+            var3.inventory.addItemStackToInventory(new ItemStack(Item.bowlEmpty));
+            return var1;
+        }
+    }
+
+    protected void setClassicTweaks() {
+        this.setMaxStackSize(1);
+    }
+
+    protected void unsetClassicTweaks() {
+        this.setMaxStackSize(4);
+    }
 }
--- net/minecraft/src/BlockPistonBase.java
+++ net/minecraft/src/BlockPistonBase.java
@@ -242,7 +242,7 @@
 
 		while(true) {
 			if(var8 < 13) {
-				if(var6 <= 0 || var6 >= 255) {
+				if(var6 <= 0) {
 					return false;
 				}
 
@@ -279,7 +279,7 @@
 		while(true) {
 			int var10;
 			if(var9 < 13) {
-				if(var7 <= 0 || var7 >= 255) {
+				if(var7 <= 0) {
 					return false;
 				}
 
--- net/minecraft/src/WorldGenTaiga2.java
+++ net/minecraft/src/WorldGenTaiga2.java
@@ -13,7 +13,7 @@
 		int var8 = var6 - var7;
 		int var9 = 2 + var2.nextInt(2);
 		boolean var10 = true;
-		if(var4 >= 1 && var4 + var6 + 1 <= 256) {
+		if(var4 >= 1) {
 			int var11;
 			int var13;
 			int var15;
@@ -28,7 +28,7 @@
 
 				for(var13 = var3 - var21; var13 <= var3 + var21 && var10; ++var13) {
 					for(int var14 = var5 - var21; var14 <= var5 + var21 && var10; ++var14) {
-						if(var11 >= 0 && var11 < 256) {
+						if(var11 >= 0) {
 							var15 = var1.getBlockId(var13, var11, var14);
 							if(var15 != 0 && var15 != Block.leaves.blockID) {
 								var10 = false;
@@ -44,7 +44,7 @@
 				return false;
 			} else {
 				var11 = var1.getBlockId(var3, var4 - 1, var5);
-				if((var11 == Block.grass.blockID || var11 == Block.dirt.blockID) && var4 < 256 - var6 - 1) {
+				if(var11 == Block.grass.blockID || var11 == Block.dirt.blockID) {
 					this.func_50023_a(var1, var3, var4 - 1, var5, Block.dirt.blockID);
 					var21 = var2.nextInt(2);
 					var13 = 1;
--- net/minecraft/src/EntitySnowman.java
+++ net/minecraft/src/EntitySnowman.java
@@ -37,7 +37,7 @@
 			var2 = MathHelper.floor_double(this.posX + (double)((float)(var1 % 2 * 2 - 1) * 0.25F));
 			int var3 = MathHelper.floor_double(this.posY);
 			int var4 = MathHelper.floor_double(this.posZ + (double)((float)(var1 / 2 % 2 * 2 - 1) * 0.25F));
-			if(this.worldObj.getBlockId(var2, var3, var4) == 0 && this.worldObj.getBiomeGenForCoords(var2, var4).getFloatTemperature() < 0.8F && Block.snow.canPlaceBlockAt(this.worldObj, var2, var3, var4)) {
+			if(this.worldObj.getBlockId(var2, var3, var4) == 0 && this.worldObj.getBiomeGenForCoords(var2, var4).getFloatTemperature() < 1.0F && Block.snow.canPlaceBlockAt(this.worldObj, var2, var3, var4)) {
 				this.worldObj.setBlockWithNotify(var2, var3, var4, Block.snow.blockID);
 			}
 		}
--- /dev/null
+++ net/minecraft/src/GenLayerClimate.java
@@ -1,0 +1,47 @@
+package net.minecraft.src;
+
+import java.util.List;
+import java.util.Random;
+
+public class GenLayerClimate extends GenLayer {
+	private NoiseGeneratorOctaves2 temperatureNoise;
+	private long noiseSeed;
+
+	public GenLayerClimate(long var1, GenLayer var3) {
+		super(var1);
+		this.parent = var3;
+	}
+
+	public int[] getInts(int var1, int var2, int var3, int var4) {
+		if (this.temperatureNoise == null || this.noiseSeed != this.getWorldGenSeed()) {
+			this.noiseSeed = this.getWorldGenSeed();
+			Random random = new Random(this.noiseSeed);
+			this.temperatureNoise = new NoiseGeneratorOctaves2(random, 1);
+		}
+
+		int[] var9 = this.parent.getInts(var1, var2, var3, var4);
+		int[] var10 = IntCache.getIntCache(var3 * var4);
+		double[] temperatures = this.temperatureNoise.func_4112_a(new double[var3 * var4], var2, var1, var4, var3, 0.4D, 0.4D, 0.5D);
+
+		for(int var11 = 0; var11 < var4; ++var11) {
+			for(int var12 = 0; var12 < var3; ++var12) {
+				int i = var12 + var11 * var3;
+				this.initChunkSeed(var12 + var1, var11 + var2);
+
+				int b = var9[i];
+				if(b == 0) {
+					var10[i] = 0;
+				} else {
+					double t = temperatures[i] * 2.2D;
+					int ti = (int)Math.round(t);
+
+					List<ClimateZone> zones = ClimateZone.getZonesFromTemperature(ti);
+					int zi = this.nextInt(zones.size());
+					var10[i] = zones.get(zi).id();
+				}
+			}
+		}
+
+		return var10;
+	}
+}
--- net/minecraft/src/ComponentStrongholdRoomCrossing.java
+++ net/minecraft/src/ComponentStrongholdRoomCrossing.java
@@ -13,7 +13,12 @@
 		this.coordBaseMode = var4;
 		this.doorType = this.getRandomDoor(var2);
 		this.boundingBox = var3;
-		this.roomType = var2.nextInt(5);
+
+		int roomType = var2.nextInt(5);
+		if (roomType == 2 && this.boundingBox.minY >= 64) {
+			roomType = -1;
+		}
+		this.roomType = roomType;
 	}
 
 	public void buildComponent(StructureComponent var1, List var2, Random var3) {
--- net/minecraft/src/BlockStairs.java
+++ net/minecraft/src/BlockStairs.java
@@ -5,10 +5,16 @@
 
 public class BlockStairs extends Block {
 	private Block modelBlock;
+	private int modelMetadata;
 
 	protected BlockStairs(int var1, Block var2) {
+		this(var1, var2, 0);
+	}
+
+	protected BlockStairs(int var1, Block var2, int var3) {
 		super(var1, var2.blockIndexInTexture, var2.blockMaterial);
 		this.modelBlock = var2;
+		this.modelMetadata = var3;
 		this.setHardness(var2.blockHardness);
 		this.setResistance(var2.blockResistance / 3.0F);
 		this.setStepSound(var2.stepSound);
@@ -36,37 +42,229 @@
 	}
 
 	public void getCollidingBoundingBoxes(World var1, int var2, int var3, int var4, AxisAlignedBB var5, ArrayList var6) {
-		int var7 = var1.getBlockMetadata(var2, var3, var4);
-		int var8 = var7 & 3;
-		float var9 = 0.0F;
-		float var10 = 0.5F;
-		float var11 = 0.5F;
-		float var12 = 1.0F;
-		if((var7 & 4) != 0) {
-			var9 = 0.5F;
-			var10 = 1.0F;
-			var11 = 0.0F;
-			var12 = 0.5F;
-		}
-
-		this.setBlockBounds(0.0F, var9, 0.0F, 1.0F, var10, 1.0F);
-		super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		if(var8 == 0) {
-			this.setBlockBounds(0.5F, var11, 0.0F, 1.0F, var12, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		} else if(var8 == 1) {
-			this.setBlockBounds(0.0F, var11, 0.0F, 0.5F, var12, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		} else if(var8 == 2) {
-			this.setBlockBounds(0.0F, var11, 0.5F, 1.0F, var12, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		} else if(var8 == 3) {
-			this.setBlockBounds(0.0F, var11, 0.0F, 1.0F, var12, 0.5F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		}
-
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		this.halfType(var1, var2, var3, var4);
+        super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+        boolean var8 = this.cornerTypeA(var1, var2, var3, var4);
+        super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+
+        if (var8 && this.cornerTypeB(var1, var2, var3, var4)) {
+            super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+        }
+
+        this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 	}
+
+	public void halfType(IBlockAccess var1, int var2, int var3, int var4) {
+        int var5 = var1.getBlockMetadata(var2, var3, var4);
+
+        if ((var5 & 4) != 0) {
+            this.setBlockBounds(0.0F, 0.5F, 0.0F, 1.0F, 1.0F, 1.0F);
+        } else {
+            this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
+        }
+    }
+
+	private boolean validNeighbor(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+        Block var6 = Block.blocksList[var1.getBlockId(var2, var3, var4)];
+        return var6 instanceof BlockStairs && var1.getBlockMetadata(var2, var3, var4) == var5;
+    }
+
+    public boolean cornerTypeA(IBlockAccess var1, int var2, int var3, int var4) {
+        int var5 = var1.getBlockMetadata(var2, var3, var4);
+        int var6 = var5 & 3;
+        float var7 = 0.5F;
+        float var8 = 1.0F;
+
+        if ((var5 & 4) != 0) {
+            var7 = 0.0F;
+            var8 = 0.5F;
+        }
+
+        float var9 = 0.0F;
+        float var10 = 1.0F;
+        float var11 = 0.0F;
+        float var12 = 0.5F;
+        boolean var13 = true;
+        Block var14;
+        int var15;
+        int var16;
+
+        if (var6 == 0) {
+            var9 = 0.5F;
+            var12 = 1.0F;
+            int var14i = var1.getBlockId(var2 + 1, var3, var4);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2 + 1, var3, var4);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var16 = var15 & 3;
+
+                if (var16 == 3 && !this.validNeighbor(var1, var2, var3, var4 + 1, var5)) {
+                    var12 = 0.5F;
+                    var13 = false;
+                } else if (var16 == 2 && !this.validNeighbor(var1, var2, var3, var4 - 1, var5)) {
+                    var11 = 0.5F;
+                    var13 = false;
+                }
+            }
+        } else if (var6 == 1) {
+            var10 = 0.5F;
+            var12 = 1.0F;
+            int var14i = var1.getBlockId(var2 - 1, var3, var4);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2 - 1, var3, var4);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var16 = var15 & 3;
+
+                if (var16 == 3 && !this.validNeighbor(var1, var2, var3, var4 + 1, var5)) {
+                    var12 = 0.5F;
+                    var13 = false;
+                } else if (var16 == 2 && !this.validNeighbor(var1, var2, var3, var4 - 1, var5)) {
+                    var11 = 0.5F;
+                    var13 = false;
+                }
+            }
+        } else if (var6 == 2) {
+            var11 = 0.5F;
+            var12 = 1.0F;
+            int var14i = var1.getBlockId(var2, var3, var4 + 1);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2, var3, var4 + 1);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var16 = var15 & 3;
+
+                if (var16 == 1 && !this.validNeighbor(var1, var2 + 1, var3, var4, var5)) {
+                    var10 = 0.5F;
+                    var13 = false;
+                } else if (var16 == 0 && !this.validNeighbor(var1, var2 - 1, var3, var4, var5)) {
+                    var9 = 0.5F;
+                    var13 = false;
+                }
+            }
+        } else if (var6 == 3) {
+            int var14i = var1.getBlockId(var2, var3, var4 - 1);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2, var3, var4 - 1);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var16 = var15 & 3;
+
+                if (var16 == 1 && !this.validNeighbor(var1, var2 + 1, var3, var4, var5)) {
+                    var10 = 0.5F;
+                    var13 = false;
+                } else if (var16 == 0 && !this.validNeighbor(var1, var2 - 1, var3, var4, var5)) {
+                    var9 = 0.5F;
+                    var13 = false;
+                }
+            }
+        }
+
+        this.setBlockBounds(var9, var7, var11, var10, var8, var12);
+        return var13;
+    }
+
+    public boolean cornerTypeB(IBlockAccess var1, int var2, int var3, int var4) {
+        int var5 = var1.getBlockMetadata(var2, var3, var4);
+        int var6 = var5 & 3;
+        float var7 = 0.5F;
+        float var8 = 1.0F;
+
+        if ((var5 & 4) != 0) {
+            var7 = 0.0F;
+            var8 = 0.5F;
+        }
+
+        float var9 = 0.0F;
+        float var10 = 0.5F;
+        float var11 = 0.5F;
+        float var12 = 1.0F;
+        boolean var13 = false;
+        Block var14;
+        int var15;
+        int var16;
+
+        if (var6 == 0) {
+            int var14i = var1.getBlockId(var2 - 1, var3, var4);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2 - 1, var3, var4);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var16 = var15 & 3;
+
+                if (var16 == 3 && !this.validNeighbor(var1, var2, var3, var4 - 1, var5)) {
+                    var11 = 0.0F;
+                    var12 = 0.5F;
+                    var13 = true;
+                } else if (var16 == 2 && !this.validNeighbor(var1, var2, var3, var4 + 1, var5)) {
+                    var11 = 0.5F;
+                    var12 = 1.0F;
+                    var13 = true;
+                }
+            }
+        } else if (var6 == 1) {
+            int var14i = var1.getBlockId(var2 + 1, var3, var4);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2 + 1, var3, var4);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var9 = 0.5F;
+                var10 = 1.0F;
+                var16 = var15 & 3;
+
+                if (var16 == 3 && !this.validNeighbor(var1, var2, var3, var4 - 1, var5)) {
+                    var11 = 0.0F;
+                    var12 = 0.5F;
+                    var13 = true;
+                } else if (var16 == 2 && !this.validNeighbor(var1, var2, var3, var4 + 1, var5)) {
+                    var11 = 0.5F;
+                    var12 = 1.0F;
+                    var13 = true;
+                }
+            }
+        } else if (var6 == 2) {
+            int var14i = var1.getBlockId(var2, var3, var4 - 1);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2, var3, var4 - 1);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var11 = 0.0F;
+                var12 = 0.5F;
+                var16 = var15 & 3;
+
+                if (var16 == 1 && !this.validNeighbor(var1, var2 - 1, var3, var4, var5)) {
+                    var13 = true;
+                } else if (var16 == 0 && !this.validNeighbor(var1, var2 + 1, var3, var4, var5)) {
+                    var9 = 0.5F;
+                    var10 = 1.0F;
+                    var13 = true;
+                }
+            }
+        } else if (var6 == 3) {
+            int var14i = var1.getBlockId(var2, var3, var4 + 1);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2, var3, var4 + 1);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var16 = var15 & 3;
+
+                if (var16 == 1 && !this.validNeighbor(var1, var2 - 1, var3, var4, var5)) {
+                    var13 = true;
+                } else if (var16 == 0 && !this.validNeighbor(var1, var2 + 1, var3, var4, var5)) {
+                    var9 = 0.5F;
+                    var10 = 1.0F;
+                    var13 = true;
+                }
+            }
+        }
+
+        if (var13) {
+            this.setBlockBounds(var9, var7, var11, var10, var8, var12);
+        }
+
+        return var13;
+    }
 
 	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
 		this.modelBlock.onBlockClicked(var1, var2, var3, var4, var5);
@@ -81,11 +279,11 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, 0);
+		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, this.modelMetadata);
 	}
 
 	public int getBlockTextureFromSide(int var1) {
-		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, 0);
+		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, this.modelMetadata);
 	}
 
 	public int tickRate() {
--- /dev/null
+++ net/minecraft/src/BiomeGenParched.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenParched extends BiomeGenBase {
+	protected BiomeGenParched(int var1) {
+		super(var1);
+		this.biomeDecorator.treesPerChunk = 10;
+		this.biomeDecorator.grassPerChunk = 2;
+		this.biomeDecorator.bigMushroomsPerChunk = 100;
+	}
+
+	@Override
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(5) == 0 ? this.worldGenForest : (var1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
+	}
+}
--- net/minecraft/src/ComponentStrongholdStairs2.java
+++ net/minecraft/src/ComponentStrongholdStairs2.java
@@ -15,4 +15,8 @@
 	public ChunkPosition getCenter() {
 		return this.portalRoom != null ? this.portalRoom.getCenter() : super.getCenter();
 	}
+
+	public boolean addComponentParts(World var1, Random var2, StructureBoundingBox var3) {
+		return !this.isLiquidInStructureBoundingBox(var1, var3);
+	}
 }
--- /dev/null
+++ net/minecraft/src/BiomeGenSeasonalForest.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenSeasonalForest extends BiomeGenBase {
+	public BiomeGenSeasonalForest(int var1) {
+		super(var1);
+		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 5, 4, 4));
+		this.biomeDecorator.treesPerChunk = 4;
+		this.biomeDecorator.grassPerChunk = 2;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees;
+	}
+}
--- /dev/null
+++ net/minecraft/src/NoiseGenerator2.java
@@ -1,0 +1,114 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class NoiseGenerator2 {
+	private static int[][] field_4296_d = new int[][]{{1, 1, 0}, {-1, 1, 0}, {1, -1, 0}, {-1, -1, 0}, {1, 0, 1}, {-1, 0, 1}, {1, 0, -1}, {-1, 0, -1}, {0, 1, 1}, {0, -1, 1}, {0, 1, -1}, {0, -1, -1}};
+	private int[] field_4295_e;
+	public double field_4292_a;
+	public double field_4291_b;
+	public double field_4297_c;
+	private static final double field_4294_f = 0.5D * (Math.sqrt(3.0D) - 1.0D);
+	private static final double field_4293_g = (3.0D - Math.sqrt(3.0D)) / 6.0D;
+
+	public NoiseGenerator2() {
+		this(new Random());
+	}
+
+	public NoiseGenerator2(Random var1) {
+		this.field_4295_e = new int[512];
+		this.field_4292_a = var1.nextDouble() * 256.0D;
+		this.field_4291_b = var1.nextDouble() * 256.0D;
+		this.field_4297_c = var1.nextDouble() * 256.0D;
+
+		int var2;
+		for(var2 = 0; var2 < 256; this.field_4295_e[var2] = var2++) {
+		}
+
+		for(var2 = 0; var2 < 256; ++var2) {
+			int var3 = var1.nextInt(256 - var2) + var2;
+			int var4 = this.field_4295_e[var2];
+			this.field_4295_e[var2] = this.field_4295_e[var3];
+			this.field_4295_e[var3] = var4;
+			this.field_4295_e[var2 + 256] = this.field_4295_e[var2];
+		}
+
+	}
+
+	private static int wrap(double var0) {
+		return var0 > 0.0D ? (int)var0 : (int)var0 - 1;
+	}
+
+	private static double func_4156_a(int[] var0, double var1, double var3) {
+		return (double)var0[0] * var1 + (double)var0[1] * var3;
+	}
+
+	public void func_4157_a(double[] var1, double var2, double var4, int var6, int var7, double var8, double var10, double var12) {
+		int var14 = 0;
+
+		for(int var15 = 0; var15 < var6; ++var15) {
+			double var16 = (var2 + (double)var15) * var8 + this.field_4292_a;
+
+			for(int var18 = 0; var18 < var7; ++var18) {
+				double var19 = (var4 + (double)var18) * var10 + this.field_4291_b;
+				double var27 = (var16 + var19) * field_4294_f;
+				int var29 = wrap(var16 + var27);
+				int var30 = wrap(var19 + var27);
+				double var31 = (double)(var29 + var30) * field_4293_g;
+				double var33 = (double)var29 - var31;
+				double var35 = (double)var30 - var31;
+				double var37 = var16 - var33;
+				double var39 = var19 - var35;
+				byte var41;
+				byte var42;
+				if(var37 > var39) {
+					var41 = 1;
+					var42 = 0;
+				} else {
+					var41 = 0;
+					var42 = 1;
+				}
+
+				double var43 = var37 - (double)var41 + field_4293_g;
+				double var45 = var39 - (double)var42 + field_4293_g;
+				double var47 = var37 - 1.0D + 2.0D * field_4293_g;
+				double var49 = var39 - 1.0D + 2.0D * field_4293_g;
+				int var51 = var29 & 255;
+				int var52 = var30 & 255;
+				int var53 = this.field_4295_e[var51 + this.field_4295_e[var52]] % 12;
+				int var54 = this.field_4295_e[var51 + var41 + this.field_4295_e[var52 + var42]] % 12;
+				int var55 = this.field_4295_e[var51 + 1 + this.field_4295_e[var52 + 1]] % 12;
+				double var56 = 0.5D - var37 * var37 - var39 * var39;
+				double var21;
+				if(var56 < 0.0D) {
+					var21 = 0.0D;
+				} else {
+					var56 *= var56;
+					var21 = var56 * var56 * func_4156_a(field_4296_d[var53], var37, var39);
+				}
+
+				double var58 = 0.5D - var43 * var43 - var45 * var45;
+				double var23;
+				if(var58 < 0.0D) {
+					var23 = 0.0D;
+				} else {
+					var58 *= var58;
+					var23 = var58 * var58 * func_4156_a(field_4296_d[var54], var43, var45);
+				}
+
+				double var60 = 0.5D - var47 * var47 - var49 * var49;
+				double var25;
+				if(var60 < 0.0D) {
+					var25 = 0.0D;
+				} else {
+					var60 *= var60;
+					var25 = var60 * var60 * func_4156_a(field_4296_d[var55], var47, var49);
+				}
+
+				int var10001 = var14++;
+				var1[var10001] += 70.0D * (var21 + var23 + var25) * var12;
+			}
+		}
+
+	}
+}
--- net/minecraft/src/BlockLilyPad.java
+++ net/minecraft/src/BlockLilyPad.java
@@ -25,6 +25,6 @@
 	}
 
 	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-		return var3 >= 0 && var3 < 256 ? var1.getBlockMaterial(var2, var3 - 1, var4) == Material.water && var1.getBlockMetadata(var2, var3 - 1, var4) == 0 : false;
+		return var3 >= 0 ? var1.getBlockMaterial(var2, var3 - 1, var4) == Material.water && var1.getBlockMetadata(var2, var3 - 1, var4) == 0 : false;
 	}
 }
--- net/minecraft/src/StructureStrongholdPieceWeight2.java
+++ net/minecraft/src/StructureStrongholdPieceWeight2.java
@@ -5,6 +5,10 @@
 		super(var1, var2, var3);
 	}
 
+	StructureStrongholdPieceWeight2(Class var1, int var2, int var3, boolean var4) {
+		super(var1, var2, var3, var4);
+	}
+
 	public boolean canSpawnMoreStructuresOfType(int var1) {
 		return super.canSpawnMoreStructuresOfType(var1) && var1 > 4;
 	}
--- net/minecraft/src/WorldChunkManager.java
+++ net/minecraft/src/WorldChunkManager.java
@@ -1,25 +1,28 @@
 package net.minecraft.src;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Random;
 
 public class WorldChunkManager {
 	private GenLayer genBiomes;
 	private GenLayer biomeIndexLayer;
+	private GenLayer temperatureIndexLayer;
+	private GenLayer rainfallIndexLayer;
 	private BiomeCache biomeCache;
 	private List biomesToSpawnIn;
 
 	protected WorldChunkManager() {
 		this.biomeCache = new BiomeCache(this);
-		this.biomesToSpawnIn = new ArrayList();
-		this.biomesToSpawnIn.add(BiomeGenBase.forest);
-		this.biomesToSpawnIn.add(BiomeGenBase.plains);
-		this.biomesToSpawnIn.add(BiomeGenBase.taiga);
-		this.biomesToSpawnIn.add(BiomeGenBase.taigaHills);
-		this.biomesToSpawnIn.add(BiomeGenBase.forestHills);
-		this.biomesToSpawnIn.add(BiomeGenBase.jungle);
-		this.biomesToSpawnIn.add(BiomeGenBase.jungleHills);
+		this.biomesToSpawnIn = Arrays.asList(
+				BiomeGenBase.plains,
+				BiomeGenBase.forest,
+				BiomeGenBase.beach,
+				BiomeGenBase.swampland,
+				BiomeGenBase.birchForest,
+				BiomeGenBase.gravelBeach
+		);
 	}
 
 	public WorldChunkManager(long var1, WorldType var3) {
@@ -27,6 +30,8 @@
 		GenLayer[] var4 = GenLayer.func_48391_a(var1, var3);
 		this.genBiomes = var4[0];
 		this.biomeIndexLayer = var4[1];
+		this.temperatureIndexLayer = var4[2];
+		this.rainfallIndexLayer = var4[3];
 	}
 
 	public WorldChunkManager(World var1) {
@@ -41,16 +46,20 @@
 		return this.biomeCache.getBiomeGenAt(var1, var2);
 	}
 
+	public float getRainfall(int var1, int var2) {
+		return this.biomeCache.getRainfall(var1, var2);
+	}
+
 	public float[] getRainfall(float[] var1, int var2, int var3, int var4, int var5) {
 		IntCache.resetIntCache();
 		if(var1 == null || var1.length < var4 * var5) {
 			var1 = new float[var4 * var5];
 		}
 
-		int[] var6 = this.biomeIndexLayer.getInts(var2, var3, var4, var5);
+		int[] var6 = this.rainfallIndexLayer.getInts(var2, var3, var4, var5);
 
 		for(int var7 = 0; var7 < var4 * var5; ++var7) {
-			float var8 = (float)BiomeGenBase.biomeList[var6[var7]].getIntRainfall() / 65536.0F;
+			float var8 = (float)var6[var7] / 65536.0F;
 			if(var8 > 1.0F) {
 				var8 = 1.0F;
 			}
@@ -59,6 +68,10 @@
 		}
 
 		return var1;
+	}
+
+	public float getTemperature(int var1, int var2) {
+		return this.biomeCache.getTemperature(var1, var2);
 	}
 
 	public float[] getTemperatures(float[] var1, int var2, int var3, int var4, int var5) {
@@ -67,10 +80,10 @@
 			var1 = new float[var4 * var5];
 		}
 
-		int[] var6 = this.biomeIndexLayer.getInts(var2, var3, var4, var5);
+		int[] var6 = this.temperatureIndexLayer.getInts(var2, var3, var4, var5);
 
 		for(int var7 = 0; var7 < var4 * var5; ++var7) {
-			float var8 = (float)BiomeGenBase.biomeList[var6[var7]].getIntTemperature() / 65536.0F;
+			float var8 = (float)var6[var7] / 65536.0F;
 			if(var8 > 1.0F) {
 				var8 = 1.0F;
 			}
@@ -155,7 +168,7 @@
 			int var16 = var6 + var15 % var10 << 2;
 			int var17 = var7 + var15 / var10 << 2;
 			BiomeGenBase var18 = BiomeGenBase.biomeList[var12[var15]];
-			if(var4.contains(var18) && (var13 == null || var5.nextInt(var14 + 1) == 0)) {
+			if((var4 != null ? var4.contains(var18) : !var18.isOcean()) && (var13 == null || var5.nextInt(var14 + 1) == 0)) {
 				var13 = new ChunkPosition(var16, 0, var17);
 				++var14;
 			}
--- net/minecraft/src/Packet61DoorChange.java
+++ net/minecraft/src/Packet61DoorChange.java
@@ -25,7 +25,7 @@
 	public void readPacketData(DataInputStream var1) throws IOException {
 		this.sfxID = var1.readInt();
 		this.posX = var1.readInt();
-		this.posY = var1.readByte() & 255;
+		this.posY = var1.readShort();
 		this.posZ = var1.readInt();
 		this.auxData = var1.readInt();
 	}
@@ -33,7 +33,7 @@
 	public void writePacketData(DataOutputStream var1) throws IOException {
 		var1.writeInt(this.sfxID);
 		var1.writeInt(this.posX);
-		var1.writeByte(this.posY & 255);
+		var1.writeShort(this.posY);
 		var1.writeInt(this.posZ);
 		var1.writeInt(this.auxData);
 	}
@@ -43,6 +43,6 @@
 	}
 
 	public int getPacketSize() {
-		return 20;
+		return 21;
 	}
 }
--- net/minecraft/src/ComponentVillageHouse2.java
+++ net/minecraft/src/ComponentVillageHouse2.java
@@ -33,8 +33,8 @@
 		}
 
 		this.fillWithBlocks(var1, var3, 0, 1, 0, 9, 4, 6, 0, 0, false);
-		this.fillWithBlocks(var1, var3, 0, 0, 0, 9, 0, 6, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 0, 4, 0, 9, 4, 6, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 0, 0, 9, 0, 6, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 4, 0, 9, 4, 6, false, var2, StructureVillagePieces.villageStones);
 		this.fillWithBlocks(var1, var3, 0, 5, 0, 9, 5, 6, Block.stairSingle.blockID, Block.stairSingle.blockID, false);
 		this.fillWithBlocks(var1, var3, 1, 5, 1, 8, 5, 5, 0, 0, false);
 		this.fillWithBlocks(var1, var3, 1, 1, 0, 2, 3, 0, Block.planks.blockID, Block.planks.blockID, false);
@@ -48,7 +48,7 @@
 		this.fillWithBlocks(var1, var3, 1, 1, 6, 5, 3, 6, Block.planks.blockID, Block.planks.blockID, false);
 		this.fillWithBlocks(var1, var3, 5, 1, 0, 5, 3, 0, Block.fence.blockID, Block.fence.blockID, false);
 		this.fillWithBlocks(var1, var3, 9, 1, 0, 9, 3, 0, Block.fence.blockID, Block.fence.blockID, false);
-		this.fillWithBlocks(var1, var3, 6, 1, 4, 9, 4, 6, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+		this.fillWithRandomizedBlocks(var1, var3, 6, 1, 4, 9, 4, 6, false, var2, StructureVillagePieces.villageStones);
 		this.placeBlockAtCurrentPosition(var1, Block.lavaMoving.blockID, 0, 7, 1, 5, var3);
 		this.placeBlockAtCurrentPosition(var1, Block.lavaMoving.blockID, 0, 8, 1, 5, var3);
 		this.placeBlockAtCurrentPosition(var1, Block.fenceIron.blockID, 0, 9, 2, 5, var3);
--- net/minecraft/src/EntityXPOrb.java
+++ net/minecraft/src/EntityXPOrb.java
@@ -124,8 +124,9 @@
 	public void onCollideWithPlayer(EntityPlayer var1) {
 		if(!this.worldObj.isRemote) {
 			if(this.field_35158_c == 0 && var1.xpCooldown == 0) {
-				var1.xpCooldown = 2;
-				this.worldObj.playSoundAtEntity(this, "random.orb", 0.1F, 0.5F * ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.8F));
+				var1.xpCooldown = 1;
+//				this.worldObj.playSoundAtEntity(this, "random.orb", 0.1F, 0.5F * ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.8F));
+				this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, 0.5F * ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F));
 				var1.onItemPickup(this, 1);
 				var1.addExperience(this.xpValue);
 				this.setDead();
--- net/minecraft/src/WorldInfo.java
+++ net/minecraft/src/WorldInfo.java
@@ -21,7 +21,8 @@
 	private int thunderTime;
 	private int gameType;
 	private boolean mapFeaturesEnabled;
-	private boolean hardcore = false;
+	private boolean hardcore;
+	private boolean classic;
 
 	public WorldInfo(NBTTagCompound var1) {
 		this.randomSeed = var1.getLong("RandomSeed");
@@ -30,7 +31,8 @@
 			this.terrainType = WorldType.parseWorldType(var2);
 			if(this.terrainType == null) {
 				this.terrainType = WorldType.DEFAULT;
-			} else if(this.terrainType.func_48453_c()) {
+			}
+			if (this.terrainType.func_48453_c()) {
 				int var3 = 0;
 				if(var1.hasKey("generatorVersion")) {
 					var3 = var1.getInteger("generatorVersion");
@@ -38,6 +40,7 @@
 
 				this.terrainType = this.terrainType.func_48451_a(var3);
 			}
+			this.terrainType = this.terrainType.readData(var1.getCompoundTag("generatorSettings"));
 		}
 
 		this.gameType = var1.getInteger("GameType");
@@ -60,6 +63,7 @@
 		this.thunderTime = var1.getInteger("thunderTime");
 		this.thundering = var1.getBoolean("thundering");
 		this.hardcore = var1.getBoolean("hardcore");
+		this.classic = var1.getBoolean("classic");
 		if(var1.hasKey("Player")) {
 			this.playerTag = var1.getCompoundTag("Player");
 			this.dimension = this.playerTag.getInteger("Dimension");
@@ -73,6 +77,7 @@
 		this.mapFeaturesEnabled = var1.isMapFeaturesEnabled();
 		this.levelName = var2;
 		this.hardcore = var1.getHardcoreEnabled();
+		this.classic = var1.getClassicEnabled();
 		this.terrainType = var1.getTerrainType();
 	}
 
@@ -96,6 +101,7 @@
 		this.thunderTime = var1.thunderTime;
 		this.thundering = var1.thundering;
 		this.hardcore = var1.hardcore;
+		this.classic = var1.classic;
 	}
 
 	public NBTTagCompound getNBTTagCompound() {
@@ -140,10 +146,14 @@
 		var1.setInteger("thunderTime", this.thunderTime);
 		var1.setBoolean("thundering", this.thundering);
 		var1.setBoolean("hardcore", this.hardcore);
+		var1.setBoolean("classic", this.classic);
 		if(var2 != null) {
 			var1.setCompoundTag("Player", var2);
 		}
 
+		NBTTagCompound generatorSettings = new NBTTagCompound();
+		this.terrainType.writeData(generatorSettings);
+		var1.setCompoundTag("generatorSettings", generatorSettings);
 	}
 
 	public long getSeed() {
@@ -238,6 +248,10 @@
 
 	public boolean isHardcoreModeEnabled() {
 		return this.hardcore;
+	}
+
+	public boolean isClassicModeEnabled() {
+		return this.classic;
 	}
 
 	public WorldType getTerrainType() {
--- /dev/null
+++ net/minecraft/src/BiomeGenRainforest.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenRainforest extends BiomeGenBase {
+	public BiomeGenRainforest(int var1) {
+		super(var1);
+		this.biomeDecorator.treesPerChunk = 10;
+		this.biomeDecorator.grassPerChunk = 10;
+		this.biomeDecorator.flowersPerChunk = 4;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(5) == 0 ? this.worldGenForest : var1.nextInt(3) == 0 ? this.worldGenBigTree : this.worldGenTrees;
+	}
+
+	public WorldGenerator func_48440_b(Random var1) {
+		return var1.nextInt(4) == 0 ? new WorldGenTallGrass(Block.tallGrass.blockID, 2) : new WorldGenTallGrass(Block.tallGrass.blockID, 1);
+	}
+}
--- net/minecraft/src/GenLayerIsland.java
+++ net/minecraft/src/GenLayerIsland.java
@@ -1,8 +1,11 @@
 package net.minecraft.src;
 
 public class GenLayerIsland extends GenLayer {
-	public GenLayerIsland(long var1) {
+	private final int chance;
+
+	public GenLayerIsland(long var1, int var2) {
 		super(var1);
+		this.chance = var2;
 	}
 
 	public int[] getInts(int var1, int var2, int var3, int var4) {
@@ -11,7 +14,7 @@
 		for(int var6 = 0; var6 < var4; ++var6) {
 			for(int var7 = 0; var7 < var3; ++var7) {
 				this.initChunkSeed((long)(var1 + var7), (long)(var2 + var6));
-				var5[var7 + var6 * var3] = this.nextInt(10) == 0 ? 1 : 0;
+				var5[var7 + var6 * var3] = this.nextInt(this.chance) == 0 ? 1 : 0;
 			}
 		}
 
--- net/minecraft/src/EntitySkeleton.java
+++ net/minecraft/src/EntitySkeleton.java
@@ -23,7 +23,7 @@
 	}
 
 	public int getMaxHealth() {
-		return 20;
+		return this.worldObj != null && this.worldObj.getWorldInfo().isHardcoreModeEnabled() ? 30 : 20;
 	}
 
 	protected String getLivingSound() {
@@ -89,7 +89,7 @@
 	protected void dropRareDrop(int var1) {
 		if(var1 > 0) {
 			ItemStack var2 = new ItemStack(Item.bow);
-			EnchantmentHelper.func_48622_a(this.rand, var2, 5);
+			EnchantmentHelper.func_48622_a(this.rand, var2, 5, this.worldObj.getWorldInfo().isHardcoreModeEnabled());
 			this.entityDropItem(var2, 0.0F);
 		} else {
 			this.dropItem(Item.bow.shiftedIndex, 1);
--- /dev/null
+++ net/minecraft/src/BiomeGenCrags.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenCrags extends BiomeGenBase {
+	protected BiomeGenCrags(int var1) {
+		super(var1);
+		this.spawnableCreatureList.clear();
+		this.biomeDecorator.cragsPerChunk = 4;
+		this.setColor(64);
+	}
+
+	public void decorate(World var1, Random var2, int var3, int var4) {
+		this.biomeDecorator.cragsPerChunk = 2 + var2.nextInt(7);
+		super.decorate(var1, var2, var3, var4);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeGenBirchForest.java
@@ -1,0 +1,27 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenBirchForest extends BiomeGenBase {
+	private WorldGenForest worldGenTallForest = new WorldGenForest(false, true);
+
+	public BiomeGenBirchForest(int var1) {
+		super(var1);
+		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 5, 4, 4));
+		this.biomeDecorator.treesPerChunk = 10;
+		this.biomeDecorator.grassPerChunk = 2;
+		this.biomeDecorator.flowersPerChunk = 4;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return this.worldGenTallForest;
+	}
+
+	public float getMinHeight(int x, int z) {
+		return super.getMinHeight(x, z) + (getHeightNoiseValue(x, z) > 0.0D ? 0.4F : 0.0F);
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return super.getMaxHeight(x, z) + (getHeightNoiseValue(x, z) > 0.0D ? 0.1F : 0.0F);
+	}
+}
--- net/minecraft/src/WorldGenMinable.java
+++ net/minecraft/src/WorldGenMinable.java
@@ -12,21 +12,26 @@
 	}
 
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		float numberOfBlocks = (float)this.numberOfBlocks;
+		if (var1.getWorldInfo().isHardcoreModeEnabled()) {
+			numberOfBlocks *= 0.75F;
+		}
+
 		float var6 = var2.nextFloat() * (float)Math.PI;
-		double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * numberOfBlocks / 8.0F);
+		double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * numberOfBlocks / 8.0F);
+		double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * numberOfBlocks / 8.0F);
+		double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * numberOfBlocks / 8.0F);
 		double var15 = (double)(var4 + var2.nextInt(3) - 2);
 		double var17 = (double)(var4 + var2.nextInt(3) - 2);
 
 		for(int var19 = 0; var19 <= this.numberOfBlocks; ++var19) {
-			double var20 = var7 + (var9 - var7) * (double)var19 / (double)this.numberOfBlocks;
-			double var22 = var15 + (var17 - var15) * (double)var19 / (double)this.numberOfBlocks;
-			double var24 = var11 + (var13 - var11) * (double)var19 / (double)this.numberOfBlocks;
-			double var26 = var2.nextDouble() * (double)this.numberOfBlocks / 16.0D;
-			double var28 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
-			double var30 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
+			double var20 = var7 + (var9 - var7) * (double)var19 / (double)numberOfBlocks;
+			double var22 = var15 + (var17 - var15) * (double)var19 / (double)numberOfBlocks;
+			double var24 = var11 + (var13 - var11) * (double)var19 / (double)numberOfBlocks;
+			double var26 = var2.nextDouble() * (double)numberOfBlocks / 16.0D;
+			double var28 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / numberOfBlocks) + 1.0F) * var26 + 1.0D;
+			double var30 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / numberOfBlocks) + 1.0F) * var26 + 1.0D;
 			int var32 = MathHelper.floor_double(var20 - var28 / 2.0D);
 			int var33 = MathHelper.floor_double(var22 - var30 / 2.0D);
 			int var34 = MathHelper.floor_double(var24 - var28 / 2.0D);
--- /dev/null
+++ net/minecraft/src/GenLayerBiomeTemperature.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class GenLayerBiomeTemperature extends GenLayer {
+    public GenLayerBiomeTemperature(GenLayer genLayer) {
+        super(0L);
+        this.parent = genLayer;
+    }
+
+    public int[] getInts(int n, int n2, int n3, int n4) {
+        int[] nArray = this.parent.getInts(n, n2, n3, n4);
+        int[] nArray2 = IntCache.getIntCache(n3 * n4);
+        for (int i = 0; i < n3 * n4; ++i) {
+            nArray2[i] = BiomeGenBase.biomeList[nArray[i]].getIntTemperature();
+        }
+        return nArray2;
+    }
+}
--- net/minecraft/src/BiomeGenOcean.java
+++ net/minecraft/src/BiomeGenOcean.java
@@ -4,5 +4,6 @@
 	public BiomeGenOcean(int var1) {
 		super(var1);
 		this.spawnableCreatureList.clear();
+		this.setColor(112);
 	}
 }
--- /dev/null
+++ net/minecraft/src/GenLayerSmoothZoom.java
@@ -1,0 +1,51 @@
+package net.minecraft.src;
+
+public class GenLayerSmoothZoom extends GenLayer {
+    public GenLayerSmoothZoom(long l, GenLayer genLayer) {
+        super(l);
+        this.parent = genLayer;
+    }
+
+    public int[] getInts(int n, int n2, int n3, int n4) {
+        int n5;
+        int n6 = n >> 1;
+        int n7 = n2 >> 1;
+        int n8 = (n3 >> 1) + 3;
+        int n9 = (n4 >> 1) + 3;
+        int[] nArray = this.parent.getInts(n6, n7, n8, n9);
+        int[] nArray2 = IntCache.getIntCache(n8 * 2 * (n9 * 2));
+        int n10 = n8 << 1;
+        for (int i = 0; i < n9 - 1; ++i) {
+            n5 = i << 1;
+            int n11 = n5 * n10;
+            int n12 = nArray[0 + (i + 0) * n8];
+            int n13 = nArray[0 + (i + 1) * n8];
+            for (int j = 0; j < n8 - 1; ++j) {
+                this.initChunkSeed(j + n6 << 1, i + n7 << 1);
+                int n14 = nArray[j + 1 + (i + 0) * n8];
+                int n15 = nArray[j + 1 + (i + 1) * n8];
+                nArray2[n11] = n12;
+                nArray2[n11++ + n10] = n12 + (n13 - n12) * this.nextInt(256) / 256;
+                nArray2[n11] = n12 + (n14 - n12) * this.nextInt(256) / 256;
+                int n16 = n12 + (n14 - n12) * this.nextInt(256) / 256;
+                int n17 = n13 + (n15 - n13) * this.nextInt(256) / 256;
+                nArray2[n11++ + n10] = n16 + (n17 - n16) * this.nextInt(256) / 256;
+                n12 = n14;
+                n13 = n15;
+            }
+        }
+        int[] nArray3 = IntCache.getIntCache(n3 * n4);
+        for (n5 = 0; n5 < n4; ++n5) {
+            System.arraycopy(nArray2, (n5 + (n2 & 1)) * (n8 << 1) + (n & 1), nArray3, n5 * n3, n3);
+        }
+        return nArray3;
+    }
+
+    public static GenLayer multiZoom(long l, GenLayer genLayer, int n) {
+        GenLayer genLayer2 = genLayer;
+        for (int i = 0; i < n; ++i) {
+            genLayer2 = new GenLayerSmoothZoom(l + (long)i, genLayer2);
+        }
+        return genLayer2;
+    }
+}
--- net/minecraft/src/ItemSlab.java
+++ net/minecraft/src/ItemSlab.java
@@ -1,8 +1,19 @@
 package net.minecraft.src;
 
 public class ItemSlab extends ItemBlock {
-	public ItemSlab(int var1) {
-		super(var1);
+	private final Block stairSingle;
+	private final Block stairDouble;
+	private final String[] blockStepTypes;
+
+	public ItemSlab(Block stairSingle, Block stairDouble) {
+		this(stairSingle, stairDouble, null);
+	}
+
+	public ItemSlab(Block stairSingle, Block stairDouble, String[] blockStepTypes) {
+		super(stairSingle.blockID - 256);
+		this.stairSingle = stairSingle;
+		this.stairDouble = stairDouble;
+		this.blockStepTypes = blockStepTypes;
 		this.setMaxDamage(0);
 		this.setHasSubtypes(true);
 	}
@@ -12,12 +23,16 @@
 	}
 
 	public String getItemNameIS(ItemStack var1) {
+		if (this.blockStepTypes == null) {
+			return super.getItemName();
+		}
+
 		int var2 = var1.getItemDamage();
-		if(var2 < 0 || var2 >= BlockStep.blockStepTypes.length) {
+		if(var2 < 0 || var2 >= this.blockStepTypes.length) {
 			var2 = 0;
 		}
 
-		return super.getItemName() + "." + BlockStep.blockStepTypes[var2];
+		return super.getItemName() + "." + this.blockStepTypes[var2];
 	}
 
 	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
@@ -30,20 +45,20 @@
 			int var9 = var3.getBlockMetadata(var4, var5, var6);
 			int var10 = var9 & 7;
 			boolean var11 = (var9 & 8) != 0;
-			if((var7 == 1 && !var11 || var7 == 0 && var11) && var8 == Block.stairSingle.blockID && var10 == var1.getItemDamage()) {
-				if(var3.checkIfAABBIsClear(Block.stairDouble.getCollisionBoundingBoxFromPool(var3, var4, var5, var6)) && var3.setBlockAndMetadataWithNotify(var4, var5, var6, Block.stairDouble.blockID, var10)) {
-					var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), Block.stairDouble.stepSound.getStepSound(), (Block.stairDouble.stepSound.getVolume() + 1.0F) / 2.0F, Block.stairDouble.stepSound.getPitch() * 0.8F);
+			if((var7 == 1 && !var11 || var7 == 0 && var11) && var8 == this.shiftedIndex && var10 == var1.getItemDamage()) {
+				if(var3.checkIfAABBIsClear(this.stairDouble.getCollisionBoundingBoxFromPool(var3, var4, var5, var6)) && var3.setBlockAndMetadataWithNotify(var4, var5, var6, this.stairDouble.blockID, var10)) {
+					var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), this.stairDouble.stepSound.getStepSound(), (this.stairDouble.stepSound.getVolume() + 1.0F) / 2.0F, this.stairDouble.stepSound.getPitch() * 0.8F);
 					--var1.stackSize;
 				}
 
 				return true;
 			} else {
-				return func_50020_b(var1, var2, var3, var4, var5, var6, var7) ? true : super.onItemUse(var1, var2, var3, var4, var5, var6, var7);
+				return this.func_50020_b(var1, var2, var3, var4, var5, var6, var7) ? true : super.onItemUse(var1, var2, var3, var4, var5, var6, var7);
 			}
 		}
 	}
 
-	private static boolean func_50020_b(ItemStack var0, EntityPlayer var1, World var2, int var3, int var4, int var5, int var6) {
+	private boolean func_50020_b(ItemStack var0, EntityPlayer var1, World var2, int var3, int var4, int var5, int var6) {
 		if(var6 == 0) {
 			--var4;
 		}
@@ -71,9 +86,9 @@
 		int var7 = var2.getBlockId(var3, var4, var5);
 		int var8 = var2.getBlockMetadata(var3, var4, var5);
 		int var9 = var8 & 7;
-		if(var7 == Block.stairSingle.blockID && var9 == var0.getItemDamage()) {
-			if(var2.checkIfAABBIsClear(Block.stairDouble.getCollisionBoundingBoxFromPool(var2, var3, var4, var5)) && var2.setBlockAndMetadataWithNotify(var3, var4, var5, Block.stairDouble.blockID, var9)) {
-				var2.playSoundEffect((double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), Block.stairDouble.stepSound.getStepSound(), (Block.stairDouble.stepSound.getVolume() + 1.0F) / 2.0F, Block.stairDouble.stepSound.getPitch() * 0.8F);
+		if(var7 == this.stairSingle.blockID && var9 == var0.getItemDamage()) {
+			if(var2.checkIfAABBIsClear(this.stairDouble.getCollisionBoundingBoxFromPool(var2, var3, var4, var5)) && var2.setBlockAndMetadataWithNotify(var3, var4, var5, this.stairDouble.blockID, var9)) {
+				var2.playSoundEffect((double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), this.stairDouble.stepSound.getStepSound(), (this.stairDouble.stepSound.getVolume() + 1.0F) / 2.0F, this.stairDouble.stepSound.getPitch() * 0.8F);
 				--var0.stackSize;
 			}
 
--- net/minecraft/src/MapGenCavesHell.java
+++ net/minecraft/src/MapGenCavesHell.java
@@ -8,6 +8,7 @@
 	}
 
 	protected void generateCaveNode(int var1, int var2, byte[] var3, double var4, double var6, double var8, float var10, float var11, float var12, int var13, int var14, double var15) {
+		int height = var3.length / 256;
 		double var17 = (double)(var1 * 16 + 8);
 		double var19 = (double)(var2 * 16 + 8);
 		float var21 = 0.0F;
@@ -99,7 +100,7 @@
 					for(var40 = var52; !var55 && var40 < var34; ++var40) {
 						for(int var41 = var54; !var55 && var41 < var38; ++var41) {
 							for(int var42 = var36 + 1; !var55 && var42 >= var53 - 1; --var42) {
-								var43 = (var40 * 16 + var41) * 128 + var42;
+								var43 = (var40 * 16 + var41) * height + var42;
 								if(var42 >= 0 && var42 < 128) {
 									if(var3[var43] == Block.lavaMoving.blockID || var3[var43] == Block.lavaStill.blockID) {
 										var55 = true;
@@ -119,7 +120,7 @@
 
 							for(var43 = var54; var43 < var38; ++var43) {
 								double var44 = ((double)(var43 + var2 * 16) + 0.5D - var8) / var27;
-								int var46 = (var40 * 16 + var43) * 128 + var36;
+								int var46 = (var40 * 16 + var43) * height + var36;
 
 								for(int var47 = var36 - 1; var47 >= var53; --var47) {
 									double var48 = ((double)var47 + 0.5D - var6) / var29;
--- net/minecraft/src/PlayerInstance.java
+++ net/minecraft/src/PlayerInstance.java
@@ -8,15 +8,15 @@
 	private int chunkX;
 	private int chunkZ;
 	private ChunkCoordIntPair currentChunk;
-	private short[] blocksToUpdate;
+	private int[] blocksToUpdate;
 	private int numBlocksToUpdate;
-	private int field_48475_h;
+	private long field_48475_h;
 	final PlayerManager playerManager;
 
 	public PlayerInstance(PlayerManager var1, int var2, int var3) {
 		this.playerManager = var1;
 		this.players = new ArrayList();
-		this.blocksToUpdate = new short[64];
+		this.blocksToUpdate = new int[64];
 		this.numBlocksToUpdate = 0;
 		this.chunkX = var2;
 		this.chunkZ = var3;
@@ -61,9 +61,9 @@
 			PlayerManager.getPlayerInstancesToUpdate(this.playerManager).add(this);
 		}
 
-		this.field_48475_h |= 1 << (var2 >> 4);
+		this.field_48475_h |= 1L << (var2 >> 4);
 		if(this.numBlocksToUpdate < 64) {
-			short var4 = (short)(var1 << 12 | var3 << 8 | var2);
+			short var4 = (short)(var1 << 16 | var3 << 12 | var2);
 
 			for(int var5 = 0; var5 < this.numBlocksToUpdate; ++var5) {
 				if(this.blocksToUpdate[var5] == var4) {
@@ -93,9 +93,9 @@
 			int var3;
 			int var4;
 			if(this.numBlocksToUpdate == 1) {
-				var2 = this.chunkX * 16 + (this.blocksToUpdate[0] >> 12 & 15);
-				var3 = this.blocksToUpdate[0] & 255;
-				var4 = this.chunkZ * 16 + (this.blocksToUpdate[0] >> 8 & 15);
+				var2 = this.chunkX * 16 + (this.blocksToUpdate[0] >> 16 & 15);
+				var3 = this.blocksToUpdate[0] & 1023;
+				var4 = this.chunkZ * 16 + (this.blocksToUpdate[0] >> 12 & 15);
 				this.sendPacketToPlayersInInstance(new Packet53BlockChange(var2, var3, var4, var1));
 				if(var1.func_48084_h(var2, var3, var4)) {
 					this.updateTileEntity(var1.getBlockTileEntity(var2, var3, var4));
@@ -108,7 +108,7 @@
 					this.sendPacketToPlayersInInstance(new Packet51MapChunk(var1.getChunkFromChunkCoords(this.chunkX, this.chunkZ), false, this.field_48475_h));
 
 					for(var4 = 0; var4 < 16; ++var4) {
-						if((this.field_48475_h & 1 << var4) != 0) {
+						if((this.field_48475_h & 1L << var4) != 0) {
 							var5 = var4 << 4;
 							List var6 = var1.getTileEntityList(var2, var5, var3, var2 + 16, var5 + 16, var3 + 16);
 
@@ -121,9 +121,9 @@
 					this.sendPacketToPlayersInInstance(new Packet52MultiBlockChange(this.chunkX, this.chunkZ, this.blocksToUpdate, this.numBlocksToUpdate, var1));
 
 					for(var2 = 0; var2 < this.numBlocksToUpdate; ++var2) {
-						var3 = this.chunkX * 16 + (this.blocksToUpdate[var2] >> 12 & 15);
-						var4 = this.blocksToUpdate[var2] & 255;
-						var5 = this.chunkZ * 16 + (this.blocksToUpdate[var2] >> 8 & 15);
+						var3 = this.chunkX * 16 + (this.blocksToUpdate[var2] >> 16 & 15);
+						var4 = this.blocksToUpdate[var2] & 1023;
+						var5 = this.chunkZ * 16 + (this.blocksToUpdate[var2] >> 12 & 15);
 						if(var1.func_48084_h(var3, var4, var5)) {
 							this.updateTileEntity(var1.getBlockTileEntity(var3, var4, var5));
 						}
--- net/minecraft/src/EnchantmentHelper.java
+++ net/minecraft/src/EnchantmentHelper.java
@@ -49,6 +49,17 @@
 		return var2;
 	}
 
+	private static int getTotalEnchantmentLevel(int var0, ItemStack[] var1) {
+		int var2 = 0;
+		ItemStack[] var3 = var1;
+		int var4 = var1.length;
+		for(int var5 = 0; var5 < var4; ++var5) {
+			ItemStack var6 = var3[var5];
+			var2 += getEnchantmentLevel(var0, var6);
+		}
+		return var2;
+	}
+
 	private static void applyEnchantmentModifier(IEnchantmentModifier var0, ItemStack var1) {
 		if(var1 != null) {
 			NBTTagList var2 = var1.getEnchantmentTagList();
@@ -130,24 +141,32 @@
 		return getMaxEnchantmentLevel(Enchantment.aquaAffinity.effectId, var0.armorInventory) > 0;
 	}
 
+	public static float getSpeedModifier(InventoryPlayer var0) {
+		return getTotalEnchantmentLevel(Enchantment.velocity.effectId, var0.armorInventory) * 0.08F + 1.0F;
+	}
+
+	public static float getExhaustionModifier(InventoryPlayer var0) {
+		return 1.0F - getTotalEnchantmentLevel(Enchantment.stamina.effectId, var0.armorInventory) * 0.1F;
+	}
+
 	public static int calcItemStackEnchantability(Random var0, int var1, int var2, ItemStack var3) {
-		Item var4 = var3.getItem();
-		int var5 = var4.getItemEnchantability();
-		if(var5 <= 0) {
-			return 0;
-		} else {
-			if(var2 > 30) {
-				var2 = 30;
-			}
-
-			var2 = 1 + (var2 >> 1) + var0.nextInt(var2 + 1);
-			int var6 = var0.nextInt(5) + var2;
-			return var1 == 0 ? (var6 >> 1) + 1 : (var1 == 1 ? var6 * 2 / 3 + 1 : var6);
-		}
+	    Item var4 = var3.getItem();
+	    int var5 = var4.getItemEnchantability();
+
+	    if (var5 <= 0) {
+	        return 0;
+	    } else {
+	        if (var2 > 15) {
+	            var2 = 15;
+	        }
+
+	        int var6 = var0.nextInt(8) + 1 + (var2 >> 1) + var0.nextInt(var2 + 1);
+	        return var1 == 0 ? Math.max(var6 / 3, 1) : (var1 == 1 ? var6 * 2 / 3 + 1 : Math.max(var6, var2 * 2));
+	    }
 	}
 
-	public static void func_48622_a(Random var0, ItemStack var1, int var2) {
-		List var3 = buildEnchantmentList(var0, var1, var2);
+	public static void func_48622_a(Random var0, ItemStack var1, int var2, boolean hc) {
+		List var3 = buildEnchantmentList(var0, var1, var2, hc);
 		if(var3 != null) {
 			Iterator var4 = var3.iterator();
 
@@ -159,7 +178,7 @@
 
 	}
 
-	public static List buildEnchantmentList(Random var0, ItemStack var1, int var2) {
+	public static List buildEnchantmentList(Random var0, ItemStack var1, int var2, boolean hc) {
 		Item var3 = var1.getItem();
 		int var4 = var3.getItemEnchantability();
 		if(var4 <= 0) {
@@ -168,7 +187,10 @@
 			var4 = 1 + var0.nextInt((var4 >> 1) + 1) + var0.nextInt((var4 >> 1) + 1);
 			int var5 = var4 + var2;
 			float var6 = (var0.nextFloat() + var0.nextFloat() - 1.0F) * 0.25F;
-			int var7 = (int)((float)var5 * (1.0F + var6) + 0.5F);
+			int var7 = (int)((float)var5 / 0.6F * (1.0F + var6) + 0.5F);
+			if (var7 < 1) {
+				var7 = 1;
+			}
 			ArrayList var8 = null;
 			Map var9 = mapEnchantmentData(var7, var1);
 			if(var9 != null && !var9.isEmpty()) {
@@ -177,7 +199,7 @@
 					var8 = new ArrayList();
 					var8.add(var10);
 
-					for(int var11 = var7 >> 1; var0.nextInt(50) <= var11; var11 >>= 1) {
+					for(int var11 = var7 >> (hc ? 0 : 1); var0.nextInt(hc ? 20 : 50) <= var11; var11 >>= 1) {
 						Iterator var12 = var9.keySet().iterator();
 
 						while(var12.hasNext()) {
@@ -220,7 +242,7 @@
 			Enchantment var7 = var4[var6];
 			if(var7 != null && var7.type.canEnchantItem(var2)) {
 				for(int var8 = var7.getMinLevel(); var8 <= var7.getMaxLevel(); ++var8) {
-					if(var0 >= var7.getMinEnchantability(var8) && var0 <= var7.getMaxEnchantability(var8)) {
+					if(var0 >= var7.getMinEnchantability(var8) && (var8 == var7.getMaxLevel() || var0 <= var7.getMaxEnchantability(var8))) {
 						if(var3 == null) {
 							var3 = new HashMap();
 						}
--- net/minecraft/src/AnvilChunkLoader.java
+++ net/minecraft/src/AnvilChunkLoader.java
@@ -156,7 +156,7 @@
 			ExtendedBlockStorage var9 = var6[var8];
 			if(var9 != null && var9.func_48587_f() != 0) {
 				var10 = new NBTTagCompound();
-				var10.setByte("Y", (byte)(var9.getYLocation() >> 4 & 255));
+				var10.setInteger("Y", var9.getYLocation() >> 4);
 				var10.setByteArray("Blocks", var9.func_48590_g());
 				if(var9.getBlockMSBArray() != null) {
 					var10.setByteArray("Add", var9.getBlockMSBArray().data);
@@ -170,6 +170,7 @@
 		}
 
 		var3.setTag("Sections", var5);
+		var3.setInteger("SectionCount", var6.length);
 		var3.setByteArray("Biomes", var1.getBiomeArray());
 		var1.hasEntities = false;
 		NBTTagList var15 = new NBTTagList();
@@ -229,12 +230,23 @@
 		var5.heightMap = var2.func_48445_l("HeightMap");
 		var5.isTerrainPopulated = var2.getBoolean("TerrainPopulated");
 		NBTTagList var6 = var2.getTagList("Sections");
-		byte var7 = 16;
+		int var7 = var2.getInteger("SectionCount");
+		if (var7 <= 0) {
+			var7 = 16;
+		}
 		ExtendedBlockStorage[] var8 = new ExtendedBlockStorage[var7];
 
 		for(int var9 = 0; var9 < var6.tagCount(); ++var9) {
 			NBTTagCompound var10 = (NBTTagCompound)var6.tagAt(var9);
-			byte var11 = var10.getByte("Y");
+			int var11;
+			NBTBase var11t = var10.getTag("Y");
+			if (var11t instanceof NBTTagInt) {
+				var11 = ((NBTTagInt)var11t).data;
+			} else if (var11t instanceof NBTTagByte) {
+				var11 = ((NBTTagByte)var11t).data;
+			} else {
+				var11 = var9 << 4;
+			}
 			ExtendedBlockStorage var12 = new ExtendedBlockStorage(var11 << 4);
 			var12.setBlockLSBArray(var10.getByteArray("Blocks"));
 			if(var10.hasKey("Add")) {
--- net/minecraft/src/FoodStats.java
+++ net/minecraft/src/FoodStats.java
@@ -2,14 +2,14 @@
 
 public class FoodStats {
 	private int foodLevel = 20;
-	private float foodSaturationLevel = 5.0F;
+	private float foodSaturationLevel = 0.0F;
 	private float foodExhaustionLevel;
 	private int foodTimer = 0;
 	private int prevFoodLevel = 20;
 
 	public void addStats(int var1, float var2) {
 		this.foodLevel = Math.min(var1 + this.foodLevel, 20);
-		this.foodSaturationLevel = Math.min(this.foodSaturationLevel + (float)var1 * var2 * 2.0F, (float)this.foodLevel);
+		this.foodSaturationLevel = 0.0F;
 	}
 
 	public void addStats(ItemFood var1) {
@@ -27,26 +27,6 @@
 				this.foodLevel = Math.max(this.foodLevel - 1, 0);
 			}
 		}
-
-		if(this.foodLevel >= 18 && var1.shouldHeal()) {
-			++this.foodTimer;
-			if(this.foodTimer >= 80) {
-				var1.heal(1);
-				this.foodTimer = 0;
-			}
-		} else if(this.foodLevel <= 0) {
-			++this.foodTimer;
-			if(this.foodTimer >= 80) {
-				if(var1.getHealth() > 10 || var2 >= 3 || var1.getHealth() > 1 && var2 >= 2) {
-					var1.attackEntityFrom(DamageSource.starve, 1);
-				}
-
-				this.foodTimer = 0;
-			}
-		} else {
-			this.foodTimer = 0;
-		}
-
 	}
 
 	public void readNBT(NBTTagCompound var1) {
--- net/minecraft/src/ComponentVillageHouse4_Garden.java
+++ net/minecraft/src/ComponentVillageHouse4_Garden.java
@@ -32,7 +32,7 @@
 			this.boundingBox.offset(0, this.averageGroundLevel - this.boundingBox.maxY + 6 - 1, 0);
 		}
 
-		this.fillWithBlocks(var1, var3, 0, 0, 0, 4, 0, 4, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 0, 0, 4, 0, 4, false, var2, StructureVillagePieces.villageStones);
 		this.fillWithBlocks(var1, var3, 0, 4, 0, 4, 4, 4, Block.wood.blockID, Block.wood.blockID, false);
 		this.fillWithBlocks(var1, var3, 1, 4, 1, 3, 4, 3, Block.planks.blockID, Block.planks.blockID, false);
 		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 0, 1, 0, var3);
--- net/minecraft/src/BiomeDecorator.java
+++ net/minecraft/src/BiomeDecorator.java
@@ -27,6 +27,7 @@
 	protected WorldGenerator reedGen = new WorldGenReed();
 	protected WorldGenerator cactusGen = new WorldGenCactus();
 	protected WorldGenerator waterlilyGen = new WorldGenWaterlily();
+	protected WorldGenerator cragGen = new WorldGenCrags();
 	protected int waterlilyPerChunk = 0;
 	protected int treesPerChunk = 0;
 	protected int flowersPerChunk = 2;
@@ -39,6 +40,7 @@
 	protected int sandPerChunk2 = 3;
 	protected int clayPerChunk = 1;
 	protected int bigMushroomsPerChunk = 0;
+	protected int cragsPerChunk = 0;
 	public boolean generateLakes = true;
 
 	public BiomeDecorator(BiomeGenBase var1) {
@@ -65,12 +67,24 @@
 		int var1;
 		int var2;
 		int var3;
+		for(var1 = 0; var1 < this.cragsPerChunk; ++var1) {
+			var2 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
+			var3 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			this.cragGen.generate(this.currentWorld, this.randomGenerator, var2, 0, var3);
+		}
+
 		for(var1 = 0; var1 < this.sandPerChunk2; ++var1) {
 			var2 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
 			var3 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
 			this.sandGen.generate(this.currentWorld, this.randomGenerator, var2, this.currentWorld.getTopSolidOrLiquidBlock(var2, var3), var3);
 		}
 
+		for(var1 = 0; var1 < this.sandPerChunk; ++var1) {
+			var2 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
+			var3 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			this.gravelAsSandGen.generate(this.currentWorld, this.randomGenerator, var2, this.currentWorld.getTopSolidOrLiquidBlock(var2, var3), var3);
+		}
+
 		for(var1 = 0; var1 < this.clayPerChunk; ++var1) {
 			var2 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
 			var3 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
@@ -97,38 +111,38 @@
 			var5.generate(this.currentWorld, this.randomGenerator, var3, this.currentWorld.getHeightValue(var3, var4), var4);
 		}
 
-		for(var2 = 0; var2 < this.bigMushroomsPerChunk; ++var2) {
+		for(var2 = 0; var2 < this.bigMushroomsPerChunk * 4; ++var2) {
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
 			var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-			this.bigMushroomGen.generate(this.currentWorld, this.randomGenerator, var3, this.currentWorld.getHeightValue(var3, var4), var4);
+			this.bigMushroomGen.generate(this.currentWorld, this.randomGenerator, var3, this.randomGenerator.nextInt(256), var4);
 		}
 
 		int var7;
 		for(var2 = 0; var2 < this.flowersPerChunk; ++var2) {
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var4 = this.randomGenerator.nextInt(128);
 			var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var4 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var7) + 32);
 			this.plantYellowGen.generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 			if(this.randomGenerator.nextInt(4) == 0) {
 				var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-				var4 = this.randomGenerator.nextInt(128);
 				var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+				var4 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var7) + 32);
 				this.plantRedGen.generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 			}
 		}
 
 		for(var2 = 0; var2 < this.grassPerChunk; ++var2) {
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var4 = this.randomGenerator.nextInt(128);
 			var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var4 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var7) * 2);
 			WorldGenerator var6 = this.biome.func_48440_b(this.randomGenerator);
 			var6.generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 		}
 
 		for(var2 = 0; var2 < this.deadBushPerChunk; ++var2) {
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var4 = this.randomGenerator.nextInt(128);
 			var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var4 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var7) * 2);
 			(new WorldGenDeadBush(Block.deadBush.blockID)).generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 		}
 
@@ -136,7 +150,7 @@
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
 			var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
 
-			for(var7 = this.randomGenerator.nextInt(128); var7 > 0 && this.currentWorld.getBlockId(var3, var7 - 1, var4) == 0; --var7) {
+			for(var7 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var4) * 2); var7 > 0 && this.currentWorld.getBlockId(var3, var7 - 1, var4) == 0; --var7) {
 			}
 
 			this.waterlilyGen.generate(this.currentWorld, this.randomGenerator, var3, var7, var4);
@@ -153,64 +167,64 @@
 			if(this.randomGenerator.nextInt(8) == 0) {
 				var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
 				var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-				var7 = this.randomGenerator.nextInt(128);
+				var7 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var4) * 2);
 				this.mushroomRedGen.generate(this.currentWorld, this.randomGenerator, var3, var7, var4);
 			}
 		}
 
 		if(this.randomGenerator.nextInt(4) == 0) {
 			var2 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var3 = this.randomGenerator.nextInt(128);
 			var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var3 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var2, var4) * 2);
 			this.mushroomBrownGen.generate(this.currentWorld, this.randomGenerator, var2, var3, var4);
 		}
 
 		if(this.randomGenerator.nextInt(8) == 0) {
 			var2 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var3 = this.randomGenerator.nextInt(128);
 			var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var3 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var2, var4) * 2);
 			this.mushroomRedGen.generate(this.currentWorld, this.randomGenerator, var2, var3, var4);
 		}
 
 		for(var2 = 0; var2 < this.reedsPerChunk; ++var2) {
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
 			var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-			var7 = this.randomGenerator.nextInt(128);
+			var7 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var4) * 2);
 			this.reedGen.generate(this.currentWorld, this.randomGenerator, var3, var7, var4);
 		}
 
 		for(var2 = 0; var2 < 10; ++var2) {
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var4 = this.randomGenerator.nextInt(128);
 			var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var4 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var7) * 2);
 			this.reedGen.generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 		}
 
 		if(this.randomGenerator.nextInt(32) == 0) {
 			var2 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var3 = this.randomGenerator.nextInt(128);
 			var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var3 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var2, var4) * 2);
 			(new WorldGenPumpkin()).generate(this.currentWorld, this.randomGenerator, var2, var3, var4);
 		}
 
 		for(var2 = 0; var2 < this.cactiPerChunk; ++var2) {
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var4 = this.randomGenerator.nextInt(128);
 			var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var4 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var7) * 2);
 			this.cactusGen.generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 		}
 
 		if(this.generateLakes) {
 			for(var2 = 0; var2 < 50; ++var2) {
 				var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-				var4 = this.randomGenerator.nextInt(this.randomGenerator.nextInt(120) + 8);
+				var4 = this.randomGenerator.nextInt(this.randomGenerator.nextInt(248) + 8);
 				var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
 				(new WorldGenLiquids(Block.waterMoving.blockID)).generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 			}
 
 			for(var2 = 0; var2 < 20; ++var2) {
 				var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-				var4 = this.randomGenerator.nextInt(this.randomGenerator.nextInt(this.randomGenerator.nextInt(112) + 8) + 8);
+				var4 = this.randomGenerator.nextInt(this.randomGenerator.nextInt(this.randomGenerator.nextInt(240   ) + 8) + 8);
 				var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
 				(new WorldGenLiquids(Block.lavaMoving.blockID)).generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 			}
--- net/minecraft/src/Block.java
+++ net/minecraft/src/Block.java
@@ -13,6 +13,7 @@
 	public static final StepSound soundGlassFootstep = new StepSoundStone("stone", 1.0F, 1.0F);
 	public static final StepSound soundClothFootstep = new StepSound("cloth", 1.0F, 1.0F);
 	public static final StepSound soundSandFootstep = new StepSoundSand("sand", 1.0F, 1.0F);
+	public static final StepSound soundMudFootstep = new StepSound("gravel", 1.0F, 0.5F);
 	public static final Block[] blocksList = new Block[4096];
 	public static final boolean[] opaqueCubeLookup = new boolean[4096];
 	public static final int[] lightOpacity = new int[4096];
@@ -20,8 +21,8 @@
 	public static final int[] lightValue = new int[4096];
 	public static final boolean[] requiresSelfNotify = new boolean[4096];
 	public static boolean[] useNeighborBrightness = new boolean[4096];
-	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stone");
-	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("grass");
+	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stone").setCreativePickDirect();
+	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("grass").setCreativePickDirect();
 	public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep).setBlockName("dirt");
 	public static final Block cobblestone = (new Block(4, 16, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stonebrick");
 	public static final Block planks = (new BlockWood(5)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("wood").setRequiresSelfNotify();
@@ -32,15 +33,15 @@
 	public static final Block lavaMoving = (new BlockFlowing(10, Material.lava)).setHardness(0.0F).setLightValue(1.0F).setLightOpacity(255).setBlockName("lava").disableStats().setRequiresSelfNotify();
 	public static final Block lavaStill = (new BlockStationary(11, Material.lava)).setHardness(100.0F).setLightValue(1.0F).setLightOpacity(255).setBlockName("lava").disableStats().setRequiresSelfNotify();
 	public static final Block sand = (new BlockSand(12, 18)).setHardness(0.5F).setStepSound(soundSandFootstep).setBlockName("sand");
-	public static final Block gravel = (new BlockGravel(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("gravel");
-	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreGold");
-	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreIron");
-	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreCoal");
+	public static final Block gravel = (new BlockGravel(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("gravel").setCreativePickDirect();
+	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreGold").setCreativePickDirect();
+	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreIron").setCreativePickDirect();
+	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreCoal").setCreativePickDirect();
 	public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep).setBlockName("log").setRequiresSelfNotify();
-	public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep).setBlockName("leaves").setRequiresSelfNotify();
+	public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep).setBlockName("leaves").setRequiresSelfNotify().setCreativePickDirect();
 	public static final Block sponge = (new BlockSponge(19)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("sponge");
 	public static final Block glass = (new BlockGlass(20, 49, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep).setBlockName("glass");
-	public static final Block oreLapis = (new BlockOre(21, 160)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreLapis");
+	public static final Block oreLapis = (new BlockOre(21, 160)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreLapis").setCreativePickDirect();
 	public static final Block blockLapis = (new Block(22, 144, Material.rock)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("blockLapis");
 	public static final Block dispenser = (new BlockDispenser(23)).setHardness(3.5F).setStepSound(soundStoneFootstep).setBlockName("dispenser").setRequiresSelfNotify();
 	public static final Block sandStone = (new BlockSandStone(24)).setStepSound(soundStoneFootstep).setHardness(0.8F).setBlockName("sandStone").setRequiresSelfNotify();
@@ -49,8 +50,8 @@
 	public static final Block railPowered = (new BlockRail(27, 179, true)).setHardness(0.7F).setStepSound(soundMetalFootstep).setBlockName("goldenRail").setRequiresSelfNotify();
 	public static final Block railDetector = (new BlockDetectorRail(28, 195)).setHardness(0.7F).setStepSound(soundMetalFootstep).setBlockName("detectorRail").setRequiresSelfNotify();
 	public static final Block pistonStickyBase = (new BlockPistonBase(29, 106, true)).setBlockName("pistonStickyBase").setRequiresSelfNotify();
-	public static final Block web = (new BlockWeb(30, 11)).setLightOpacity(1).setHardness(4.0F).setBlockName("web");
-	public static final BlockTallGrass tallGrass = (BlockTallGrass)(new BlockTallGrass(31, 39)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("tallgrass");
+	public static final Block web = (new BlockWeb(30, 11)).setLightOpacity(1).setHardness(4.0F).setBlockName("web").setCreativePickDirect();
+public static final BlockTallGrass tallGrass = (BlockTallGrass)(new BlockTallGrass(31, 39)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("tallgrass").setCreativePickDirect();
 	public static final BlockDeadBush deadBush = (BlockDeadBush)(new BlockDeadBush(32, 55)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("deadbush");
 	public static final Block pistonBase = (new BlockPistonBase(33, 107, false)).setBlockName("pistonBase").setRequiresSelfNotify();
 	public static final BlockPistonExtension pistonExtension = (BlockPistonExtension)(new BlockPistonExtension(34, 107)).setRequiresSelfNotify();
@@ -62,8 +63,8 @@
 	public static final BlockFlower mushroomRed = (BlockFlower)(new BlockMushroom(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("mushroom");
 	public static final Block blockGold = (new BlockOreStorage(41, 23)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockGold");
 	public static final Block blockSteel = (new BlockOreStorage(42, 22)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockIron");
-	public static final Block stairDouble = (new BlockStep(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab");
-	public static final Block stairSingle = (new BlockStep(44, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab");
+	public static final Block stairDouble = (new BlockStepStone(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab");
+	public static final Block stairSingle = (new BlockStepStone(44, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab");
 	public static final Block brick = (new Block(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("brick");
 	public static final Block tnt = (new BlockTNT(46, 8)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("tnt");
 	public static final Block bookShelf = (new BlockBookshelf(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep).setBlockName("bookshelf");
@@ -75,7 +76,7 @@
 	public static final Block stairCompactPlanks = (new BlockStairs(53, planks)).setBlockName("stairsWood").setRequiresSelfNotify();
 	public static final Block chest = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep).setBlockName("chest").setRequiresSelfNotify();
 	public static final Block redstoneWire = (new BlockRedstoneWire(55, 164)).setHardness(0.0F).setStepSound(soundPowderFootstep).setBlockName("redstoneDust").disableStats().setRequiresSelfNotify();
-	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreDiamond");
+	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreDiamond").setCreativePickDirect();
 	public static final Block blockDiamond = (new BlockOreStorage(57, 24)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockDiamond");
 	public static final Block workbench = (new BlockWorkbench(58)).setHardness(2.5F).setStepSound(soundWoodFootstep).setBlockName("workbench");
 	public static final Block crops = (new BlockCrops(59, 88)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("crops").disableStats().setRequiresSelfNotify();
@@ -92,7 +93,7 @@
 	public static final Block pressurePlateStone = (new BlockPressurePlate(70, stone.blockIndexInTexture, EnumMobType.mobs, Material.rock)).setHardness(0.5F).setStepSound(soundStoneFootstep).setBlockName("pressurePlate").setRequiresSelfNotify();
 	public static final Block doorSteel = (new BlockDoor(71, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep).setBlockName("doorIron").disableStats().setRequiresSelfNotify();
 	public static final Block pressurePlatePlanks = (new BlockPressurePlate(72, planks.blockIndexInTexture, EnumMobType.everything, Material.wood)).setHardness(0.5F).setStepSound(soundWoodFootstep).setBlockName("pressurePlate").setRequiresSelfNotify();
-	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreRedstone").setRequiresSelfNotify();
+	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreRedstone").setRequiresSelfNotify().setCreativePickDirect();
 	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, true)).setLightValue(10.0F / 16.0F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreRedstone").setRequiresSelfNotify();
 	public static final Block torchRedstoneIdle = (new BlockRedstoneTorch(75, 115, false)).setHardness(0.0F).setStepSound(soundWoodFootstep).setBlockName("notGate").setRequiresSelfNotify();
 	public static final Block torchRedstoneActive = (new BlockRedstoneTorch(76, 99, true)).setHardness(0.0F).setLightValue(0.5F).setStepSound(soundWoodFootstep).setBlockName("notGate").setRequiresSelfNotify();
@@ -101,7 +102,7 @@
 	public static final Block ice = (new BlockIce(79, 67)).setHardness(0.5F).setLightOpacity(3).setStepSound(soundGlassFootstep).setBlockName("ice");
 	public static final Block blockSnow = (new BlockSnowBlock(80, 66)).setHardness(0.2F).setStepSound(soundClothFootstep).setBlockName("snow");
 	public static final Block cactus = (new BlockCactus(81, 70)).setHardness(0.4F).setStepSound(soundClothFootstep).setBlockName("cactus");
-	public static final Block blockClay = (new BlockClay(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("clay");
+	public static final Block blockClay = (new BlockClay(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("clay").setCreativePickDirect();
 	public static final Block reed = (new BlockReed(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("reeds").disableStats();
 	public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("jukebox").setRequiresSelfNotify();
 	public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("fence");
@@ -118,8 +119,8 @@
 	public static final Block trapdoor = (new BlockTrapDoor(96, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setBlockName("trapdoor").disableStats().setRequiresSelfNotify();
 	public static final Block silverfish = (new BlockSilverfish(97)).setHardness(12.0F / 16.0F);
 	public static final Block stoneBrick = (new BlockStoneBrick(98)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stonebricksmooth");
-	public static final Block mushroomCapBrown = (new BlockMushroomCap(99, Material.wood, 142, 0)).setHardness(0.2F).setStepSound(soundWoodFootstep).setBlockName("mushroom").setRequiresSelfNotify();
-	public static final Block mushroomCapRed = (new BlockMushroomCap(100, Material.wood, 142, 1)).setHardness(0.2F).setStepSound(soundWoodFootstep).setBlockName("mushroom").setRequiresSelfNotify();
+	public static final Block mushroomCapBrown = (new BlockMushroomCap(99, Material.wood, 142, 0)).setHardness(0.2F).setStepSound(soundWoodFootstep).setBlockName("mushroom").setRequiresSelfNotify().setCreativePickDirect();
+	public static final Block mushroomCapRed = (new BlockMushroomCap(100, Material.wood, 142, 1)).setHardness(0.2F).setStepSound(soundWoodFootstep).setBlockName("mushroom").setRequiresSelfNotify().setCreativePickDirect();
 	public static final Block fenceIron = (new BlockPane(101, 85, 85, Material.iron, true)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("fenceIron");
 	public static final Block thinGlass = (new BlockPane(102, 49, 148, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep).setBlockName("thinGlass");
 	public static final Block melon = (new BlockMelon(103)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("melon");
@@ -129,7 +130,7 @@
 	public static final Block fenceGate = (new BlockFenceGate(107, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("fenceGate").setRequiresSelfNotify();
 	public static final Block stairsBrick = (new BlockStairs(108, brick)).setBlockName("stairsBrick").setRequiresSelfNotify();
 	public static final Block stairsStoneBrickSmooth = (new BlockStairs(109, stoneBrick)).setBlockName("stairsStoneBrickSmooth").setRequiresSelfNotify();
-	public static final BlockMycelium mycelium = (BlockMycelium)(new BlockMycelium(110)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("mycel");
+	public static final BlockMycelium mycelium = (BlockMycelium)(new BlockMycelium(110)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("mycel").setCreativePickDirect();
 	public static final Block waterlily = (new BlockLilyPad(111, 76)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("waterlily");
 	public static final Block netherBrick = (new Block(112, 224, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("netherBrick");
 	public static final Block netherFence = (new BlockFence(113, 224, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("netherFence");
@@ -144,6 +145,12 @@
 	public static final Block dragonEgg = (new BlockDragonEgg(122, 167)).setHardness(3.0F).setResistance(15.0F).setStepSound(soundStoneFootstep).setLightValue(2.0F / 16.0F).setBlockName("dragonEgg");
 	public static final Block redstoneLampIdle = (new BlockRedstoneLight(123, false)).setHardness(0.3F).setStepSound(soundGlassFootstep).setBlockName("redstoneLight");
 	public static final Block redstoneLampActive = (new BlockRedstoneLight(124, true)).setHardness(0.3F).setStepSound(soundGlassFootstep).setBlockName("redstoneLight");
+	public static final Block woodStairDouble = (new BlockStepWood(125, true)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("woodSlab");
+	public static final Block woodStairSingle = (new BlockStepWood(126, false)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("woodSlab");
+	public static final Block stairsSandstone = (new BlockStairs(127, sandStone)).setBlockName("stairsSandstone").setRequiresSelfNotify();
+	public static final Block stairsSpruce = (new BlockStairs(128, planks, 1)).setBlockName("stairsWood").setRequiresSelfNotify();
+	public static final Block stairsBirch = (new BlockStairs(129, planks, 2)).setBlockName("stairsWood").setRequiresSelfNotify();
+	public static final Block stairsJungle = (new BlockStairs(130, planks, 3)).setBlockName("stairsWood").setRequiresSelfNotify();
 	public int blockIndexInTexture;
 	public final int blockID;
 	protected float blockHardness;
@@ -162,6 +169,7 @@
 	public float blockParticleGravity;
 	public final Material blockMaterial;
 	public float slipperiness;
+	public boolean creativePickDirect;
 	private String blockName;
 
 	protected Block(int var1, Material var2) {
@@ -534,7 +542,6 @@
 
 	public void harvestBlock(World var1, EntityPlayer var2, int var3, int var4, int var5, int var6) {
 		var2.addStat(StatList.mineBlockStatArray[this.blockID], 1);
-		var2.addExhaustion(0.025F);
 		if(this.func_50008_h() && EnchantmentHelper.getSilkTouchModifier(var2.inventory)) {
 			ItemStack var8 = this.createStackedBlock(var6);
 			if(var8 != null) {
@@ -603,13 +610,19 @@
 	public void onFallenUpon(World var1, int var2, int var3, int var4, Entity var5, float var6) {
 	}
 
+	public Block setCreativePickDirect() {
+		this.creativePickDirect = true;
+		return this;
+	}
+
 	static {
 		Item.itemsList[cloth.blockID] = (new ItemCloth(cloth.blockID - 256)).setItemName("cloth");
 		Item.itemsList[wood.blockID] = (new ItemMetadata(wood.blockID - 256, wood)).setItemName("log");
 		Item.itemsList[planks.blockID] = (new ItemMetadata(planks.blockID - 256, planks)).setItemName("wood");
+		Item.itemsList[fence.blockID] = (new ItemMetadata(fence.blockID - 256, fence)).setItemName("fence");
 		Item.itemsList[stoneBrick.blockID] = (new ItemMetadata(stoneBrick.blockID - 256, stoneBrick)).setItemName("stonebricksmooth");
 		Item.itemsList[sandStone.blockID] = (new ItemMetadata(sandStone.blockID - 256, sandStone)).setItemName("sandStone");
-		Item.itemsList[stairSingle.blockID] = (new ItemSlab(stairSingle.blockID - 256)).setItemName("stoneSlab");
+		Item.itemsList[stairSingle.blockID] = (new ItemSlab(stairSingle, stairDouble, BlockStepStone.blockStepTypes)).setItemName("stoneSlab");
 		Item.itemsList[sapling.blockID] = (new ItemSapling(sapling.blockID - 256)).setItemName("sapling");
 		Item.itemsList[leaves.blockID] = (new ItemLeaves(leaves.blockID - 256)).setItemName("leaves");
 		Item.itemsList[vine.blockID] = new ItemColored(vine.blockID - 256, false);
@@ -617,6 +630,9 @@
 		Item.itemsList[waterlily.blockID] = new ItemLilyPad(waterlily.blockID - 256);
 		Item.itemsList[pistonBase.blockID] = new ItemPiston(pistonBase.blockID - 256);
 		Item.itemsList[pistonStickyBase.blockID] = new ItemPiston(pistonStickyBase.blockID - 256);
+		Item.itemsList[woodStairSingle.blockID] = (new ItemSlab(woodStairSingle, woodStairDouble)).setItemName("woodSlab");
+		Item.itemsList[mushroomCapBrown.blockID] = (new ItemMetadata(mushroomCapBrown.blockID - 256, mushroomCapBrown)).setItemName("mushroom");
+		Item.itemsList[mushroomCapRed.blockID] = (new ItemMetadata(mushroomCapRed.blockID - 256, mushroomCapRed)).setItemName("mushroom");
 
 		for(int var0 = 0; var0 < 256; ++var0) {
 			if(blocksList[var0] != null) {
--- net/minecraft/src/ComponentStronghold.java
+++ net/minecraft/src/ComponentStronghold.java
@@ -15,6 +15,10 @@
 			this.fillWithBlocks(var1, var3, var5, var6, var7, var5 + 3 - 1, var6 + 3 - 1, var7, 0, 0, false);
 			break;
 		case 2:
+			if (this.boundingBox.minY >= 60) {
+				this.fillWithBlocks(var1, var3, var5, var6, var7, var5 + 3 - 1, var6 + 3 - 1, var7, 0, 0, false);
+				return;
+			}
 			this.placeBlockAtCurrentPosition(var1, Block.stoneBrick.blockID, 0, var5, var6, var7, var3);
 			this.placeBlockAtCurrentPosition(var1, Block.stoneBrick.blockID, 0, var5, var6 + 1, var7, var3);
 			this.placeBlockAtCurrentPosition(var1, Block.stoneBrick.blockID, 0, var5, var6 + 2, var7, var3);
@@ -26,6 +30,10 @@
 			this.placeBlockAtCurrentPosition(var1, Block.doorWood.blockID, 8, var5 + 1, var6 + 1, var7, var3);
 			break;
 		case 3:
+			if (this.boundingBox.minY >= 60) {
+				this.fillWithBlocks(var1, var3, var5, var6, var7, var5 + 3 - 1, var6 + 3 - 1, var7, 0, 0, false);
+				return;
+			}
 			this.placeBlockAtCurrentPosition(var1, 0, 0, var5 + 1, var6, var7, var3);
 			this.placeBlockAtCurrentPosition(var1, 0, 0, var5 + 1, var6 + 1, var7, var3);
 			this.placeBlockAtCurrentPosition(var1, Block.fenceIron.blockID, 0, var5, var6, var7, var3);
@@ -37,6 +45,10 @@
 			this.placeBlockAtCurrentPosition(var1, Block.fenceIron.blockID, 0, var5 + 2, var6, var7, var3);
 			break;
 		case 4:
+			if (this.boundingBox.minY >= 60) {
+				this.fillWithBlocks(var1, var3, var5, var6, var7, var5 + 3 - 1, var6 + 3 - 1, var7, 0, 0, false);
+				return;
+			}
 			this.placeBlockAtCurrentPosition(var1, Block.stoneBrick.blockID, 0, var5, var6, var7, var3);
 			this.placeBlockAtCurrentPosition(var1, Block.stoneBrick.blockID, 0, var5, var6 + 1, var7, var3);
 			this.placeBlockAtCurrentPosition(var1, Block.stoneBrick.blockID, 0, var5, var6 + 2, var7, var3);
--- net/minecraft/src/EntityPlayerMP.java
+++ net/minecraft/src/EntityPlayerMP.java
@@ -177,7 +177,7 @@
 						if(var16.isTerrainPopulated) {
 							this.loadedChunks.remove(var10);
 							this.playerNetServerHandler.sendPacket(new Packet51MapChunk(var15.getChunkFromChunkCoords(var10.chunkXPos, var10.chunkZPos), true, 0));
-							List var8 = var15.getTileEntityList(var10.chunkXPos * 16, 0, var10.chunkZPos * 16, var10.chunkXPos * 16 + 16, 256, var10.chunkZPos * 16 + 16);
+							List var8 = var15.getTileEntityList(var10.chunkXPos * 16, 0, var10.chunkZPos * 16, var10.chunkXPos * 16 + 16, var16.getMaxHeight(), var10.chunkZPos * 16 + 16);
 
 							for(int var9 = 0; var9 < var8.size(); ++var9) {
 								this.getTileEntityInfo((TileEntity)var8.get(var9));
--- net/minecraft/src/ContainerEnchantment.java
+++ net/minecraft/src/ContainerEnchantment.java
@@ -57,7 +57,7 @@
 		if(var1 == this.tableInventory) {
 			ItemStack var2 = var1.getStackInSlot(0);
 			int var3;
-			if(var2 != null && var2.isItemEnchantable()) {
+			if(var2 != null && var2.isItemEnchantable() && !this.worldPointer.getWorldInfo().isClassicModeEnabled()) {
 				this.nameSeed = this.rand.nextLong();
 				if(!this.worldPointer.isRemote) {
 					var3 = 0;
@@ -97,6 +97,9 @@
 
 					for(var4 = 0; var4 < 3; ++var4) {
 						this.enchantLevels[var4] = EnchantmentHelper.calcItemStackEnchantability(this.rand, var4, var3, var2);
+						if (this.worldPointer.worldInfo.isHardcoreModeEnabled()) {
+							this.enchantLevels[var4] = Math.round(this.enchantLevels[var4] / 0.6F);
+						}
 					}
 
 					this.updateCraftingResults();
@@ -114,9 +117,9 @@
 		ItemStack var3 = this.tableInventory.getStackInSlot(0);
 		if(this.enchantLevels[var2] > 0 && var3 != null && (var1.experienceLevel >= this.enchantLevels[var2] || var1.capabilities.isCreativeMode)) {
 			if(!this.worldPointer.isRemote) {
-				List var4 = EnchantmentHelper.buildEnchantmentList(this.rand, var3, this.enchantLevels[var2]);
+				List var4 = EnchantmentHelper.buildEnchantmentList(this.rand, var3, this.enchantLevels[var2], this.worldPointer.getWorldInfo().isHardcoreModeEnabled());
 				if(var4 != null) {
-					var1.removeExperience(this.enchantLevels[var2]);
+					var1.removeExperience(Math.min(Math.max(this.enchantLevels[var2] / 4, 5), this.enchantLevels[var2]));
 					Iterator var5 = var4.iterator();
 
 					while(var5.hasNext()) {
--- net/minecraft/src/MapGenCaves.java
+++ net/minecraft/src/MapGenCaves.java
@@ -8,6 +8,7 @@
 	}
 
 	protected void generateCaveNode(long var1, int var3, int var4, byte[] var5, double var6, double var8, double var10, float var12, float var13, float var14, int var15, int var16, double var17) {
+		int height = var5.length / 256;
 		double var19 = (double)(var3 * 16 + 8);
 		double var21 = (double)(var4 * 16 + 8);
 		float var23 = 0.0F;
@@ -99,7 +100,7 @@
 					for(var42 = var55; !var58 && var42 < var36; ++var42) {
 						for(int var43 = var57; !var58 && var43 < var40; ++var43) {
 							for(int var44 = var38 + 1; !var58 && var44 >= var56 - 1; --var44) {
-								var45 = (var42 * 16 + var43) * 128 + var44;
+								var45 = (var42 * 16 + var43) * height + var44;
 								if(var44 >= 0 && var44 < 128) {
 									if(var5[var45] == Block.waterMoving.blockID || var5[var45] == Block.waterStill.blockID) {
 										var58 = true;
@@ -119,7 +120,7 @@
 
 							for(var45 = var57; var45 < var40; ++var45) {
 								double var46 = ((double)(var45 + var4 * 16) + 0.5D - var10) / var29;
-								int var48 = (var42 * 16 + var45) * 128 + var38;
+								int var48 = (var42 * 16 + var45) * height + var38;
 								boolean var49 = false;
 								if(var59 * var59 + var46 * var46 < 1.0D) {
 									for(int var50 = var38 - 1; var50 >= var56; --var50) {
--- net/minecraft/src/ComponentVillage.java
+++ net/minecraft/src/ComponentVillage.java
@@ -47,7 +47,7 @@
 		for(int var5 = this.boundingBox.minZ; var5 <= this.boundingBox.maxZ; ++var5) {
 			for(int var6 = this.boundingBox.minX; var6 <= this.boundingBox.maxX; ++var6) {
 				if(var2.isVecInside(var6, 64, var5)) {
-					var3 += Math.max(var1.getTopSolidOrLiquidBlock(var6, var5), var1.worldProvider.getAverageGroundLevel());
+					var3 += Math.max(var1.getTopSolidOrLiquidBlock(var6, var5), 63);
 					++var4;
 				}
 			}
@@ -65,6 +65,8 @@
 	}
 
 	protected void spawnVillagers(World var1, StructureBoundingBox var2, int var3, int var4, int var5, int var6) {
+		if (true) return;
+
 		if(this.villagersSpawned < var6) {
 			for(int var7 = this.villagersSpawned; var7 < var6; ++var7) {
 				int var8 = this.getXWithOffset(var3 + var7, var5);
--- net/minecraft/src/EntitySheep.java
+++ net/minecraft/src/EntitySheep.java
@@ -55,6 +55,14 @@
 			this.entityDropItem(new ItemStack(Block.cloth.blockID, 1, this.getFleeceColor()), 0.0F);
 		}
 
+		int var3 = this.rand.nextInt(3) + this.rand.nextInt(1 + var2);
+		for(int var4 = 0; var4 < var3; ++var4) {
+			if(this.isBurning()) {
+				this.dropItem(Item.muttonCooked.shiftedIndex, 1);
+			} else {
+				this.dropItem(Item.muttonRaw.shiftedIndex, 1);
+			}
+		}
 	}
 
 	protected int getDropItemId() {
--- net/minecraft/src/Packet15Place.java
+++ net/minecraft/src/Packet15Place.java
@@ -13,7 +13,7 @@
 
 	public void readPacketData(DataInputStream var1) throws IOException {
 		this.xPosition = var1.readInt();
-		this.yPosition = var1.read();
+		this.yPosition = var1.readShort();
 		this.zPosition = var1.readInt();
 		this.direction = var1.read();
 		this.itemStack = this.readItemStack(var1);
@@ -21,7 +21,7 @@
 
 	public void writePacketData(DataOutputStream var1) throws IOException {
 		var1.writeInt(this.xPosition);
-		var1.write(this.yPosition);
+		var1.writeShort(this.yPosition);
 		var1.writeInt(this.zPosition);
 		var1.write(this.direction);
 		this.writeItemStack(this.itemStack, var1);
@@ -32,6 +32,6 @@
 	}
 
 	public int getPacketSize() {
-		return 15;
+		return 16;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BiomeGenHighlands.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenHighlands extends BiomeGenBase {
+	protected BiomeGenHighlands(int var1) {
+		super(var1);
+		this.biomeDecorator.treesPerChunk = 6;
+		this.biomeDecorator.grassPerChunk = 2;
+		this.biomeDecorator.bigMushroomsPerChunk = 3;
+	}
+
+	protected BiomeGenBase setEnableSnow() {
+		this.biomeDecorator.grassPerChunk = 0;
+		this.biomeDecorator.flowersPerChunk = 0;
+		this.biomeDecorator.mushroomsPerChunk = 0;
+		return super.setEnableSnow();
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(2) == 0
+				? (var1.nextInt(3) == 0 ? new WorldGenTaiga1() : new WorldGenTaiga2(false))
+				: (var1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
+	}
+}
--- net/minecraft/src/ComponentVillageHouse3.java
+++ net/minecraft/src/ComponentVillageHouse3.java
@@ -34,12 +34,12 @@
 		this.fillWithBlocks(var1, var3, 2, 1, 6, 8, 4, 10, 0, 0, false);
 		this.fillWithBlocks(var1, var3, 2, 0, 5, 8, 0, 10, Block.planks.blockID, Block.planks.blockID, false);
 		this.fillWithBlocks(var1, var3, 1, 0, 1, 7, 0, 4, Block.planks.blockID, Block.planks.blockID, false);
-		this.fillWithBlocks(var1, var3, 0, 0, 0, 0, 3, 5, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 8, 0, 0, 8, 3, 10, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 1, 0, 0, 7, 2, 0, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 1, 0, 5, 2, 1, 5, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 2, 0, 6, 2, 3, 10, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 3, 0, 10, 7, 3, 10, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 0, 0, 0, 3, 5, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 8, 0, 0, 8, 3, 10, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 1, 0, 0, 7, 2, 0, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 1, 0, 5, 2, 1, 5, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 2, 0, 6, 2, 3, 10, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 3, 0, 10, 7, 3, 10, false, var2, StructureVillagePieces.villageStones);
 		this.fillWithBlocks(var1, var3, 1, 2, 0, 7, 3, 0, Block.planks.blockID, Block.planks.blockID, false);
 		this.fillWithBlocks(var1, var3, 1, 2, 5, 2, 3, 5, Block.planks.blockID, Block.planks.blockID, false);
 		this.fillWithBlocks(var1, var3, 0, 4, 1, 8, 4, 1, Block.planks.blockID, Block.planks.blockID, false);
--- net/minecraft/src/ItemSword.java
+++ net/minecraft/src/ItemSword.java
@@ -39,7 +39,9 @@
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		var3.setItemInUse(var1, this.getMaxItemUseDuration(var1));
+		if (!var2.getWorldInfo().isClassicModeEnabled()) {
+			var3.setItemInUse(var1, this.getMaxItemUseDuration(var1));
+		}
 		return var1;
 	}
 
@@ -49,5 +51,13 @@
 
 	public int getItemEnchantability() {
 		return this.toolMaterial.getEnchantability();
+	}
+
+	protected void setClassicTweaks() {
+		this.weaponDamage = 4 + this.toolMaterial.getDamageVsEntity() * 2;
+	}
+
+	protected void unsetClassicTweaks() {
+		this.weaponDamage = 4 + this.toolMaterial.getDamageVsEntity();
 	}
 }
--- net/minecraft/src/EntityAIPanic.java
+++ net/minecraft/src/EntityAIPanic.java
@@ -14,7 +14,7 @@
 	}
 
 	public boolean shouldExecute() {
-		if(this.field_48208_a.getAITarget() == null) {
+		if(this.field_48208_a.getAITarget() == null || this.field_48208_a.worldObj.getWorldInfo().isClassicModeEnabled()) {
 			return false;
 		} else {
 			Vec3D var1 = RandomPositionGenerator.func_48396_a(this.field_48208_a, 5, 4);
--- net/minecraft/src/EntitySlime.java
+++ net/minecraft/src/EntitySlime.java
@@ -177,7 +177,12 @@
 
 	public boolean getCanSpawnHere() {
 		Chunk var1 = this.worldObj.getChunkFromBlockCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posZ));
-		return (this.getSlimeSize() == 1 || this.worldObj.difficultySetting > 0) && this.rand.nextInt(10) == 0 && var1.getRandomWithSeed(987234911L).nextInt(10) == 0 && this.posY < 40.0D ? super.getCanSpawnHere() : false;
+		return this.worldObj.getWorldInfo().getTerrainType() != WorldType.FLAT
+				&& (this.getSlimeSize() == 1 || this.worldObj.difficultySetting > 0)
+				&& this.rand.nextInt(10) == 0
+				&& var1.getRandomWithSeed(987234911L).nextInt(10) == 0
+				&& this.posY < 40.0D
+				&& super.getCanSpawnHere();
 	}
 
 	protected float getSoundVolume() {
--- net/minecraft/src/EntityBlaze.java
+++ net/minecraft/src/EntityBlaze.java
@@ -14,7 +14,7 @@
 	}
 
 	public int getMaxHealth() {
-		return 20;
+		return this.worldObj != null && this.worldObj.getWorldInfo().isHardcoreModeEnabled() ? 30 : 20;
 	}
 
 	protected void entityInit() {
--- net/minecraft/src/MapGenStronghold.java
+++ net/minecraft/src/MapGenStronghold.java
@@ -1,80 +1,19 @@
 package net.minecraft.src;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Random;
 
 public class MapGenStronghold extends MapGenStructure {
-	private BiomeGenBase[] allowedBiomeGenBases = new BiomeGenBase[]{BiomeGenBase.desert, BiomeGenBase.forest, BiomeGenBase.extremeHills, BiomeGenBase.swampland, BiomeGenBase.taiga, BiomeGenBase.icePlains, BiomeGenBase.iceMountains, BiomeGenBase.desertHills, BiomeGenBase.forestHills, BiomeGenBase.extremeHillsEdge, BiomeGenBase.jungle, BiomeGenBase.jungleHills};
-	private boolean ranBiomeCheck;
-	private ChunkCoordIntPair[] structureCoords = new ChunkCoordIntPair[3];
-
 	protected boolean canSpawnStructureAtCoords(int var1, int var2) {
-		if(!this.ranBiomeCheck) {
-			Random var3 = new Random();
-			var3.setSeed(this.worldObj.getSeed());
-			double var4 = var3.nextDouble() * Math.PI * 2.0D;
-
-			for(int var6 = 0; var6 < this.structureCoords.length; ++var6) {
-				double var7 = (1.25D + var3.nextDouble()) * 32.0D;
-				int var9 = (int)Math.round(Math.cos(var4) * var7);
-				int var10 = (int)Math.round(Math.sin(var4) * var7);
-				ArrayList var11 = new ArrayList();
-				BiomeGenBase[] var12 = this.allowedBiomeGenBases;
-				int var13 = var12.length;
-
-				for(int var14 = 0; var14 < var13; ++var14) {
-					BiomeGenBase var15 = var12[var14];
-					var11.add(var15);
-				}
-
-				ChunkPosition var19 = this.worldObj.getWorldChunkManager().findBiomePosition((var9 << 4) + 8, (var10 << 4) + 8, 112, var11, var3);
-				if(var19 != null) {
-					var9 = var19.x >> 4;
-					var10 = var19.z >> 4;
-				} else {
-					System.out.println("Placed stronghold in INVALID biome at (" + var9 + ", " + var10 + ")");
-				}
-
-				this.structureCoords[var6] = new ChunkCoordIntPair(var9, var10);
-				var4 += Math.PI * 2.0D / (double)this.structureCoords.length;
-			}
-
-			this.ranBiomeCheck = true;
-		}
-
-		ChunkCoordIntPair[] var16 = this.structureCoords;
-		int var17 = var16.length;
-
-		for(int var5 = 0; var5 < var17; ++var5) {
-			ChunkCoordIntPair var18 = var16[var5];
-			if(var1 == var18.chunkXPos && var2 == var18.chunkZPos) {
-				System.out.println(var1 + ", " + var2);
-				return true;
-			}
-		}
-
-		return false;
-	}
-
-	protected List func_40203_a() {
-		ArrayList var1 = new ArrayList();
-		ChunkCoordIntPair[] var2 = this.structureCoords;
-		int var3 = var2.length;
-
-		for(int var4 = 0; var4 < var3; ++var4) {
-			ChunkCoordIntPair var5 = var2[var4];
-			if(var5 != null) {
-				var1.add(var5.getChunkPosition(64));
-			}
-		}
-
-		return var1;
+		return this.rand.nextInt(150) == 0 && this.rand.nextInt(100) < Math.max(Math.abs(var1), Math.abs(var2))
+				&& !this.worldObj.getBiomeGenForCoords(var1 << 4, var2 << 4).isOcean();
 	}
 
 	protected StructureStart getStructureStart(int var1, int var2) {
 		StructureStrongholdStart var3;
-		for(var3 = new StructureStrongholdStart(this.worldObj, this.rand, var1, var2); var3.getComponents().isEmpty() || ((ComponentStrongholdStairs2)var3.getComponents().get(0)).portalRoom == null; var3 = new StructureStrongholdStart(this.worldObj, this.rand, var1, var2)) {
+		for(var3 = new StructureStrongholdStart(this.worldObj, this.rand, var1, var2); var3.getComponents().isEmpty(); var3 = new StructureStrongholdStart(this.worldObj, this.rand, var1, var2)) {
 		}
 
 		return var3;
--- net/minecraft/src/Packet53BlockChange.java
+++ net/minecraft/src/Packet53BlockChange.java
@@ -26,7 +26,7 @@
 
 	public void readPacketData(DataInputStream var1) throws IOException {
 		this.xPosition = var1.readInt();
-		this.yPosition = var1.read();
+		this.yPosition = var1.readShort();
 		this.zPosition = var1.readInt();
 		this.type = var1.read();
 		this.metadata = var1.read();
@@ -34,7 +34,7 @@
 
 	public void writePacketData(DataOutputStream var1) throws IOException {
 		var1.writeInt(this.xPosition);
-		var1.write(this.yPosition);
+		var1.writeShort(this.yPosition);
 		var1.writeInt(this.zPosition);
 		var1.write(this.type);
 		var1.write(this.metadata);
@@ -45,6 +45,6 @@
 	}
 
 	public int getPacketSize() {
-		return 11;
+		return 12;
 	}
 }
--- net/minecraft/src/StructureStart.java
+++ net/minecraft/src/StructureStart.java
@@ -81,4 +81,8 @@
 	public boolean isSizeableStructure() {
 		return true;
 	}
+
+	public boolean isFindable() {
+		return true;
+	}
 }
--- net/minecraft/src/Packet51MapChunk.java
+++ net/minecraft/src/Packet51MapChunk.java
@@ -10,8 +10,9 @@
 public class Packet51MapChunk extends Packet {
 	public int xCh;
 	public int zCh;
-	public int yChMin;
-	public int yChMax;
+	public long yChMin;
+	public long yChMax;
+	public int maxHeight;
 	public byte[] chunkData;
 	public boolean includeInitialize;
 	private int tempLength;
@@ -22,13 +23,16 @@
 		this.isChunkDataPacket = true;
 	}
 
-	public Packet51MapChunk(Chunk var1, boolean var2, int var3) {
+	public Packet51MapChunk(Chunk var1, boolean var2, long var3) {
 		this.isChunkDataPacket = true;
 		this.xCh = var1.xPosition;
 		this.zCh = var1.zPosition;
+		this.maxHeight = var1.getMaxHeight();
 		this.includeInitialize = var2;
 		if(var2) {
-			var3 = '\uffff';
+			var3 = 0x7FFFFFFFFFFFFFFFL;
+			var3 <<= 1;
+			var3 |= 1;
 			var1.field_50025_o = true;
 		}
 
@@ -38,11 +42,11 @@
 
 		int var7;
 		for(var7 = 0; var7 < var4.length; ++var7) {
-			if(var4[var7] != null && (!var2 || !var4[var7].getIsEmpty()) && (var3 & 1 << var7) != 0) {
-				this.yChMin |= 1 << var7;
+			if(var4[var7] != null && (!var2 || !var4[var7].getIsEmpty()) && (var3 & 1L << var7) != 0) {
+				this.yChMin |= 1L << var7;
 				++var5;
 				if(var4[var7].getBlockMSBArray() != null) {
-					this.yChMax |= 1 << var7;
+					this.yChMax |= 1L << var7;
 					++var6;
 				}
 			}
@@ -62,7 +66,7 @@
 
 		int var10;
 		for(var10 = 0; var10 < var4.length; ++var10) {
-			if(var4[var10] != null && (!var2 || !var4[var10].getIsEmpty()) && (var3 & 1 << var10) != 0) {
+			if(var4[var10] != null && (!var2 || !var4[var10].getIsEmpty()) && (var3 & 1L << var10) != 0) {
 				byte[] var11 = var4[var10].func_48590_g();
 				System.arraycopy(var11, 0, var8, var9, var11.length);
 				var9 += var11.length;
@@ -71,7 +75,7 @@
 
 		NibbleArray var15;
 		for(var10 = 0; var10 < var4.length; ++var10) {
-			if(var4[var10] != null && (!var2 || !var4[var10].getIsEmpty()) && (var3 & 1 << var10) != 0) {
+			if(var4[var10] != null && (!var2 || !var4[var10].getIsEmpty()) && (var3 & 1L << var10) != 0) {
 				var15 = var4[var10].func_48594_i();
 				System.arraycopy(var15.data, 0, var8, var9, var15.data.length);
 				var9 += var15.data.length;
@@ -79,7 +83,7 @@
 		}
 
 		for(var10 = 0; var10 < var4.length; ++var10) {
-			if(var4[var10] != null && (!var2 || !var4[var10].getIsEmpty()) && (var3 & 1 << var10) != 0) {
+			if(var4[var10] != null && (!var2 || !var4[var10].getIsEmpty()) && (var3 & 1L << var10) != 0) {
 				var15 = var4[var10].getBlocklightArray();
 				System.arraycopy(var15.data, 0, var8, var9, var15.data.length);
 				var9 += var15.data.length;
@@ -87,7 +91,7 @@
 		}
 
 		for(var10 = 0; var10 < var4.length; ++var10) {
-			if(var4[var10] != null && (!var2 || !var4[var10].getIsEmpty()) && (var3 & 1 << var10) != 0) {
+			if(var4[var10] != null && (!var2 || !var4[var10].getIsEmpty()) && (var3 & 1L << var10) != 0) {
 				var15 = var4[var10].getSkylightArray();
 				System.arraycopy(var15.data, 0, var8, var9, var15.data.length);
 				var9 += var15.data.length;
@@ -96,7 +100,7 @@
 
 		if(var6 > 0) {
 			for(var10 = 0; var10 < var4.length; ++var10) {
-				if(var4[var10] != null && (!var2 || !var4[var10].getIsEmpty()) && var4[var10].getBlockMSBArray() != null && (var3 & 1 << var10) != 0) {
+				if(var4[var10] != null && (!var2 || !var4[var10].getIsEmpty()) && var4[var10].getBlockMSBArray() != null && (var3 & 1L << var10) != 0) {
 					var15 = var4[var10].getBlockMSBArray();
 					System.arraycopy(var15.data, 0, var8, var9, var15.data.length);
 					var9 += var15.data.length;
@@ -127,8 +131,9 @@
 		this.xCh = var1.readInt();
 		this.zCh = var1.readInt();
 		this.includeInitialize = var1.readBoolean();
-		this.yChMin = var1.readShort();
-		this.yChMax = var1.readShort();
+		this.yChMin = var1.readLong();
+		this.yChMax = var1.readLong();
+		this.maxHeight = var1.readShort();
 		this.tempLength = var1.readInt();
 		this.field_48110_h = var1.readInt();
 		if(temp.length < this.tempLength) {
@@ -139,8 +144,8 @@
 		int var2 = 0;
 
 		int var3;
-		for(var3 = 0; var3 < 16; ++var3) {
-			var2 += this.yChMin >> var3 & 1;
+		for(var3 = 0; var3 < 64; ++var3) {
+			var2 += (int)(this.yChMin >>> var3 & 1L);
 		}
 
 		var3 = 12288 * var2;
@@ -166,8 +171,9 @@
 		var1.writeInt(this.xCh);
 		var1.writeInt(this.zCh);
 		var1.writeBoolean(this.includeInitialize);
-		var1.writeShort((short)(this.yChMin & '\uffff'));
-		var1.writeShort((short)(this.yChMax & '\uffff'));
+		var1.writeLong(this.yChMin);
+		var1.writeLong(this.yChMax);
+		var1.writeShort(this.maxHeight);
 		var1.writeInt(this.tempLength);
 		var1.writeInt(this.field_48110_h);
 		var1.write(this.chunkData, 0, this.tempLength);
@@ -178,6 +184,6 @@
 	}
 
 	public int getPacketSize() {
-		return 17 + this.tempLength;
+		return 33 + this.tempLength;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockStepWood.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockStepWood extends BlockStep {
+	public BlockStepWood(int var1, boolean var2) {
+		super(var1, var2, Material.wood);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return Block.planks.getBlockTextureFromSideAndMetadata(var1, var2 & 7);
+	}
+
+	public int idDropped(int var1, Random var2, int var3) {
+		return Block.woodStairSingle.blockID;
+	}
+
+	protected ItemStack createStackedBlock(int var1) {
+		return new ItemStack(Block.woodStairSingle.blockID, 1, var1 & 7);
+	}
+}
--- net/minecraft/src/WorldSettings.java
+++ net/minecraft/src/WorldSettings.java
@@ -5,14 +5,16 @@
 	private final int gameType;
 	private final boolean mapFeaturesEnabled;
 	private final boolean hardcoreEnabled;
+	private final boolean classicEnabled;
 	private final WorldType terrainType;
 
-	public WorldSettings(long var1, int var3, boolean var4, boolean var5, WorldType var6) {
+	public WorldSettings(long var1, int var3, boolean var4, boolean var5, boolean var6, WorldType var7) {
 		this.seed = var1;
 		this.gameType = var3;
 		this.mapFeaturesEnabled = var4;
 		this.hardcoreEnabled = var5;
-		this.terrainType = var6;
+		this.classicEnabled = var6;
+		this.terrainType = var7;
 	}
 
 	public long getSeed() {
@@ -25,6 +27,10 @@
 
 	public boolean getHardcoreEnabled() {
 		return this.hardcoreEnabled;
+	}
+
+	public boolean getClassicEnabled() {
+		return this.classicEnabled;
 	}
 
 	public boolean isMapFeaturesEnabled() {
--- /dev/null
+++ net/minecraft/src/BiomeGenSnowcappedPeaks.java
@@ -1,0 +1,60 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenSnowcappedPeaks extends BiomeGenBase {
+	private static final NoiseGeneratorSimplexOctaves snowNoise
+		    = new NoiseGeneratorSimplexOctaves(new Random(1234L), 1);
+
+	protected BiomeGenSnowcappedPeaks(int var1) {
+		super(var1);
+		this.topBlock = (byte)Block.stone.blockID;
+		this.fillerBlock = (byte)Block.stone.blockID;
+		this.biomeDecorator.dirtGen = new WorldGenEmpty();
+		this.biomeDecorator.treesPerChunk = 10;
+	}
+
+	public float getMinHeight(int x, int z) {
+		return Math.max(getHeightNoiseValue(x * 8.0D, z * 8.0D) * 4.0F
+				+ getHeightNoiseValue(x * -2.0D, z * -2.0D) * 1.5F
+				+ 2.0F, 0.0F);
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(3) != 0
+				? (var1.nextInt(3) == 0 ? new WorldGenTaiga1() : new WorldGenTaiga2(false))
+				: (var1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, int topTerrainHeight, double erosionValue, double simplexValue) {
+		int height = blocks.length / 256;
+		int chunkX = x & 15;
+		int chunkZ = z & 15;
+
+		int th = Math.min(topTerrainHeight, height - 1);
+		for (int i = chunkX * 16 * height + chunkZ * height + th; th > 64 && blocks[i] == 0; th--, i--);
+
+		if (Math.abs(erosionValue) > (th - 64) / 8.0D) {
+			this.topBlock = (byte)Block.grass.blockID;
+			this.fillerBlock = (byte)Block.dirt.blockID;
+		} else {
+			this.topBlock = this.fillerBlock = (byte)Block.stone.blockID;
+		}
+
+		super.buildBiomeSurface(world, random, blocks, metadata, x, z, topTerrainHeight, erosionValue, simplexValue);
+
+		float tempOffset = (float)snowNoise.func_151601_a(x / 8.0D, z / 8.0D) * 4.0F;
+		for (int y = Math.min(topTerrainHeight + 1, height - 1),
+		         i = chunkX * 16 * height + chunkZ * height + y;
+				 y > 64; y--, i--) {
+			float temp = 0.22F - (tempOffset + y - 64.0F) * 0.05F / 30.0F;
+			if (temp <= 0.15F) {
+				if (blocks[i] == 0 && blocks[i - 1] > 1) {
+					blocks[i] = (byte)Block.snow.blockID;
+				} else if (blocks[i] == 1) {
+					blocks[i] = (byte)Block.blockSnow.blockID;
+				}
+			}
+		}
+	}
+}
--- net/minecraft/src/EntityLiving.java
+++ net/minecraft/src/EntityLiving.java
@@ -334,8 +334,11 @@
 		++this.deathTime;
 		if(this.deathTime == 20) {
 			int var1;
-			if(!this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && !this.isChild()) {
+			if(!this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && !this.isChild() && !this.worldObj.getWorldInfo().isClassicModeEnabled()) {
 				var1 = this.getExperiencePoints(this.attackingPlayer);
+				if (this.worldObj.worldInfo.isHardcoreModeEnabled()) {
+					var1 *= 2;
+				}
 
 				while(var1 > 0) {
 					int var2 = EntityXPOrb.getXPSplit(var1);
@@ -841,7 +844,7 @@
 			}
 
 			this.moveEntity(this.motionX, this.motionY, this.motionZ);
-			if(this.isCollidedHorizontally && this.isOnLadder()) {
+			if((this.isCollidedHorizontally || this.isJumping) && this.isOnLadder()) {
 				this.motionY = 0.2D;
 			}
 
@@ -1015,9 +1018,12 @@
 		this.moveForward *= 0.98F;
 		this.randomYawVelocity *= 0.9F;
 		float var15 = this.landMovementFactor;
+		float var15x = this.jumpMovementFactor;
 		this.landMovementFactor *= this.getSpeedModifier();
+		this.jumpMovementFactor *= this.getSpeedModifier();
 		this.moveEntityWithHeading(this.moveStrafing, this.moveForward);
 		this.landMovementFactor = var15;
+		this.jumpMovementFactor = var15x;
 		Profiler.startSection("push");
 		List var4 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
 		if(var4 != null && var4.size() > 0) {
--- /dev/null
+++ net/minecraft/src/EnchantmentVelocity.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+public class EnchantmentVelocity extends Enchantment {
+	protected EnchantmentVelocity(int var1, int var2) {
+		super(var1, var2, EnumEnchantmentType.armor_legs);
+		this.setName("velocity");
+	}
+
+	public int getMinEnchantability(int var1) {
+		return 5 + 18 * (var1 - 1);
+	}
+
+	public int getMaxEnchantability(int var1) {
+		return super.getMinEnchantability(var1) + 50;
+	}
+
+	public int getMaxLevel() {
+		return 3;
+	}
+
+	public boolean canApplyTogether(Enchantment var1) {
+		return super.canApplyTogether(var1) && !(var1 instanceof EnchantmentStamina);
+	}
+}
--- net/minecraft/src/MapGenRavine.java
+++ net/minecraft/src/MapGenRavine.java
@@ -6,6 +6,7 @@
 	private float[] field_35540_a = new float[1024];
 
 	protected void generateRavine(long var1, int var3, int var4, byte[] var5, double var6, double var8, double var10, float var12, float var13, float var14, int var15, int var16, double var17) {
+		int height = var5.length / 256;
 		Random var19 = new Random(var1);
 		double var20 = (double)(var3 * 16 + 8);
 		double var22 = (double)(var4 * 16 + 8);
@@ -96,7 +97,7 @@
 					for(var41 = var55; !var58 && var41 < var35; ++var41) {
 						for(int var42 = var57; !var58 && var42 < var39; ++var42) {
 							for(int var43 = var37 + 1; !var58 && var43 >= var56 - 1; --var43) {
-								var44 = (var41 * 16 + var42) * 128 + var43;
+								var44 = (var41 * 16 + var42) * height + var43;
 								if(var43 >= 0 && var43 < 128) {
 									if(var5[var44] == Block.waterMoving.blockID || var5[var44] == Block.waterStill.blockID) {
 										var58 = true;
@@ -116,7 +117,7 @@
 
 							for(var44 = var57; var44 < var39; ++var44) {
 								double var45 = ((double)(var44 + var4 * 16) + 0.5D - var10) / var54;
-								int var47 = (var41 * 16 + var44) * 128 + var37;
+								int var47 = (var41 * 16 + var44) * height + var37;
 								boolean var48 = false;
 								if(var59 * var59 + var45 * var45 < 1.0D) {
 									for(int var49 = var37 - 1; var49 >= var56; --var49) {
--- net/minecraft/src/BlockDoor.java
+++ net/minecraft/src/BlockDoor.java
@@ -182,7 +182,7 @@
 	}
 
 	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var3 >= 255 ? false : var1.isBlockNormalCube(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
+		return var1.isBlockNormalCube(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
 	}
 
 	public int getMobilityFlag() {
--- /dev/null
+++ net/minecraft/src/GenLayerSingleBiome.java
@@ -1,0 +1,18 @@
+package net.minecraft.src;
+
+import java.util.Arrays;
+
+public class GenLayerSingleBiome extends GenLayer {
+	private final int biome;
+
+	public GenLayerSingleBiome(int biome) {
+		super(0L);
+		this.biome = biome;
+	}
+
+	public int[] getInts(int var1, int var2, int var3, int var4) {
+		int[] ints = IntCache.getIntCache(var3 * var4);
+		Arrays.fill(ints, this.biome);
+		return ints;
+	}
+}
--- net/minecraft/src/BlockVine.java
+++ net/minecraft/src/BlockVine.java
@@ -175,7 +175,7 @@
 			var11 = Direction.vineGrowth[var10];
 			int var12;
 			int var13;
-			if(var10 == 1 && var3 < 255 && var1.isAirBlock(var2, var3 + 1, var4)) {
+			if(var10 == 1 && var1.isAirBlock(var2, var3 + 1, var4)) {
 				if(var8) {
 					return;
 				}
--- net/minecraft/src/EntityGhast.java
+++ net/minecraft/src/EntityGhast.java
@@ -34,7 +34,7 @@
 	}
 
 	public int getMaxHealth() {
-		return 10;
+		return this.worldObj != null && this.worldObj.getWorldInfo().isHardcoreModeEnabled() ? 15 : 10;
 	}
 
 	public void onUpdate() {
--- net/minecraft/src/StructureVillagePieces.java
+++ net/minecraft/src/StructureVillagePieces.java
@@ -6,6 +6,8 @@
 import java.util.Random;
 
 public class StructureVillagePieces {
+	static final StructureVillageStones villageStones = new StructureVillageStones();
+
 	public static ArrayList getStructureVillageWeightedPieceList(Random var0, int var1) {
 		ArrayList var2 = new ArrayList();
 		var2.add(new StructureVillagePieceWeight(ComponentVillageHouse4_Garden.class, 4, MathHelper.getRandomIntegerInRange(var0, 2 + var1, 4 + var1 * 2)));
--- net/minecraft/src/StructureStrongholdStones.java
+++ net/minecraft/src/StructureStrongholdStones.java
@@ -6,7 +6,7 @@
 	private StructureStrongholdStones() {
 	}
 
-	public void selectBlocks(Random var1, int var2, int var3, int var4, boolean var5) {
+	public void selectBlocks(World var0, Random var1, int var2, int var3, int var4, boolean var5) {
 		if(!var5) {
 			this.selectedBlockId = 0;
 			this.selectedBlockMetaData = 0;
--- net/minecraft/server/MinecraftServer.java
+++ net/minecraft/server/MinecraftServer.java
@@ -104,7 +104,7 @@
 		logger.info("Loading properties");
 		this.propertyManagerObj = new PropertyManager(new File("server.properties"));
 		this.hostname = this.propertyManagerObj.getStringProperty("server-ip", "");
-		this.onlineMode = this.propertyManagerObj.getBooleanProperty("online-mode", true);
+		this.onlineMode = this.propertyManagerObj.getBooleanProperty("online-mode", false);
 		this.spawnPeacefulMobs = this.propertyManagerObj.getBooleanProperty("spawn-animals", true);
 		this.field_44002_p = this.propertyManagerObj.getBooleanProperty("spawn-npcs", true);
 		this.pvpOn = this.propertyManagerObj.getBooleanProperty("pvp", true);
@@ -160,9 +160,9 @@
 			var16 = WorldType.DEFAULT;
 		}
 
-		this.buildLimit = this.propertyManagerObj.getIntProperty("max-build-height", 256);
+		this.buildLimit = this.propertyManagerObj.getIntProperty("max-build-height", 1024);
 		this.buildLimit = (this.buildLimit + 8) / 16 * 16;
-		this.buildLimit = MathHelper.clamp_int(this.buildLimit, 64, 256);
+		this.buildLimit = MathHelper.clamp_int(this.buildLimit, 64, 1024);
 		this.propertyManagerObj.setProperty("max-build-height", Integer.valueOf(this.buildLimit));
 		logger.info("Preparing level \"" + var5 + "\"");
 		this.initWorld(new AnvilSaveConverter(new File(".")), var5, var8, var16);
@@ -196,7 +196,7 @@
 		var6 = WorldSettings.validGameType(var6);
 		logger.info("Default game type: " + var6);
 		boolean var7 = this.propertyManagerObj.getBooleanProperty("generate-structures", true);
-		WorldSettings var8 = new WorldSettings(var3, var6, var7, false, var5);
+		WorldSettings var8 = new WorldSettings(var3, var6, var7, false, false, var5);
 		AnvilSaveHandler var9 = new AnvilSaveHandler(new File("."), var2, true);
 
 		for(int var10 = 0; var10 < this.worldMngr.length; ++var10) {
@@ -219,6 +219,7 @@
 			this.worldMngr[var10].difficultySetting = this.propertyManagerObj.getIntProperty("difficulty", 1);
 			this.worldMngr[var10].setAllowedSpawnTypes(this.propertyManagerObj.getBooleanProperty("spawn-monsters", true), this.spawnPeacefulMobs);
 			this.worldMngr[var10].getWorldInfo().setGameType(var6);
+			this.worldMngr[var10].fastLighting = this.propertyManagerObj.getBooleanProperty("fast-lighting", true);
 			this.configManager.setPlayerManager(this.worldMngr);
 		}
 
--- net/minecraft/src/BlockTallGrass.java
+++ net/minecraft/src/BlockTallGrass.java
@@ -6,7 +6,7 @@
 	protected BlockTallGrass(int var1, int var2) {
 		super(var1, var2, Material.vine);
 		float var3 = 0.4F;
-		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, 0.8F, 0.5F + var3);
+		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, 0.5F, 0.5F + var3);
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
--- net/minecraft/src/ItemFood.java
+++ net/minecraft/src/ItemFood.java
@@ -13,10 +13,11 @@
 
 	public ItemFood(int var1, int var2, float var3, boolean var4) {
 		super(var1);
-		this.field_35427_a = 32;
+		this.field_35427_a = 48;
 		this.healAmount = var2;
 		this.isWolfsFavoriteMeat = var4;
 		this.saturationModifier = var3;
+		this.maxStackSize = 64;
 	}
 
 	public ItemFood(int var1, int var2, boolean var3) {
@@ -25,8 +26,11 @@
 
 	public ItemStack onFoodEaten(ItemStack var1, World var2, EntityPlayer var3) {
 		--var1.stackSize;
-		var3.getFoodStats().addStats(this);
-		var2.playSoundAtEntity(var3, "random.burp", 0.5F, var2.rand.nextFloat() * 0.1F + 0.9F);
+		int healLeftover = var3.getHealth() + this.getHealAmount() - var3.getMaxHealth();
+		if (healLeftover < 0) healLeftover = 0;
+		var3.heal(this.getHealAmount() - healLeftover);
+		var3.getFoodStats().addStats(healLeftover, this.getSaturationModifier());
+		var2.playSoundAtEntity(var3, var2.getWorldInfo().isClassicModeEnabled() ? "random.eat" : "random.burp", 0.5F, var2.rand.nextFloat() * 0.1F + 0.9F);
 		if(!var2.isRemote && this.potionId > 0 && var2.rand.nextFloat() < this.potionEffectProbability) {
 			var3.addPotionEffect(new PotionEffect(this.potionId, this.potionDuration * 20, this.potionAmplifier));
 		}
@@ -35,7 +39,7 @@
 	}
 
 	public int getMaxItemUseDuration(ItemStack var1) {
-		return 32;
+		return 48;
 	}
 
 	public EnumAction getItemUseAction(ItemStack var1) {
@@ -43,8 +47,12 @@
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		if(var3.canEat(this.alwaysEdible)) {
-			var3.setItemInUse(var1, this.getMaxItemUseDuration(var1));
+		if (var3.canEat(this.alwaysEdible)) {
+			if (var2.getWorldInfo().isClassicModeEnabled()) {
+				this.onFoodEaten(var1, var2, var3);
+			} else {
+				var3.setItemInUse(var1, this.getMaxItemUseDuration(var1));
+			}
 		}
 
 		return var1;
@@ -77,5 +85,13 @@
 
 	public Item setItemName(String var1) {
 		return super.setItemName(var1);
+	}
+
+	protected void setClassicTweaks() {
+		this.maxStackSize = 1;
+	}
+
+	protected void unsetClassicTweaks() {
+		this.maxStackSize = 64;
 	}
 }
--- net/minecraft/src/GenLayerRiverInit.java
+++ net/minecraft/src/GenLayerRiverInit.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import static net.minecraft.src.BiomeGenBase.oceanList;
+
 public class GenLayerRiverInit extends GenLayer {
 	public GenLayerRiverInit(long var1, GenLayer var3) {
 		super(var1);
@@ -13,7 +15,7 @@
 		for(int var7 = 0; var7 < var4; ++var7) {
 			for(int var8 = 0; var8 < var3; ++var8) {
 				this.initChunkSeed((long)(var8 + var1), (long)(var7 + var2));
-				var6[var8 + var7 * var3] = var5[var8 + var7 * var3] > 0 ? this.nextInt(2) + 2 : 0;
+				var6[var8 + var7 * var3] = !oceanList[var5[var8 + var7 * var3]] ? this.nextInt(2) + 2 : 0;
 			}
 		}
 
--- net/minecraft/src/BiomeGenHills.java
+++ net/minecraft/src/BiomeGenHills.java
@@ -3,5 +3,6 @@
 public class BiomeGenHills extends BiomeGenBase {
 	protected BiomeGenHills(int var1) {
 		super(var1);
+		this.biomeDecorator.grassPerChunk = 3;
 	}
 }
--- net/minecraft/src/World.java
+++ net/minecraft/src/World.java
@@ -32,7 +32,7 @@
 	public int lightningFlash = 0;
 	public boolean editingBlocks = false;
 	private long lockTimestamp = System.currentTimeMillis();
-	protected int autosavePeriod = 40;
+	protected int autosavePeriod = 1200;
 	public int difficultySetting;
 	public Random rand = new Random();
 	public boolean isNewWorld = false;
@@ -55,6 +55,7 @@
 	int[] lightUpdateBlockList = new int[-Short.MIN_VALUE];
 	private List entitiesWithinAABBExcludingEntity = new ArrayList();
 	public boolean isRemote = false;
+	public boolean fastLighting = false;
 
 	public BiomeGenBase getBiomeGenForCoords(int var1, int var2) {
 		if(this.blockExists(var1, 0, var2)) {
@@ -92,6 +93,12 @@
 			this.worldInfo.setWorldName(var2);
 		}
 
+		if (this.getWorldInfo().isClassicModeEnabled()) {
+			Item.enableClassicTweaks();
+		} else {
+			Item.disableClassicTweaks();
+		}
+
 		this.worldProvider.registerWorld(this);
 		this.chunkProvider = this.createChunkProvider();
 		if(var5) {
@@ -113,9 +120,9 @@
 		} else {
 			this.findingSpawnPoint = true;
 			WorldChunkManager var1 = this.worldProvider.worldChunkMgr;
-			List var2 = var1.getBiomesToSpawnIn();
+			List var2 = this.getWorldInfo().isHardcoreModeEnabled() || this.getWorldInfo().getTerrainType() == WorldType.CUSTOMIZED ? null : var1.getBiomesToSpawnIn();
 			Random var3 = new Random(this.getSeed());
-			ChunkPosition var4 = var1.findBiomePosition(0, 0, 256, var2, var3);
+			ChunkPosition var4 = var1.findBiomePosition(0, 0, 256, null, var3);
 			int var5 = 0;
 			int var6 = this.worldProvider.getAverageGroundLevel();
 			int var7 = 0;
@@ -176,11 +183,11 @@
 	}
 
 	public int getBlockId(int var1, int var2, int var3) {
-		return var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000 ? (var2 < 0 ? 0 : (var2 >= 256 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15))) : 0;
+		return var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000 ? (var2 < 0 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15)) : 0;
 	}
 
 	public int func_48092_f(int var1, int var2, int var3) {
-		return var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000 ? (var2 < 0 ? 0 : (var2 >= 256 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockLightOpacity(var1 & 15, var2, var3 & 15))) : 0;
+		return var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000 ? (var2 < 0 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockLightOpacity(var1 & 15, var2, var3 & 15)) : 0;
 	}
 
 	public boolean isAirBlock(int var1, int var2, int var3) {
@@ -193,7 +200,7 @@
 	}
 
 	public boolean blockExists(int var1, int var2, int var3) {
-		return var2 >= 0 && var2 < 256 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
+		return var2 >= 0 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
 	}
 
 	public boolean doChunksNearChunkExist(int var1, int var2, int var3, int var4) {
@@ -201,7 +208,7 @@
 	}
 
 	public boolean checkChunksExist(int var1, int var2, int var3, int var4, int var5, int var6) {
-		if(var5 >= 0 && var2 < 256) {
+		if(var5 >= 0) {
 			var1 >>= 4;
 			var3 >>= 4;
 			var4 >>= 4;
@@ -221,7 +228,7 @@
 		}
 	}
 
-	private boolean chunkExists(int var1, int var2) {
+	public boolean chunkExists(int var1, int var2) {
 		return this.chunkProvider.chunkExists(var1, var2);
 	}
 
@@ -237,8 +244,6 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 256) {
-				return false;
 			} else {
 				Chunk var6 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
 				boolean var7 = var6.setBlockIDWithMetadata(var1 & 15, var2, var3 & 15, var4, var5);
@@ -256,8 +261,6 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 256) {
-				return false;
 			} else {
 				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
 				boolean var6 = var5.setBlockID(var1 & 15, var2, var3 & 15, var4);
@@ -280,8 +283,6 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return 0;
-			} else if(var2 >= 256) {
-				return 0;
 			} else {
 				Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
 				var1 &= 15;
@@ -309,8 +310,6 @@
 		if(var1 >= -30000000 && var3 >= -30000000 && var1 < 30000000 && var3 < 30000000) {
 			if(var2 < 0) {
 				return false;
-			} else if(var2 >= 256) {
-				return false;
 			} else {
 				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
 				var1 &= 15;
@@ -410,10 +409,6 @@
 		if(var2 < 0) {
 			return 0;
 		} else {
-			if(var2 >= 256) {
-				var2 = 255;
-			}
-
 			return this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockLightValue(var1 & 15, var2, var3 & 15, 0);
 		}
 	}
@@ -455,10 +450,6 @@
 			if(var2 < 0) {
 				return 0;
 			} else {
-				if(var2 >= 256) {
-					var2 = 255;
-				}
-
 				Chunk var11 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
 				var1 &= 15;
 				var3 &= 15;
@@ -487,10 +478,6 @@
 			var3 = 0;
 		}
 
-		if(var3 >= 256) {
-			var3 = 255;
-		}
-
 		if(var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
 			int var5 = var2 >> 4;
 			int var6 = var4 >> 4;
@@ -508,16 +495,14 @@
 	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
 		if(var2 >= -30000000 && var4 >= -30000000 && var2 < 30000000 && var4 < 30000000) {
 			if(var3 >= 0) {
-				if(var3 < 256) {
-					if(this.chunkExists(var2 >> 4, var4 >> 4)) {
-						Chunk var6 = this.getChunkFromChunkCoords(var2 >> 4, var4 >> 4);
-						var6.setLightValue(var1, var2 & 15, var3, var4 & 15, var5);
-
-						for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
-							((IWorldAccess)this.worldAccesses.get(var7)).markBlockNeedsUpdate2(var2, var3, var4);
-						}
-
+				if(this.chunkExists(var2 >> 4, var4 >> 4)) {
+					Chunk var6 = this.getChunkFromChunkCoords(var2 >> 4, var4 >> 4);
+					var6.setLightValue(var1, var2 & 15, var3, var4 & 15, var5);
+
+					for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
+						((IWorldAccess)this.worldAccesses.get(var7)).markBlockNeedsUpdate2(var2, var3, var4);
 					}
+
 				}
 			}
 		}
@@ -1394,28 +1379,24 @@
 	}
 
 	public TileEntity getBlockTileEntity(int var1, int var2, int var3) {
-		if(var2 >= 256) {
+		Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
+		if(var4 == null) {
 			return null;
 		} else {
-			Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-			if(var4 == null) {
-				return null;
-			} else {
-				TileEntity var5 = var4.getChunkBlockTileEntity(var1 & 15, var2, var3 & 15);
-				if(var5 == null) {
-					Iterator var6 = this.addedTileEntityList.iterator();
+			TileEntity var5 = var4.getChunkBlockTileEntity(var1 & 15, var2, var3 & 15);
+			if(var5 == null) {
+				Iterator var6 = this.addedTileEntityList.iterator();
 
-					while(var6.hasNext()) {
-						TileEntity var7 = (TileEntity)var6.next();
-						if(!var7.isInvalid() && var7.xCoord == var1 && var7.yCoord == var2 && var7.zCoord == var3) {
-							var5 = var7;
-							break;
-						}
+				while(var6.hasNext()) {
+					TileEntity var7 = (TileEntity)var6.next();
+					if(!var7.isInvalid() && var7.xCoord == var1 && var7.yCoord == var2 && var7.zCoord == var3) {
+						var5 = var7;
+						break;
 					}
 				}
-
-				return var5;
 			}
+
+			return var5;
 		}
 	}
 
@@ -1517,7 +1498,7 @@
 		}
 
 		Profiler.startSection("mobSpawner");
-		SpawnerAnimals.performSpawning(this, this.spawnHostileMobs, this.spawnPeacefulMobs && this.worldInfo.getWorldTime() % 400L == 0L);
+		SpawnerAnimals.performSpawning(this, this.spawnHostileMobs, this.spawnPeacefulMobs && (this.worldInfo.getWorldTime() % 400L == 0L || this.worldInfo.isClassicModeEnabled()));
 		Profiler.endStartSection("chunkSource");
 		this.chunkProvider.unload100OldestChunks();
 		int var4 = this.calculateSkylightSubtracted(1.0F);
@@ -1783,10 +1764,10 @@
 	public boolean isBlockHydrated(int var1, int var2, int var3, boolean var4) {
 		BiomeGenBase var5 = this.getBiomeGenForCoords(var1, var3);
 		float var6 = var5.getFloatTemperature();
-		if(var6 > 0.15F) {
+		if(var6 >= 0.15F) {
 			return false;
 		} else {
-			if(var2 >= 0 && var2 < 256 && this.getSavedLightValue(EnumSkyBlock.Block, var1, var2, var3) < 10) {
+			if(var2 >= 0 && this.getSavedLightValue(EnumSkyBlock.Block, var1, var2, var3) < 10) {
 				int var7 = this.getBlockId(var1, var2, var3);
 				if((var7 == Block.waterStill.blockID || var7 == Block.waterMoving.blockID) && this.getBlockMetadata(var1, var2, var3) == 0) {
 					if(!var4) {
@@ -1823,10 +1804,10 @@
 	public boolean canSnowAt(int var1, int var2, int var3) {
 		BiomeGenBase var4 = this.getBiomeGenForCoords(var1, var3);
 		float var5 = var4.getFloatTemperature();
-		if(var5 > 0.15F) {
+		if(var5 >= 0.15F) {
 			return false;
 		} else {
-			if(var2 >= 0 && var2 < 256 && this.getSavedLightValue(EnumSkyBlock.Block, var1, var2, var3) < 10) {
+			if(var2 >= 0 && this.getSavedLightValue(EnumSkyBlock.Block, var1, var2, var3) < 10) {
 				int var6 = this.getBlockId(var1, var2 - 1, var3);
 				int var7 = this.getBlockId(var1, var2, var3);
 				if(var7 == 0 && Block.snow.canPlaceBlockAt(this, var1, var2, var3) && var6 != 0 && var6 != Block.ice.blockID && Block.blocksList[var6].blockMaterial.blocksMovement()) {
@@ -1838,12 +1819,15 @@
 		}
 	}
 
-	public void updateAllLightTypes(int var1, int var2, int var3) {
+	public boolean updateAllLightTypes(int var1, int var2, int var3) {
+		boolean updated = false;
+
 		if(!this.worldProvider.hasNoSky) {
-			this.updateLightByType(EnumSkyBlock.Sky, var1, var2, var3);
+			updated |= this.updateLightByType(EnumSkyBlock.Sky, var1, var2, var3);
 		}
 
-		this.updateLightByType(EnumSkyBlock.Block, var1, var2, var3);
+		updated |= this.updateLightByType(EnumSkyBlock.Block, var1, var2, var3);
+		return updated;
 	}
 
 	private int computeSkyLightValue(int var1, int var2, int var3, int var4, int var5, int var6) {
@@ -1924,167 +1908,168 @@
 		return var7;
 	}
 
-	public void updateLightByType(EnumSkyBlock var1, int var2, int var3, int var4) {
-		if(this.doChunksNearChunkExist(var2, var3, var4, 17)) {
-			int var5 = 0;
-			int var6 = 0;
-			Profiler.startSection("getBrightness");
-			int var7 = this.getSavedLightValue(var1, var2, var3, var4);
-			boolean var8 = false;
-			int var10 = this.getBlockId(var2, var3, var4);
-			int var11 = this.func_48092_f(var2, var3, var4);
-			if(var11 == 0) {
-				var11 = 1;
-			}
-
-			boolean var12 = false;
-			int var25;
-			if(var1 == EnumSkyBlock.Sky) {
-				var25 = this.computeSkyLightValue(var7, var2, var3, var4, var10, var11);
-			} else {
-				var25 = this.computeBlockLightValue(var7, var2, var3, var4, var10, var11);
-			}
-
-			int var9;
-			int var13;
-			int var14;
-			int var15;
-			int var16;
-			int var17;
-			if(var25 > var7) {
-				this.lightUpdateBlockList[var6++] = 133152;
-			} else if(var25 < var7) {
-				if(var1 != EnumSkyBlock.Block) {
-				}
-
-				this.lightUpdateBlockList[var6++] = 133152 + (var7 << 18);
-
-				label133:
-				while(true) {
-					do {
-						do {
-							do {
-								if(var5 >= var6) {
-									var5 = 0;
-									break label133;
-								}
-
-								var9 = this.lightUpdateBlockList[var5++];
-								var10 = (var9 & 63) - 32 + var2;
-								var11 = (var9 >> 6 & 63) - 32 + var3;
-								var25 = (var9 >> 12 & 63) - 32 + var4;
-								var13 = var9 >> 18 & 15;
-								var14 = this.getSavedLightValue(var1, var10, var11, var25);
-							} while(var14 != var13);
-
-							this.setLightValue(var1, var10, var11, var25, 0);
-						} while(var13 <= 0);
-
-						var15 = var10 - var2;
-						var16 = var11 - var3;
-						var17 = var25 - var4;
-						if(var15 < 0) {
-							var15 = -var15;
-						}
-
-						if(var16 < 0) {
-							var16 = -var16;
-						}
-
-						if(var17 < 0) {
-							var17 = -var17;
-						}
-					} while(var15 + var16 + var17 >= 17);
-
-					for(int var18 = 0; var18 < 6; ++var18) {
-						int var19 = var18 % 2 * 2 - 1;
-						int var20 = var10 + var18 / 2 % 3 / 2 * var19;
-						int var21 = var11 + (var18 / 2 + 1) % 3 / 2 * var19;
-						int var22 = var25 + (var18 / 2 + 2) % 3 / 2 * var19;
-						var14 = this.getSavedLightValue(var1, var20, var21, var22);
-						int var23 = Block.lightOpacity[this.getBlockId(var20, var21, var22)];
-						if(var23 == 0) {
-							var23 = 1;
-						}
-
-						if(var14 == var13 - var23 && var6 < this.lightUpdateBlockList.length) {
-							this.lightUpdateBlockList[var6++] = var20 - var2 + 32 + (var21 - var3 + 32 << 6) + (var22 - var4 + 32 << 12) + (var13 - var23 << 18);
-						}
-					}
-				}
-			}
-
-			Profiler.endSection();
-			Profiler.startSection("tcp < tcc");
+	private int getRawLight(int x, int y, int z, EnumSkyBlock lightType) {
+		if (lightType == EnumSkyBlock.Sky && this.canBlockSeeTheSky(x, y, z)) {
+			return 15;
+		}
+
+		int block = this.getBlockId(x, y, z);
+		int i = lightType == EnumSkyBlock.Sky ? 0 : Block.lightValue[block];
+		int j = Block.lightOpacity[block];
+
+		if (j >= 15) {
+			if (Block.lightValue[block] == 0) {
+				return 0;
+			}
+			j = 1;
+		}
+
+		if (j < 1) {
+			j = 1;
+		}
+
+		if (i >= 14) {
+			return i;
+		}
+
+		i = this.getRawLightNeighbor(x - 1, y, z, lightType, i, j);
+		if (i >= 14) return i;
+		i = this.getRawLightNeighbor(x + 1, y, z, lightType, i, j);
+		if (i >= 14) return i;
+		i = this.getRawLightNeighbor(x, y - 1, z, lightType, i, j);
+		if (i >= 14) return i;
+		i = this.getRawLightNeighbor(x, y + 1, z, lightType, i, j);
+		if (i >= 14) return i;
+		i = this.getRawLightNeighbor(x, y, z - 1, lightType, i, j);
+		if (i >= 14) return i;
+		i = this.getRawLightNeighbor(x, y, z + 1, lightType, i, j);
+		return i;
+	}
+
+	private int getRawLightNeighbor(int x, int y, int z, EnumSkyBlock lightType, int i, int j) {
+		int k = this.getSavedLightValue(lightType, x, y, z) - j;
+		if (k > i) {
+			i = k;
+		}
+		return i;
+	}
+
+	public boolean updateLightByType(EnumSkyBlock var1, int var2, int var3, int var4) {
+		if(!this.doChunksNearChunkExist(var2, var3, var4, 17)) {
+			return false;
+		}
+		int var5 = 0;
+		int var6 = 0;
+		Profiler.startSection("getBrightness");
+		int var7 = this.getSavedLightValue(var1, var2, var3, var4);
+		int var25 = this.getRawLight(var2, var3, var4, var1);
+
+		int var9;
+		int var10;
+		int var11;
+		int var13;
+		int var14;
+		int var15;
+		int var16;
+		int var17;
+		if(var25 > var7) {
+			this.lightUpdateBlockList[var6++] = 133152;
+		} else if(var25 < var7) {
+			this.lightUpdateBlockList[var6++] = 133152 + (var7 << 18);
 
 			while(var5 < var6) {
-				var7 = this.lightUpdateBlockList[var5++];
-				int var24 = (var7 & 63) - 32 + var2;
-				var9 = (var7 >> 6 & 63) - 32 + var3;
-				var10 = (var7 >> 12 & 63) - 32 + var4;
-				var11 = this.getSavedLightValue(var1, var24, var9, var10);
-				var25 = this.getBlockId(var24, var9, var10);
-				var13 = Block.lightOpacity[var25];
-				if(var13 == 0) {
-					var13 = 1;
-				}
-
-				boolean var26 = false;
-				if(var1 == EnumSkyBlock.Sky) {
-					var14 = this.computeSkyLightValue(var11, var24, var9, var10, var25, var13);
-				} else {
-					var14 = this.computeBlockLightValue(var11, var24, var9, var10, var25, var13);
-				}
-
-				if(var14 != var11) {
-					this.setLightValue(var1, var24, var9, var10, var14);
-					if(var14 > var11) {
-						var15 = var24 - var2;
-						var16 = var9 - var3;
-						var17 = var10 - var4;
-						if(var15 < 0) {
-							var15 = -var15;
-						}
-
-						if(var16 < 0) {
-							var16 = -var16;
-						}
-
-						if(var17 < 0) {
-							var17 = -var17;
-						}
-
-						if(var15 + var16 + var17 < 17 && var6 < this.lightUpdateBlockList.length - 6) {
-							if(this.getSavedLightValue(var1, var24 - 1, var9, var10) < var14) {
-								this.lightUpdateBlockList[var6++] = var24 - 1 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
-							}
-
-							if(this.getSavedLightValue(var1, var24 + 1, var9, var10) < var14) {
-								this.lightUpdateBlockList[var6++] = var24 + 1 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
-							}
-
-							if(this.getSavedLightValue(var1, var24, var9 - 1, var10) < var14) {
-								this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 - 1 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
-							}
-
-							if(this.getSavedLightValue(var1, var24, var9 + 1, var10) < var14) {
-								this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 + 1 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
-							}
-
-							if(this.getSavedLightValue(var1, var24, var9, var10 - 1) < var14) {
-								this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 - 1 - var4 + 32 << 12);
-							}
-
-							if(this.getSavedLightValue(var1, var24, var9, var10 + 1) < var14) {
-								this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 + 1 - var4 + 32 << 12);
-							}
+                int l1 = this.lightUpdateBlockList[var5++];
+                int i2 = (l1 & 63) - 32 + var2;
+                int j2 = (l1 >> 6 & 63) - 32 + var3;
+                int k2 = (l1 >> 12 & 63) - 32 + var4;
+                int l2 = l1 >> 18 & 15;
+                int i3 = this.getSavedLightValue(var1, i2, j2, k2);
+
+                if (i3 == l2) {
+                    this.setLightValue(var1, i2, j2, k2, 0);
+
+                    if (l2 > 0) {
+                        int j3 = Math.abs(i2 - var2);
+                        int k3 = Math.abs(j2 - var3);
+                        int l3 = Math.abs(k2 - var4);
+
+                        if (j3 + k3 + l3 < 17) {
+                            for (int var18 = 0; var18 < 6; ++var18) {
+								int var19 = var18 % 2 * 2 - 1;
+                                int i4 = i2 + var18 / 2 % 3 / 2 * var19;
+                                int j4 = j2 + (var18 / 2 + 1) % 3 / 2 * var19;
+                                int k4 = k2 + (var18 / 2 + 2) % 3 / 2 * var19;
+                                int l4 = Math.max(1, Block.lightOpacity[this.getBlockId(i4, j4, k4)]);
+                                i3 = this.getSavedLightValue(var1, i4, j4, k4);
+
+                                if (i3 == l2 - l4 && var6 < this.lightUpdateBlockList.length) {
+                                    this.lightUpdateBlockList[var6++] = i4 - var2 + 32 | j4 - var3 + 32 << 6
+                                            | k4 - var4 + 32 << 12 | l2 - l4 << 18;
+                                }
+                            }
+                        }
+                    }
+                }
+			}
+
+			var5 = 0;
+		}
+
+		Profiler.endSection();
+		Profiler.startSection("checkedPosition < toCheckCount");
+
+		while(var5 < var6) {
+			var7 = this.lightUpdateBlockList[var5++];
+			int var24 = (var7 & 63) - 32 + var2;
+			var9 = (var7 >> 6 & 63) - 32 + var3;
+			var10 = (var7 >> 12 & 63) - 32 + var4;
+			var11 = this.getSavedLightValue(var1, var24, var9, var10);
+			var25 = this.getBlockId(var24, var9, var10);
+			var13 = Block.lightOpacity[var25];
+			if(var13 == 0) {
+				var13 = 1;
+			}
+
+			var14 = this.getRawLight(var24, var9, var10, var1);
+
+			if(var14 != var11) {
+				this.setLightValue(var1, var24, var9, var10, var14);
+				if(var14 > var11) {
+					var15 = Math.abs(var24 - var2);
+					var16 = Math.abs(var9 - var3);
+					var17 = Math.abs(var10 - var4);
+
+					if(var15 + var16 + var17 < 17 && var6 < this.lightUpdateBlockList.length - 6) {
+						if(this.getSavedLightValue(var1, var24 - 1, var9, var10) < var14) {
+							this.lightUpdateBlockList[var6++] = var24 - 1 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
+						}
+
+						if(this.getSavedLightValue(var1, var24 + 1, var9, var10) < var14) {
+							this.lightUpdateBlockList[var6++] = var24 + 1 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
+						}
+
+						if(this.getSavedLightValue(var1, var24, var9 - 1, var10) < var14) {
+							this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 - 1 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
+						}
+
+						if(this.getSavedLightValue(var1, var24, var9 + 1, var10) < var14) {
+							this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 + 1 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
+						}
+
+						if(this.getSavedLightValue(var1, var24, var9, var10 - 1) < var14) {
+							this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 - 1 - var4 + 32 << 12);
+						}
+
+						if(this.getSavedLightValue(var1, var24, var9, var10 + 1) < var14) {
+							this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 + 1 - var4 + 32 << 12);
 						}
 					}
 				}
 			}
-
-			Profiler.endSection();
 		}
+
+		Profiler.endSection();
+		return true;
 	}
 
 	public boolean tickUpdates(boolean var1) {
@@ -2568,4 +2553,29 @@
 	public ChunkPosition findClosestStructure(String var1, int var2, int var3, int var4) {
 		return this.getChunkProvider().findClosestStructure(this, var1, var2, var3, var4);
 	}
+
+	public int getMinHeightValue(int var1, int var2) {
+		if(var1 >= -30000000 && var2 >= -30000000 && var1 < 30000000 && var2 < 30000000) {
+			if(!this.chunkExists(var1 >> 4, var2 >> 4)) {
+				return 0;
+			} else {
+				Chunk var3 = this.getChunkFromChunkCoords(var1 >> 4, var2 >> 4);
+				return var3.heightMapMinimum;
+			}
+		} else {
+			return 0;
+		}
+	}
+
+	public int getSeaLevel() {
+		return this.worldInfo.getTerrainType() == WorldType.FLAT ? 0 : 63;
+	}
+
+	public float getTemperature(int var1, int var2) {
+		return this.getWorldChunkManager().getTemperature(var1, var2);
+	}
+
+	public float getRainfall(int var1, int var2) {
+		return this.getWorldChunkManager().getRainfall(var1, var2);
+ 	}
 }
--- /dev/null
+++ net/minecraft/src/BiomeGenShrubland.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenShrubland extends BiomeGenBase {
+	protected BiomeGenShrubland(int var1) {
+		super(var1);
+		this.biomeDecorator.treesPerChunk = 10;
+		this.biomeDecorator.grassPerChunk = 5;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(5) == 0 ? this.worldGenSwamp : new WorldGenShrub(0, 0);
+	}
+}
--- /dev/null
+++ net/minecraft/src/NoiseGeneratorOctaves2.java
@@ -1,0 +1,45 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class NoiseGeneratorOctaves2 extends NoiseGenerator {
+	private NoiseGenerator2[] field_4234_a;
+	private int field_4233_b;
+
+	public NoiseGeneratorOctaves2(Random var1, int var2) {
+		this.field_4233_b = var2;
+		this.field_4234_a = new NoiseGenerator2[var2];
+
+		for(int var3 = 0; var3 < var2; ++var3) {
+			this.field_4234_a[var3] = new NoiseGenerator2(var1);
+		}
+
+	}
+
+	public double[] func_4112_a(double[] var1, double var2, double var4, int var6, int var7, double var8, double var10, double var12) {
+		return this.func_4111_a(var1, var2, var4, var6, var7, var8, var10, var12, 0.5D);
+	}
+
+	public double[] func_4111_a(double[] var1, double var2, double var4, int var6, int var7, double var8, double var10, double var12, double var14) {
+		var8 /= 1.5D;
+		var10 /= 1.5D;
+		if(var1 != null && var1.length >= var6 * var7) {
+			for(int var16 = 0; var16 < var1.length; ++var16) {
+				var1[var16] = 0.0D;
+			}
+		} else {
+			var1 = new double[var6 * var7];
+		}
+
+		double var21 = 1.0D;
+		double var18 = 1.0D;
+
+		for(int var20 = 0; var20 < this.field_4233_b; ++var20) {
+			this.field_4234_a[var20].func_4157_a(var1, var2, var4, var6, var7, var8 * var18, var10 * var18, 0.55D / var21);
+			var18 *= var12;
+			var21 *= var14;
+		}
+
+		return var1;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeGenWindsweptCrags.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+public class BiomeGenWindsweptCrags extends BiomeGenBase {
+	protected BiomeGenWindsweptCrags(int var1) {
+		super(var1);
+		this.biomeDecorator.treesPerChunk = 1;
+		this.biomeDecorator.cragsPerChunk = 1;
+	}
+}
--- net/minecraft/src/BlockSapling.java
+++ net/minecraft/src/BlockSapling.java
@@ -31,14 +31,33 @@
 
 	public void growTree(World var1, int var2, int var3, int var4, Random var5) {
 		int var6 = var1.getBlockMetadata(var2, var3, var4) & 3;
+		BiomeGenBase biome = var1.getBiomeGenForCoords(var2, var4);
 		Object var7 = null;
 		int var8 = 0;
 		int var9 = 0;
 		boolean var10 = false;
 		if(var6 == 1) {
-			var7 = new WorldGenTaiga2(true);
+			for(var8 = 0; var8 >= -1; --var8) {
+				for(var9 = 0; var9 >= -1; --var9) {
+					if(this.func_50010_f(var1, var2 + var8, var3, var4 + var9, 3) && this.func_50010_f(var1, var2 + var8 + 1, var3, var4 + var9, 3) && this.func_50010_f(var1, var2 + var8, var3, var4 + var9 + 1, 3) && this.func_50010_f(var1, var2 + var8 + 1, var3, var4 + var9 + 1, 3)) {
+						var7 = new WorldGenMegaPineTree(true, var5.nextBoolean(), 15, 15);
+						var10 = true;
+						break;
+					}
+				}
+
+				if(var7 != null) {
+					break;
+				}
+			}
+
+			if(var7 == null) {
+				var9 = 0;
+				var8 = var9;
+				var7 = new WorldGenTaiga2(true);
+			}
 		} else if(var6 == 2) {
-			var7 = new WorldGenForest(true);
+			var7 = new WorldGenForest(true, biome == BiomeGenBase.birchForest);
 		} else if(var6 == 3) {
 			for(var8 = 0; var8 >= -1; --var8) {
 				for(var9 = 0; var9 >= -1; --var9) {
@@ -59,6 +78,8 @@
 				var8 = var9;
 				var7 = new WorldGenTrees(true, 4 + var5.nextInt(7), 3, 3, false);
 			}
+		} else if (biome == BiomeGenBase.swampland || biome == BiomeGenBase.shrubland) {
+			var7 = new WorldGenSwamp(true);
 		} else {
 			var7 = new WorldGenTrees(true);
 			if(var5.nextInt(10) == 0) {
--- net/minecraft/src/ComponentVillageChurch.java
+++ net/minecraft/src/ComponentVillageChurch.java
@@ -32,17 +32,17 @@
 
 		this.fillWithBlocks(var1, var3, 1, 1, 1, 3, 3, 7, 0, 0, false);
 		this.fillWithBlocks(var1, var3, 1, 5, 1, 3, 9, 3, 0, 0, false);
-		this.fillWithBlocks(var1, var3, 1, 0, 0, 3, 0, 8, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 1, 1, 0, 3, 10, 0, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 0, 1, 1, 0, 10, 3, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 4, 1, 1, 4, 10, 3, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 0, 0, 4, 0, 4, 7, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 4, 0, 4, 4, 4, 7, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 1, 1, 8, 3, 4, 8, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 1, 5, 4, 3, 10, 4, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 1, 5, 5, 3, 5, 7, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 0, 9, 0, 4, 9, 4, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 0, 4, 0, 4, 4, 4, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+		this.fillWithRandomizedBlocks(var1, var3, 1, 0, 0, 3, 0, 8, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 1, 1, 0, 3, 10, 0, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 1, 1, 0, 10, 3, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 4, 1, 1, 4, 10, 3, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 0, 4, 0, 4, 7, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 4, 0, 4, 4, 4, 7, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 1, 1, 8, 3, 4, 8, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 1, 5, 4, 3, 10, 4, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 1, 5, 5, 3, 5, 7, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 9, 0, 4, 9, 4, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 4, 0, 4, 4, 4, false, var2, StructureVillagePieces.villageStones);
 		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 0, 11, 2, var3);
 		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 4, 11, 2, var3);
 		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 2, 11, 0, var3);
--- net/minecraft/src/Packet1Login.java
+++ net/minecraft/src/Packet1Login.java
@@ -13,11 +13,12 @@
 	public byte difficultySetting;
 	public byte worldHeight;
 	public byte maxPlayers;
+	public long seed;
 
 	public Packet1Login() {
 	}
 
-	public Packet1Login(String var1, int var2, WorldType var3, int var4, int var5, byte var6, byte var7, byte var8) {
+	public Packet1Login(String var1, int var2, WorldType var3, int var4, int var5, byte var6, byte var7, byte var8, long var9) {
 		this.username = var1;
 		this.protocolVersion = var2;
 		this.terrainType = var3;
@@ -26,6 +27,7 @@
 		this.serverMode = var4;
 		this.worldHeight = var7;
 		this.maxPlayers = var8;
+		this.seed = var9;
 	}
 
 	public void readPacketData(DataInputStream var1) throws IOException {
@@ -42,6 +44,7 @@
 		this.difficultySetting = var1.readByte();
 		this.worldHeight = var1.readByte();
 		this.maxPlayers = var1.readByte();
+		this.seed = var1.readLong();
 	}
 
 	public void writePacketData(DataOutputStream var1) throws IOException {
@@ -58,6 +61,7 @@
 		var1.writeByte(this.difficultySetting);
 		var1.writeByte(this.worldHeight);
 		var1.writeByte(this.maxPlayers);
+		var1.writeLong(this.seed);
 	}
 
 	public void processPacket(NetHandler var1) {
@@ -70,6 +74,6 @@
 			var1 = this.terrainType.func_48449_a().length();
 		}
 
-		return 4 + this.username.length() + 4 + 7 + 7 + var1;
+		return 4 + this.username.length() + 4 + 7 + 7 + 8 + var1;
 	}
 }
--- /dev/null
+++ net/minecraft/src/GenLayerMoreIslands.java
@@ -1,0 +1,35 @@
+package net.minecraft.src;
+
+public class GenLayerMoreIslands extends GenLayer {
+	public GenLayerMoreIslands(long var1, GenLayer var3) {
+		super(var1);
+		this.parent = var3;
+	}
+
+	public int[] getInts(int var1, int var2, int var3, int var4) {
+		int var5 = var1 - 1;
+		int var6 = var2 - 1;
+		int var7 = var3 + 2;
+		int var8 = var4 + 2;
+		int[] var9 = this.parent.getInts(var5, var6, var7, var8);
+		int[] var10 = IntCache.getIntCache(var3 * var4);
+
+		for(int var11 = 0; var11 < var4; ++var11) {
+			for(int var12 = 0; var12 < var3; ++var12) {
+				int var13 = var9[var12 + 0 + (var11 + 0) * var7];
+				int var14 = var9[var12 + 2 + (var11 + 0) * var7];
+				int var15 = var9[var12 + 0 + (var11 + 2) * var7];
+				int var16 = var9[var12 + 2 + (var11 + 2) * var7];
+				int var17 = var9[var12 + 1 + (var11 + 1) * var7];
+				this.initChunkSeed((long)(var12 + var1), (long)(var11 + var2));
+				if(var17 == 0 && var13 == 0 && var14 == 0 && var15 == 0 && var16 == 0 && this.nextInt(50) == 0) {
+					var10[var12 + var11 * var3] = 1;
+				} else {
+					var10[var12 + var11 * var3] = var17;
+				}
+			}
+		}
+
+		return var10;
+	}
+}
--- /dev/null
+++ net/minecraft/src/GenLayerBlur.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+public class GenLayerBlur extends GenLayer {
+	public GenLayerBlur(GenLayer genLayer) {
+        super(0L);
+        this.parent = genLayer;
+    }
+
+	public int[] getInts(int var1, int var2, int var3, int var4) {
+		int[] source = this.parent.getInts(var1 - 1, var2 - 1, var3 + 2, var4 + 2);
+		int[] dest = IntCache.getIntCache(var3 * var4);
+
+		for (int z = 0; z < var4; z++) {
+			for (int x = 0; x < var3; x++) {
+				int points = 0;
+				int sum = 0;
+				for (int zz = z - 1; zz <= z + 1; zz++) {
+					for (int xx = x - 1; xx <= x + 1; xx++) {
+						if (zz < -1 || zz > var3 || xx < -1 || xx > var4) {
+							continue;
+						}
+
+						sum += source[(zz + 1) * (var3 + 2) + (xx + 1)];
+						points++;
+					}
+				}
+
+				if (points > 0) {
+					dest[z * var3 + x] = sum / points;
+				} else {
+					dest[z * var3 + x] = source[(z + 1) * (var3 + 2) + (x + 1)];
+				}
+			}
+		}
+
+		return dest;
+	}
+}
--- net/minecraft/src/EntityCreature.java
+++ net/minecraft/src/EntityCreature.java
@@ -195,7 +195,7 @@
 			return 1.0F;
 		} else {
 			float var1 = super.getSpeedModifier();
-			if(this.fleeingTick > 0) {
+			if(this.fleeingTick > 0 && this.onGround) {
 				var1 *= 2.0F;
 			}
 
--- /dev/null
+++ net/minecraft/src/EnchantmentStamina.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+public class EnchantmentStamina extends Enchantment {
+	protected EnchantmentStamina(int var1, int var2) {
+		super(var1, var2, EnumEnchantmentType.armor_legs);
+		this.setName("stamina");
+	}
+
+	public int getMinEnchantability(int var1) {
+		return 5 + 18 * (var1 - 1);
+	}
+
+	public int getMaxEnchantability(int var1) {
+		return super.getMinEnchantability(var1) + 50;
+	}
+
+	public int getMaxLevel() {
+		return 3;
+	}
+
+	public boolean canApplyTogether(Enchantment var1) {
+		return super.canApplyTogether(var1) && !(var1 instanceof EnchantmentVelocity);
+	}
+}
--- net/minecraft/src/EntityAnimal.java
+++ net/minecraft/src/EntityAnimal.java
@@ -190,7 +190,7 @@
 	}
 
 	protected boolean canDespawn() {
-		return false;
+		return this.worldObj.getWorldInfo().isClassicModeEnabled();
 	}
 
 	protected int getExperiencePoints(EntityPlayer var1) {
--- net/minecraft/src/EntityDragon.java
+++ net/minecraft/src/EntityDragon.java
@@ -259,7 +259,7 @@
 				this.func_41033_v();
 			}
 
-			if(!this.worldObj.isRemote && this.maxHurtTime == 0) {
+			if(!this.worldObj.isRemote) {
 				this.collideWithEntities(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartWing1.boundingBox.expand(4.0D, 2.0D, 4.0D).offset(0.0D, -2.0D, 0.0D)));
 				this.collideWithEntities(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartWing2.boundingBox.expand(4.0D, 2.0D, 4.0D).offset(0.0D, -2.0D, 0.0D)));
 				this.attackEntitiesInList(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartHead.boundingBox.expand(1.0D, 1.0D, 1.0D)));
@@ -469,7 +469,7 @@
 
 		int var4;
 		int var5;
-		if(!this.worldObj.isRemote && this.field_40158_r > 150 && this.field_40158_r % 5 == 0) {
+		if(!this.worldObj.isRemote && this.field_40158_r > 150 && this.field_40158_r % 5 == 0 && !this.worldObj.getWorldInfo().isClassicModeEnabled()) {
 			var4 = 1000;
 
 			while(var4 > 0) {
@@ -481,7 +481,7 @@
 
 		this.moveEntity(0.0D, (double)0.1F, 0.0D);
 		this.renderYawOffset = this.rotationYaw += 20.0F;
-		if(this.field_40158_r == 200) {
+		if(this.field_40158_r == 200 && !this.worldObj.getWorldInfo().isClassicModeEnabled()) {
 			var4 = 10000;
 
 			while(var4 > 0) {
--- net/minecraft/src/ComponentStrongholdPrison.java
+++ net/minecraft/src/ComponentStrongholdPrison.java
@@ -4,6 +4,8 @@
 import java.util.Random;
 
 public class ComponentStrongholdPrison extends ComponentStronghold {
+	private boolean hasSpawner1;
+	private boolean hasSpawner2;
 	protected final EnumDoor doorType;
 
 	public ComponentStrongholdPrison(int var1, Random var2, StructureBoundingBox var3, int var4) {
@@ -11,6 +13,8 @@
 		this.coordBaseMode = var4;
 		this.doorType = this.getRandomDoor(var2);
 		this.boundingBox = var3;
+		this.hasSpawner1 = var2.nextInt(2) == 0;
+		this.hasSpawner2 = var2.nextInt(2) == 0;
 	}
 
 	public void buildComponent(StructureComponent var1, List var2, Random var3) {
@@ -41,6 +45,34 @@
 			this.placeBlockAtCurrentPosition(var1, Block.doorSteel.blockID, this.getMetadataWithOffset(Block.doorSteel.blockID, 3) + 8, 4, 2, 2, var3);
 			this.placeBlockAtCurrentPosition(var1, Block.doorSteel.blockID, this.getMetadataWithOffset(Block.doorSteel.blockID, 3), 4, 1, 8, var3);
 			this.placeBlockAtCurrentPosition(var1, Block.doorSteel.blockID, this.getMetadataWithOffset(Block.doorSteel.blockID, 3) + 8, 4, 2, 8, var3);
+
+			if (!this.hasSpawner1) {
+				int sx = this.getXWithOffset(6, 3);
+				int sy = this.getYWithOffset(1);
+				int sz = this.getZWithOffset(6, 3);
+				if (var3.isVecInside(sx, sy, sz)) {
+					this.hasSpawner1 = true;
+					var1.setBlockWithNotify(sx, sy, sz, Block.mobSpawner.blockID);
+					TileEntityMobSpawner spawner = (TileEntityMobSpawner) var1.getBlockTileEntity(sx, sy, sz);
+					if (spawner != null) {
+						spawner.setMobID("Zombie");
+					}
+				}
+			}
+
+			if (!this.hasSpawner2) {
+				int sx = this.getXWithOffset(6, 7);
+				int sy = this.getYWithOffset(1);
+				int sz = this.getZWithOffset(6, 7);
+				if (var3.isVecInside(sx, sy, sz)) {
+					this.hasSpawner2 = true;
+					var1.setBlockWithNotify(sx, sy, sz, Block.mobSpawner.blockID);
+					TileEntityMobSpawner spawner = (TileEntityMobSpawner) var1.getBlockTileEntity(sx, sy, sz);
+					if (spawner != null) {
+						spawner.setMobID("Skeleton");
+					}
+				}
+			}
 			return true;
 		}
 	}
--- net/minecraft/src/EntityFallingSand.java
+++ net/minecraft/src/EntityFallingSand.java
@@ -66,7 +66,7 @@
 						this.dropItem(this.blockID, 1);
 					}
 				}
-			} else if(this.fallTime > 100 && !this.worldObj.isRemote && (var2 < 1 || var2 > 256) || this.fallTime > 600) {
+			} else if(this.fallTime > 100 && !this.worldObj.isRemote && var2 < 1 || this.fallTime > 600) {
 				this.dropItem(this.blockID, 1);
 				this.setDead();
 			}
--- net/minecraft/src/WorldGenSwamp.java
+++ net/minecraft/src/WorldGenSwamp.java
@@ -3,6 +3,14 @@
 import java.util.Random;
 
 public class WorldGenSwamp extends WorldGenerator {
+	public WorldGenSwamp() {
+		super();
+	}
+
+	public WorldGenSwamp(boolean var1) {
+		super(var1);
+	}
+
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
 		int var6;
 		for(var6 = var2.nextInt(4) + 5; var1.getBlockMaterial(var3, var4 - 1, var5) == Material.water; --var4) {
--- net/minecraft/src/EntitySpider.java
+++ net/minecraft/src/EntitySpider.java
@@ -26,7 +26,7 @@
 	}
 
 	public int getMaxHealth() {
-		return 16;
+		return this.worldObj != null && this.worldObj.getWorldInfo().isHardcoreModeEnabled() ? 24 : 16;
 	}
 
 	public double getMountedYOffset() {
--- net/minecraft/src/CraftingManager.java
+++ net/minecraft/src/CraftingManager.java
@@ -23,7 +23,10 @@
 		(new RecipesDyes()).addRecipes(this);
 		this.addRecipe(new ItemStack(Item.paper, 3), new Object[]{"###", Character.valueOf('#'), Item.reed});
 		this.addRecipe(new ItemStack(Item.book, 1), new Object[]{"#", "#", "#", Character.valueOf('#'), Item.paper});
-		this.addRecipe(new ItemStack(Block.fence, 2), new Object[]{"###", "###", Character.valueOf('#'), Item.stick});
+		this.addRecipe(new ItemStack(Block.fence, 3, 0), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 0)});
+		this.addRecipe(new ItemStack(Block.fence, 3, 1), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 1)});
+		this.addRecipe(new ItemStack(Block.fence, 3, 2), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 2)});
+		this.addRecipe(new ItemStack(Block.fence, 3, 3), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 3)});
 		this.addRecipe(new ItemStack(Block.netherFence, 6), new Object[]{"###", "###", Character.valueOf('#'), Block.netherBrick});
 		this.addRecipe(new ItemStack(Block.fenceGate, 1), new Object[]{"#W#", "#W#", Character.valueOf('#'), Item.stick, Character.valueOf('W'), Block.planks});
 		this.addRecipe(new ItemStack(Block.jukebox, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.diamond});
@@ -38,9 +41,13 @@
 		this.addRecipe(new ItemStack(Block.stairSingle, 6, 3), new Object[]{"###", Character.valueOf('#'), Block.cobblestone});
 		this.addRecipe(new ItemStack(Block.stairSingle, 6, 0), new Object[]{"###", Character.valueOf('#'), Block.stone});
 		this.addRecipe(new ItemStack(Block.stairSingle, 6, 1), new Object[]{"###", Character.valueOf('#'), Block.sandStone});
-		this.addRecipe(new ItemStack(Block.stairSingle, 6, 2), new Object[]{"###", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Block.stairSingle, 6, 4), new Object[]{"###", Character.valueOf('#'), Block.brick});
 		this.addRecipe(new ItemStack(Block.stairSingle, 6, 5), new Object[]{"###", Character.valueOf('#'), Block.stoneBrick});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 6), new Object[]{"###", Character.valueOf('#'), Block.netherBrick});
+		this.addRecipe(new ItemStack(Block.woodStairSingle, 6, 0), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 0)});
+		this.addRecipe(new ItemStack(Block.woodStairSingle, 6, 1), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 1)});
+		this.addRecipe(new ItemStack(Block.woodStairSingle, 6, 2), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 2)});
+		this.addRecipe(new ItemStack(Block.woodStairSingle, 6, 3), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 3)});
 		this.addRecipe(new ItemStack(Block.ladder, 3), new Object[]{"# #", "###", "# #", Character.valueOf('#'), Item.stick});
 		this.addRecipe(new ItemStack(Item.doorWood, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Block.trapdoor, 2), new Object[]{"###", "###", Character.valueOf('#'), Block.planks});
@@ -70,12 +77,16 @@
 		this.addRecipe(new ItemStack(Item.bucketEmpty, 1), new Object[]{"# #", " # ", Character.valueOf('#'), Item.ingotIron});
 		this.addRecipe(new ItemStack(Item.flintAndSteel, 1), new Object[]{"A ", " B", Character.valueOf('A'), Item.ingotIron, Character.valueOf('B'), Item.flint});
 		this.addRecipe(new ItemStack(Item.bread, 1), new Object[]{"###", Character.valueOf('#'), Item.wheat});
-		this.addRecipe(new ItemStack(Block.stairCompactPlanks, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planks});
+		this.addRecipe(new ItemStack(Block.stairCompactPlanks, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 0)});
+		this.addRecipe(new ItemStack(Block.stairsSpruce, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 1)});
+		this.addRecipe(new ItemStack(Block.stairsBirch, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 2)});
+		this.addRecipe(new ItemStack(Block.stairsJungle, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 3)});
 		this.addRecipe(new ItemStack(Item.fishingRod, 1), new Object[]{"  #", " #X", "# X", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.silk});
-		this.addRecipe(new ItemStack(Block.stairCompactCobblestone, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.cobblestone});
-		this.addRecipe(new ItemStack(Block.stairsBrick, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.brick});
-		this.addRecipe(new ItemStack(Block.stairsStoneBrickSmooth, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.stoneBrick});
-		this.addRecipe(new ItemStack(Block.stairsNetherBrick, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.netherBrick});
+		this.addRecipe(new ItemStack(Block.stairCompactCobblestone, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.cobblestone});
+		this.addRecipe(new ItemStack(Block.stairsBrick, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.brick});
+		this.addRecipe(new ItemStack(Block.stairsStoneBrickSmooth, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.stoneBrick});
+		this.addRecipe(new ItemStack(Block.stairsNetherBrick, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.netherBrick});
+		this.addRecipe(new ItemStack(Block.stairsSandstone, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.sandStone});
 		this.addRecipe(new ItemStack(Item.painting, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Block.cloth});
 		this.addRecipe(new ItemStack(Item.appleGold, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.goldNugget, Character.valueOf('X'), Item.appleRed});
 		this.addRecipe(new ItemStack(Block.lever, 1), new Object[]{"X", "#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.stick});
@@ -84,7 +95,7 @@
 		this.addRecipe(new ItemStack(Item.pocketSundial, 1), new Object[]{" # ", "#X#", " # ", Character.valueOf('#'), Item.ingotGold, Character.valueOf('X'), Item.redstone});
 		this.addRecipe(new ItemStack(Item.compass, 1), new Object[]{" # ", "#X#", " # ", Character.valueOf('#'), Item.ingotIron, Character.valueOf('X'), Item.redstone});
 		this.addRecipe(new ItemStack(Item.map, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.paper, Character.valueOf('X'), Item.compass});
-		this.addRecipe(new ItemStack(Block.button, 1), new Object[]{"#", "#", Character.valueOf('#'), Block.stone});
+		this.addRecipe(new ItemStack(Block.button, 1), new Object[]{"#", Character.valueOf('#'), Block.stone});
 		this.addRecipe(new ItemStack(Block.pressurePlateStone, 1), new Object[]{"##", Character.valueOf('#'), Block.stone});
 		this.addRecipe(new ItemStack(Block.pressurePlatePlanks, 1), new Object[]{"##", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Block.dispenser, 1), new Object[]{"###", "#X#", "#R#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.bow, Character.valueOf('R'), Item.redstone});
--- net/minecraft/src/ComponentVillageWoodHut.java
+++ net/minecraft/src/ComponentVillageWoodHut.java
@@ -35,7 +35,7 @@
 		}
 
 		this.fillWithBlocks(var1, var3, 1, 1, 1, 3, 5, 4, 0, 0, false);
-		this.fillWithBlocks(var1, var3, 0, 0, 0, 3, 0, 4, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 0, 0, 3, 0, 4, false, var2, StructureVillagePieces.villageStones);
 		this.fillWithBlocks(var1, var3, 1, 0, 1, 2, 0, 3, Block.dirt.blockID, Block.dirt.blockID, false);
 		if(this.isTallHouse) {
 			this.fillWithBlocks(var1, var3, 1, 4, 1, 2, 4, 3, Block.wood.blockID, Block.wood.blockID, false);
--- /dev/null
+++ net/minecraft/src/GenLayerDownfallMix.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+public class GenLayerDownfallMix extends GenLayer {
+    private GenLayer otherParent;
+    private int strength;
+
+    public GenLayerDownfallMix(GenLayer genLayer, GenLayer genLayer2, int strength) {
+        super(0L);
+        this.parent = genLayer2;
+        this.otherParent = genLayer;
+        this.strength = strength;
+    }
+
+    public int[] getInts(int n, int n2, int n3, int n4) {
+        int[] nArray = this.parent.getInts(n, n2, n3, n4);
+        int[] nArray2 = this.otherParent.getInts(n, n2, n3, n4);
+        int[] nArray3 = IntCache.getIntCache(n3 * n4);
+        for (int i = 0; i < n3 * n4; ++i) {
+            nArray3[i] = nArray2[i] + (BiomeGenBase.biomeList[nArray[i]].getIntRainfall() - nArray2[i]) / (this.strength + 1);
+        }
+        return nArray3;
+    }
+}
--- net/minecraft/src/BiomeGenRiver.java
+++ net/minecraft/src/BiomeGenRiver.java
@@ -4,5 +4,9 @@
 	public BiomeGenRiver(int var1) {
 		super(var1);
 		this.spawnableCreatureList.clear();
+		this.biomeDecorator.flowersPerChunk = 0;
+		this.biomeDecorator.grassPerChunk = 0;
+		this.biomeDecorator.reedsPerChunk = 10;
+		this.setColor(255);
 	}
 }
--- /dev/null
+++ net/minecraft/src/BiomeGenSnowcappedHills.java
@@ -1,0 +1,59 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenSnowcappedHills extends BiomeGenBase {
+	private static final NoiseGeneratorSimplexOctaves snowNoise
+		    = new NoiseGeneratorSimplexOctaves(new Random(1234L), 1);
+
+	protected BiomeGenSnowcappedHills(int var1) {
+		super(var1);
+		this.biomeDecorator.treesPerChunk = 0;
+		this.biomeDecorator.grassPerChunk = 3;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(3) != 0
+				? (var1.nextInt(3) == 0 ? new WorldGenTaiga1() : new WorldGenTaiga2(false))
+				: (var1.nextInt(5) == 0 ? this.worldGenBigTree : this.worldGenTrees);
+	}
+
+	public void decorate(World var1, Random var2, int var3, int var4) {
+		this.biomeDecorator.treesPerChunk = doHills(var3, var4) ? 3 : 0;
+		super.decorate(var1, var2, var3, var4);
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, int topTerrainHeight, double erosionValue, double simplexValue) {
+		if (doMutation((x + random.nextInt(4)) >> 2, (z + random.nextInt(4)) >> 2) && (erosionValue < -1.0D || erosionValue > 2.0D)) {
+			this.topBlock = this.fillerBlock = (byte)Block.gravel.blockID;
+		} else if (erosionValue > 1.0D) {
+			this.topBlock = this.fillerBlock = (byte)Block.stone.blockID;
+		} else {
+			this.topBlock = (byte)Block.grass.blockID;
+			this.fillerBlock = (byte)Block.dirt.blockID;
+		}
+
+		super.buildBiomeSurface(world, random, blocks, metadata, x, z, topTerrainHeight, erosionValue, simplexValue);
+
+		int height = blocks.length / 256;
+		int chunkX = x & 15;
+		int chunkZ = z & 15;
+
+		float tempOffset = (float)snowNoise.func_151601_a(x / 8.0D, z / 8.0D) * 4.0F;
+		for (int y = Math.min(topTerrainHeight + 1, height - 1),
+		         i = chunkX * 16 * height + chunkZ * height + y;
+				 y > 64; y--, i--) {
+			if (blocks[i] != 0 && y == height - 1) {
+				return;
+			}
+
+			if (blocks[i] == 0 && blocks[i - 1] != 0) {
+				float temp = 0.21F - (tempOffset + y - 64.0F) * 0.05F / 30.0F;
+				if (temp <= 0.15F) {
+					blocks[i] = (byte)Block.snow.blockID;
+					return;
+				}
+			}
+		}
+	}
+}
--- net/minecraft/src/IBlockAccess.java
+++ net/minecraft/src/IBlockAccess.java
@@ -10,4 +10,8 @@
 	Material getBlockMaterial(int var1, int var2, int var3);
 
 	boolean isBlockNormalCube(int var1, int var2, int var3);
+
+	float getTemperature(int var1, int var2);
+
+	float getRainfall(int var1, int var2);
 }
--- net/minecraft/src/StructureComponent.java
+++ net/minecraft/src/StructureComponent.java
@@ -330,7 +330,7 @@
 			for(int var13 = var3; var13 <= var6; ++var13) {
 				for(int var14 = var5; var14 <= var8; ++var14) {
 					if(!var9 || this.getBlockIdAtCurrentPosition(var1, var13, var12, var14, var2) != 0) {
-						var11.selectBlocks(var10, var13, var12, var14, var12 == var4 || var12 == var7 || var13 == var3 || var13 == var6 || var14 == var5 || var14 == var8);
+						var11.selectBlocks(var1, var10, var13, var12, var14, var12 == var4 || var12 == var7 || var13 == var3 || var13 == var6 || var14 == var5 || var14 == var8);
 						this.placeBlockAtCurrentPosition(var1, var11.getSelectedBlockId(), var11.getSelectedBlockMetaData(), var13, var12, var14, var2);
 					}
 				}
@@ -395,7 +395,7 @@
 		int var7 = this.getYWithOffset(var3);
 		int var8 = this.getZWithOffset(var2, var4);
 		if(var5.isVecInside(var6, var7, var8)) {
-			while(!var1.isAirBlock(var6, var7, var8) && var7 < 255) {
+			while(!var1.isAirBlock(var6, var7, var8)) {
 				var1.setBlockAndMetadata(var6, var7, var8, 0, 0);
 				++var7;
 			}
--- net/minecraft/src/StructurePieceBlockSelector.java
+++ net/minecraft/src/StructurePieceBlockSelector.java
@@ -6,7 +6,7 @@
 	protected int selectedBlockId;
 	protected int selectedBlockMetaData;
 
-	public abstract void selectBlocks(Random var1, int var2, int var3, int var4, boolean var5);
+	public abstract void selectBlocks(World var0, Random var1, int var2, int var3, int var4, boolean var5);
 
 	public int getSelectedBlockId() {
 		return this.selectedBlockId;
--- net/minecraft/src/BiomeGenTaiga.java
+++ net/minecraft/src/BiomeGenTaiga.java
@@ -10,7 +10,22 @@
 		this.biomeDecorator.grassPerChunk = 1;
 	}
 
+	protected BiomeGenBase setEnableSnow() {
+		this.biomeDecorator.grassPerChunk = 0;
+		this.biomeDecorator.flowersPerChunk = 0;
+		this.biomeDecorator.mushroomsPerChunk = 0;
+		return super.setEnableSnow();
+	}
+
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
 		return (WorldGenerator)(var1.nextInt(3) == 0 ? new WorldGenTaiga1() : new WorldGenTaiga2(false));
+	}
+
+	public float getMinHeight(int x, int z) {
+		return super.getMinHeight(x, z) + (getHeightNoiseValue(x, z) > 0.0D ? 0.4F : 0.0F);
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return super.getMaxHeight(x, z) + (getHeightNoiseValue(x, z) > 0.0D ? 0.1F : 0.0F);
 	}
 }
--- net/minecraft/src/Chunk.java
+++ net/minecraft/src/Chunk.java
@@ -23,15 +23,17 @@
 	public Map chunkTileEntityMap;
 	public List[] entityLists;
 	public boolean isTerrainPopulated;
+	public boolean isLightPopulated;
 	public boolean isModified;
 	public boolean hasEntities;
 	public long lastSaveTime;
 	public boolean field_50025_o;
 	private int queuedLightChecks;
+	public int heightMapMinimum;
 	boolean field_35638_u;
 
 	public Chunk(World var1, int var2, int var3) {
-		this.storageArrays = new ExtendedBlockStorage[16];
+		this.storageArrays = new ExtendedBlockStorage[4];
 		this.blockBiomeArray = new byte[256];
 		this.precipitationHeightMap = new int[256];
 		this.updateSkylightColumns = new boolean[256];
@@ -44,7 +46,7 @@
 		this.field_50025_o = false;
 		this.queuedLightChecks = 4096;
 		this.field_35638_u = false;
-		this.entityLists = new List[16];
+		this.entityLists = new List[4];
 		this.worldObj = var1;
 		this.xPosition = var2;
 		this.zPosition = var3;
@@ -59,20 +61,31 @@
 	}
 
 	public Chunk(World var1, byte[] var2, int var3, int var4) {
+		this(var1, var2, null, var3, var4);
+	}
+
+	public Chunk(World var1, byte[] var2, byte[] var2a, int var3, int var4) {
 		this(var1, var3, var4);
 		int var5 = var2.length / 256;
+		int height = var2.length >> 8;
 
 		for(int var6 = 0; var6 < 16; ++var6) {
 			for(int var7 = 0; var7 < 16; ++var7) {
-				for(int var8 = 0; var8 < var5; ++var8) {
-					byte var9 = var2[var6 << 11 | var7 << 7 | var8];
+				for(int var8 = var5 - 1; var8 > 0; --var8) {
+					int offset = var6 * 16 * height + var7 * height + var8;
+					byte var9 = var2[offset];
 					if(var9 != 0) {
+						byte var9a = var2a != null ? var2a[offset] : 0;
 						int var10 = var8 >> 4;
+						if(var10 >= this.storageArrays.length) {
+							this.resizeStorage(var10 + 1);
+						}
 						if(this.storageArrays[var10] == null) {
 							this.storageArrays[var10] = new ExtendedBlockStorage(var10 << 4);
 						}
 
 						this.storageArrays[var10].setExtBlockID(var6, var8 & 15, var7, var9);
+						this.storageArrays[var10].setExtBlockMetadata(var6, var8 & 15, var7, var9a);
 					}
 				}
 			}
@@ -103,50 +116,46 @@
 	}
 
 	public void generateSkylightMap() {
-		int var1 = this.getTopFilledSegment();
-
-		int var2;
-		int var3;
-		for(var2 = 0; var2 < 16; ++var2) {
-			for(var3 = 0; var3 < 16; ++var3) {
-				this.precipitationHeightMap[var2 + (var3 << 4)] = -999;
-
-				int var4;
-				for(var4 = var1 + 16 - 1; var4 > 0; --var4) {
-					if(this.getBlockLightOpacity(var2, var4 - 1, var3) != 0) {
-						this.heightMap[var3 << 4 | var2] = var4;
-						break;
-					}
-				}
-
-				if(!this.worldObj.worldProvider.hasNoSky) {
-					var4 = 15;
-					int var5 = var1 + 16 - 1;
-
-					do {
-						var4 -= this.getBlockLightOpacity(var2, var5, var3);
-						if(var4 > 0) {
-							ExtendedBlockStorage var6 = this.storageArrays[var5 >> 4];
-							if(var6 != null) {
-								var6.setExtSkylightValue(var2, var5 & 15, var3, var4);
-								this.worldObj.func_48086_o((this.xPosition << 4) + var2, var5, (this.zPosition << 4) + var3);
-							}
-						}
-
-						--var5;
-					} while(var5 > 0 && var4 > 0);
-				}
-			}
-		}
-
-		this.isModified = true;
-
-		for(var2 = 0; var2 < 16; ++var2) {
-			for(var3 = 0; var3 < 16; ++var3) {
-				this.propagateSkylightOcclusion(var2, var3);
-			}
-		}
-
+	    int i = this.getTopFilledSegment();
+	    this.heightMapMinimum = Integer.MAX_VALUE;
+	    for (int j = 0; j < 16; ++j) {
+	        for (int k = 0; k < 16; ++k) {
+	            this.precipitationHeightMap[j + (k << 4)] = -999;
+	            for (int l = i + 16; l > 0; --l) {
+	                if (this.getBlockLightOpacity(j, l - 1, k) != 0) {
+	                    this.heightMap[k << 4 | j] = l;
+	                    if (l < this.heightMapMinimum) {
+	                        this.heightMapMinimum = l;
+	                    }
+	                    break;
+	                }
+	            }
+	            if (!this.worldObj.worldProvider.hasNoSky) {
+	                int k1 = 15;
+	                int i1 = i + 16 - 1;
+	                while (true) {
+	                    int j1 = this.getBlockLightOpacity(j, i1, k);
+	                    if (j1 == 0 && k1 != 15) {
+	                        j1 = 1;
+	                    }
+	                    k1 -= j1;
+	                    if (k1 > 0) {
+	                        ExtendedBlockStorage extendedblockstorage = this.storageArrays[i1 >> 4];
+	                        if (extendedblockstorage != null) {
+	                            extendedblockstorage.setExtSkylightValue(j, i1 & 15, k, k1);
+	                            this.worldObj.markBlockAsNeedsUpdate(
+	                                    (this.xPosition << 4) + j, i1, (this.zPosition << 4) + k);
+	                        }
+	                    }
+	                    --i1;
+	                    if (i1 <= 0 || k1 <= 0) {
+	                        break;
+	                    }
+	                }
+	            }
+	        }
+	    }
+	    this.isModified = true;
 	}
 
 	public void func_4053_c() {
@@ -157,7 +166,7 @@
 		this.isGapLightingUpdated = true;
 	}
 
-	private void updateSkylight_do() {
+	private void recheckGaps(boolean var0) {
 		Profiler.startSection("recheckGaps");
 		if(this.worldObj.doChunksNearChunkExist(this.xPosition * 16 + 8, 0, this.zPosition * 16 + 8, 16)) {
 			for(int var1 = 0; var1 < 16; ++var1) {
@@ -167,27 +176,22 @@
 						int var3 = this.getHeightValue(var1, var2);
 						int var4 = this.xPosition * 16 + var1;
 						int var5 = this.zPosition * 16 + var2;
-						int var6 = this.worldObj.getHeightValue(var4 - 1, var5);
-						int var7 = this.worldObj.getHeightValue(var4 + 1, var5);
-						int var8 = this.worldObj.getHeightValue(var4, var5 - 1);
-						int var9 = this.worldObj.getHeightValue(var4, var5 + 1);
-						if(var7 < var6) {
-							var6 = var7;
-						}
-
-						if(var8 < var6) {
-							var6 = var8;
-						}
-
-						if(var9 < var6) {
-							var6 = var9;
-						}
+						int var6 = Integer.MAX_VALUE;
+						var6 = Math.min(var6, this.worldObj.getMinHeightValue(var4 - 1, var5));
+						var6 = Math.min(var6, this.worldObj.getMinHeightValue(var4 + 1, var5));
+						var6 = Math.min(var6, this.worldObj.getMinHeightValue(var4, var5 - 1));
+						var6 = Math.min(var6, this.worldObj.getMinHeightValue(var4, var5 + 1));
 
 						this.checkSkylightNeighborHeight(var4, var5, var6);
 						this.checkSkylightNeighborHeight(var4 - 1, var5, var3);
 						this.checkSkylightNeighborHeight(var4 + 1, var5, var3);
 						this.checkSkylightNeighborHeight(var4, var5 - 1, var3);
 						this.checkSkylightNeighborHeight(var4, var5 + 1, var3);
+
+						if (var0) {
+							Profiler.endSection();
+							return;
+						}
 					}
 				}
 			}
@@ -286,6 +290,10 @@
 				var13 = var4;
 			}
 
+			if (var8 < this.heightMapMinimum) {
+				this.heightMapMinimum = var8;
+			}
+
 			if(!this.worldObj.worldProvider.hasNoSky) {
 				this.updateSkylightNeighborHeight(var6 - 1, var7, var12, var13);
 				this.updateSkylightNeighborHeight(var6 + 1, var7, var12, var13);
@@ -325,6 +333,13 @@
 	}
 
 	public boolean setBlockIDWithMetadata(int var1, int var2, int var3, int var4, int var5) {
+		if ((var2 + 4) >> 4 >= this.storageArrays.length) {
+			if (var4 == 0) {
+				return false;
+			}
+			this.resizeStorage(((var2 + 4) >> 4) + 1);
+		}
+
 		int var6 = var3 << 4 | var1;
 		if(var2 >= this.precipitationHeightMap[var6] - 1) {
 			this.precipitationHeightMap[var6] = -999;
@@ -372,7 +387,11 @@
 						this.relightBlock(var1, var2, var3);
 					}
 
-					this.propagateSkylightOcclusion(var1, var3);
+					if(Block.lightOpacity[var8 & 4095] != Block.lightOpacity[var4 & 4095]
+							|| this.getSavedLightValue(EnumSkyBlock.Sky, var1, var2, var3) > 0
+							|| this.getSavedLightValue(EnumSkyBlock.Block, var1, var2, var3) > 0) {
+						this.propagateSkylightOcclusion(var1, var3);
+					}
 				}
 
 				TileEntity var13;
@@ -431,11 +450,19 @@
 	}
 
 	public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
+		if (var3 >> 4 >= this.storageArrays.length) {
+			return var1.defaultLightValue;
+		}
+
 		ExtendedBlockStorage var5 = this.storageArrays[var3 >> 4];
 		return var5 == null ? var1.defaultLightValue : (var1 == EnumSkyBlock.Sky ? var5.getExtSkylightValue(var2, var3 & 15, var4) : (var1 == EnumSkyBlock.Block ? var5.getExtBlocklightValue(var2, var3 & 15, var4) : var1.defaultLightValue));
 	}
 
 	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
+		if (var3 >> 4 >= this.storageArrays.length) {
+			return;
+		}
+
 		ExtendedBlockStorage var6 = this.storageArrays[var3 >> 4];
 		if(var6 == null) {
 			var6 = this.storageArrays[var3 >> 4] = new ExtendedBlockStorage(var3 >> 4 << 4);
@@ -458,6 +485,10 @@
 	}
 
 	public int getBlockLightValue(int var1, int var2, int var3, int var4) {
+		if (var2 >> 4 >= this.storageArrays.length) {
+			return Math.max(15 - var4, 0);
+		}
+
 		ExtendedBlockStorage var5 = this.storageArrays[var2 >> 4];
 		if(var5 == null) {
 			return !this.worldObj.worldProvider.hasNoSky && var4 < EnumSkyBlock.Sky.defaultLightValue ? EnumSkyBlock.Sky.defaultLightValue - var4 : 0;
@@ -751,9 +782,12 @@
 
 	public void updateSkylight() {
 		if(this.isGapLightingUpdated && !this.worldObj.worldProvider.hasNoSky) {
-			this.updateSkylight_do();
+			this.recheckGaps(this.worldObj.isRemote);
 		}
 
+		if (!this.worldObj.fastLighting && !this.isLightPopulated && this.isTerrainPopulated) {
+			this.populateLighting();
+		}
 	}
 
 	public ChunkCoordIntPair getChunkCoordIntPair() {
@@ -761,15 +795,11 @@
 	}
 
 	public boolean getAreLevelsEmpty(int var1, int var2) {
-		if(var1 < 0) {
-			var1 = 0;
-		}
-
-		if(var2 >= 256) {
-			var2 = 255;
-		}
-
 		for(int var3 = var1; var3 <= var2; var3 += 16) {
+			if (var3 < 0 || var3 >> 4 >= this.storageArrays.length) {
+				continue;
+			}
+
 			ExtendedBlockStorage var4 = this.storageArrays[var3 >> 4];
 			if(var4 != null && !var4.getIsEmpty()) {
 				return false;
@@ -781,6 +811,11 @@
 
 	public void setStorageArrays(ExtendedBlockStorage[] var1) {
 		this.storageArrays = var1;
+		int height = var1.length;
+		while (height > 0 && (var1[height - 1] == null || var1[height - 1].getIsEmpty())) {
+			height--;
+		}
+		this.resizeStorage(height);
 	}
 
 	public BiomeGenBase func_48560_a(int var1, int var2, WorldChunkManager var3) {
@@ -851,5 +886,121 @@
 			}
 		}
 
+	}
+
+	public void populateLighting() {
+		Profiler.startSection("populateLighting");
+        this.isTerrainPopulated = true;
+        this.isLightPopulated = true;
+
+        if (!this.worldObj.worldProvider.hasNoSky) {
+            if (this.worldObj.checkChunksExist(this.xPosition * 16 - 1, 0, this.zPosition * 16 - 1,
+                    this.xPosition * 16 + 1, this.worldObj.getSeaLevel(), this.zPosition * 16 + 1)) {
+                for (int var1 = 0; var1 < 16; ++var1) {
+                    for (int var2 = 0; var2 < 16; ++var2) {
+                        if (!this.populateLight(var1, var2)) {
+                            this.isLightPopulated = false;
+                            break;
+                        }
+                    }
+                }
+
+                if (this.isLightPopulated) {
+                    Chunk var3 = this.worldObj.getChunkFromBlockCoords(this.xPosition * 16 - 1, this.zPosition * 16);
+                    var3.populateLightNeighbor(3);
+                    var3 = this.worldObj.getChunkFromBlockCoords(this.xPosition * 16 + 16, this.zPosition * 16);
+                    var3.populateLightNeighbor(1);
+                    var3 = this.worldObj.getChunkFromBlockCoords(this.xPosition * 16, this.zPosition * 16 - 1);
+                    var3.populateLightNeighbor(0);
+                    var3 = this.worldObj.getChunkFromBlockCoords(this.xPosition * 16, this.zPosition * 16 + 16);
+                    var3.populateLightNeighbor(2);
+
+	                Arrays.fill(this.updateSkylightColumns, true);
+			        this.recheckGaps(false);
+                }
+            } else {
+                this.isLightPopulated = false;
+            }
+        }
+		Profiler.endSection();
+    }
+
+    private void populateLightNeighbor(int var1) {
+        if (this.isTerrainPopulated) {
+            int var2;
+
+            if (var1 == 3) {
+                for (var2 = 0; var2 < 16; ++var2) {
+                    this.populateLight(15, var2);
+                }
+            } else if (var1 == 1) {
+                for (var2 = 0; var2 < 16; ++var2) {
+                    this.populateLight(0, var2);
+                }
+            } else if (var1 == 0) {
+                for (var2 = 0; var2 < 16; ++var2) {
+                    this.populateLight(var2, 15);
+                }
+            } else if (var1 == 2) {
+                for (var2 = 0; var2 < 16; ++var2) {
+                    this.populateLight(var2, 0);
+                }
+            }
+        }
+    }
+
+    private boolean populateLight(int x, int y) {
+        int var3 = this.getTopFilledSegment();
+        boolean var4 = false;
+        boolean var5 = false;
+        int var6;
+
+        for (var6 = var3 + 16 - 1; var6 > this.worldObj.getSeaLevel() || var6 > 0 && !var5; --var6) {
+            int var7 = this.getBlockLightOpacity(x, var6, y);
+
+            if (var7 == 255 && var6 < this.worldObj.getSeaLevel()) {
+                var5 = true;
+            }
+
+            if (!var4 && var7 > 0) {
+                var4 = true;
+            } else if (var4 && var7 == 0 && !this.worldObj.updateAllLightTypes(this.xPosition * 16 + x, var6,
+                    this.zPosition * 16 + y)) {
+                return false;
+            }
+        }
+
+        for (; var6 > 0; --var6) {
+            if (Block.lightValue[this.getBlockID(x, var6, y)] > 0) {
+                this.worldObj.updateAllLightTypes(this.xPosition * 16 + x, var6, this.zPosition * 16 + y);
+            }
+        }
+
+        return true;
+}
+
+
+	public int getMaxHeight() {
+		return this.storageArrays.length << 4;
+	}
+
+	public void resizeStorage(int size) {
+		if (size != this.storageArrays.length) {
+			ExtendedBlockStorage[] newStorageArrays = new ExtendedBlockStorage[size];
+			System.arraycopy(this.storageArrays, 0, newStorageArrays, 0, Math.min(this.storageArrays.length, size));
+			this.storageArrays = newStorageArrays;
+		}
+
+		if (size != this.entityLists.length) {
+			List[] newEntityLists = new List[size];
+			System.arraycopy(this.entityLists, 0, newEntityLists, 0, Math.min(this.entityLists.length, size));
+			this.entityLists = newEntityLists;
+
+			for (int i = 0; i < this.entityLists.length; i++) {
+				if (this.entityLists[i] == null) {
+					this.entityLists[i] = new ArrayList();
+				}
+			}
+		}
 	}
 }
--- /dev/null
+++ net/minecraft/src/GenLayerTemperature.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class GenLayerTemperature extends GenLayer {
+    public GenLayerTemperature(GenLayer genLayer) {
+        super(0L);
+        this.parent = genLayer;
+    }
+
+    public int[] getInts(int n, int n2, int n3, int n4) {
+        int[] nArray = this.parent.getInts(n, n2, n3, n4);
+        int[] nArray2 = IntCache.getIntCache(n3 * n4);
+        for (int i = 0; i < n3 * n4; ++i) {
+            nArray2[i] = BiomeGenBase.biomeList[nArray[i]].getIntTemperature();
+        }
+        return nArray2;
+    }
+}
--- net/minecraft/src/AnvilSaveConverter.java
+++ net/minecraft/src/AnvilSaveConverter.java
@@ -48,7 +48,7 @@
 		WorldInfo var10 = this.getWorldInfo(var1);
 		Object var11 = null;
 		if(var10.getTerrainType() == WorldType.FLAT) {
-			var11 = new WorldChunkManagerHell(BiomeGenBase.plains, 0.5F, 0.5F);
+			var11 = new WorldChunkManagerHell(BiomeGenBase.plains, 0.8F, 0.8F);
 		} else {
 			var11 = new WorldChunkManager(var10.getSeed(), var10.getTerrainType());
 		}
--- /dev/null
+++ net/minecraft/src/BiomeGenArchipelago.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenArchipelago extends BiomeGenBase {
+	protected BiomeGenArchipelago(int var1) {
+		super(var1);
+		this.biomeDecorator.treesPerChunk = 1;
+		this.biomeDecorator.grassPerChunk = 3;
+		this.setColor(160);
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return new WorldGenPalmtree();
+	}
+}
--- net/minecraft/src/EntitySilverfish.java
+++ net/minecraft/src/EntitySilverfish.java
@@ -12,7 +12,7 @@
 	}
 
 	public int getMaxHealth() {
-		return 8;
+		return this.worldObj != null && this.worldObj.getWorldInfo().isHardcoreModeEnabled() ? 12 : 8;
 	}
 
 	protected boolean canTriggerWalking() {
--- net/minecraft/src/Packet52MultiBlockChange.java
+++ net/minecraft/src/Packet52MultiBlockChange.java
@@ -16,7 +16,7 @@
 		this.isChunkDataPacket = true;
 	}
 
-	public Packet52MultiBlockChange(int var1, int var2, short[] var3, int var4, World var5) {
+	public Packet52MultiBlockChange(int var1, int var2, int[] var3, int var4, World var5) {
 		this.isChunkDataPacket = true;
 		this.xPosition = var1;
 		this.zPosition = var2;
@@ -35,9 +35,9 @@
 				DataOutputStream var9 = new DataOutputStream(var8);
 
 				for(int var10 = 0; var10 < var4; ++var10) {
-					int var11 = var3[var10] >> 12 & 15;
-					int var12 = var3[var10] >> 8 & 15;
-					int var13 = var3[var10] & 255;
+					int var11 = var3[var10] >> 16 & 15;
+					int var12 = var3[var10] >> 12 & 15;
+					int var13 = var3[var10] & 1023;
 					var9.writeShort(var3[var10]);
 					var9.writeShort((short)((var7.getBlockID(var11, var13, var12) & 4095) << 4 | var7.getBlockMetadata(var11, var13, var12) & 15));
 				}
--- net/minecraft/src/BiomeGenSwamp.java
+++ net/minecraft/src/BiomeGenSwamp.java
@@ -7,13 +7,22 @@
 		super(var1);
 		this.biomeDecorator.treesPerChunk = 2;
 		this.biomeDecorator.flowersPerChunk = -999;
+		this.biomeDecorator.grassPerChunk = 4;
 		this.biomeDecorator.deadBushPerChunk = 1;
 		this.biomeDecorator.mushroomsPerChunk = 8;
 		this.biomeDecorator.reedsPerChunk = 10;
 		this.biomeDecorator.clayPerChunk = 1;
 		this.biomeDecorator.waterlilyPerChunk = 4;
-		this.waterColorMultiplier = 14745518;
-	}
+		this.biomeDecorator.bigMushroomsPerChunk = 25;
+	}
+
+	public float getMinHeight(int x, int z) {
+		return super.getMinHeight(x, z) + (doHills(x, z) ? 0.1F : 0.0F);
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return super.getMaxHeight(x, z) + (doHills(x, z) ? 0.4F : 0.0F);
+ 	}
 
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
 		return this.worldGenSwamp;
--- /dev/null
+++ net/minecraft/src/BiomeGenGravelBeach.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+public class BiomeGenGravelBeach extends BiomeGenBase {
+	public BiomeGenGravelBeach(int var1) {
+		super(var1);
+		this.spawnableCreatureList.clear();
+		this.topBlock = 0;
+		this.fillerBlock = (byte)Block.gravel.blockID;
+		this.biomeDecorator.treesPerChunk = -999;
+		this.biomeDecorator.deadBushPerChunk = 0;
+		this.biomeDecorator.reedsPerChunk = 0;
+		this.biomeDecorator.cactiPerChunk = 0;
+	}
+}
--- net/minecraft/src/ComponentStrongholdLibrary.java
+++ net/minecraft/src/ComponentStrongholdLibrary.java
@@ -5,6 +5,7 @@
 
 public class ComponentStrongholdLibrary extends ComponentStronghold {
 	private static final StructurePieceTreasure[] field_35335_b = new StructurePieceTreasure[]{new StructurePieceTreasure(Item.book.shiftedIndex, 0, 1, 3, 20), new StructurePieceTreasure(Item.paper.shiftedIndex, 0, 2, 7, 20), new StructurePieceTreasure(Item.map.shiftedIndex, 0, 1, 1, 1), new StructurePieceTreasure(Item.compass.shiftedIndex, 0, 1, 1, 1)};
+	private boolean hasSpawner;
 	protected final EnumDoor doorType;
 	private final boolean isLargeRoom;
 
@@ -120,6 +121,20 @@
 			if(this.isLargeRoom) {
 				this.placeBlockAtCurrentPosition(var1, 0, 0, 12, 9, 1, var3);
 				this.createTreasureChestAtCurrentPosition(var1, var3, var2, 12, 8, 1, field_35335_b, 1 + var2.nextInt(4));
+			}
+
+			if (!this.hasSpawner) {
+				int sx = this.getXWithOffset(7, 7);
+				int sy = this.getYWithOffset(1);
+				int sz = this.getZWithOffset(7, 7);
+				if (var3.isVecInside(sx, sy, sz)) {
+					this.hasSpawner = true;
+					var1.setBlockWithNotify(sx, sy, sz, Block.mobSpawner.blockID);
+					TileEntityMobSpawner spawner = (TileEntityMobSpawner) var1.getBlockTileEntity(sx, sy, sz);
+					if (spawner != null) {
+						spawner.setMobID("CaveSpider");
+					}
+				}
 			}
 
 			return true;
--- net/minecraft/src/EntityPlayer.java
+++ net/minecraft/src/EntityPlayer.java
@@ -98,7 +98,8 @@
 			if(var1 != this.itemInUse) {
 				this.clearItemInUse();
 			} else {
-				if(this.itemInUseCount <= 25 && this.itemInUseCount % 4 == 0) {
+				int dur = this.itemInUse.getMaxItemUseDuration();
+				if(this.itemInUseCount <= dur - (int)(7.0F / 35.0F * dur) && this.itemInUseCount % 4 == 0) {
 					this.updateItemUse(var1, 5);
 				}
 
@@ -361,6 +362,12 @@
 		return this.dropPlayerItemWithRandomChoice(this.inventory.decrStackSize(this.inventory.currentItem, 1), false);
 	}
 
+	public EntityItem dropItemStack() {
+		ItemStack currentItem = this.inventory.getCurrentItem();
+		this.inventory.setInventorySlotContents(this.inventory.currentItem, null);
+		return this.dropPlayerItemWithRandomChoice(currentItem, false);
+	}
+
 	public EntityItem dropPlayerItem(ItemStack var1) {
 		return this.dropPlayerItemWithRandomChoice(var1, false);
 	}
@@ -691,12 +698,22 @@
 			}
 
 			if(var2 > 0 || var4 > 0) {
-				boolean var5 = this.fallDistance > 0.0F && !this.onGround && !this.isOnLadder() && !this.isInWater() && !this.isPotionActive(Potion.blindness) && this.ridingEntity == null && var1 instanceof EntityLiving;
+				boolean var5 = !this.worldObj.getWorldInfo().isClassicModeEnabled()
+						&& this.fallDistance > 0.0F
+						&& !this.onGround
+						&& !this.isOnLadder()
+						&& !this.isInWater()
+						&& !this.isPotionActive(Potion.blindness)
+						&& this.ridingEntity == null
+						&& var1 instanceof EntityLiving;
 				if(var5) {
 					var2 += this.rand.nextInt(var2 / 2 + 2);
 				}
 
 				var2 += var4;
+				if (this.worldObj.getWorldInfo().isClassicModeEnabled()) {
+					var2 += 1;
+				}
 				boolean var6 = var1.attackEntityFrom(DamageSource.causePlayerDamage(this), var2);
 				if(var6) {
 					if(var3 > 0) {
@@ -741,8 +758,6 @@
 						var1.setFire(var8 * 4);
 					}
 				}
-
-				this.addExhaustion(0.3F);
 			}
 
 		}
@@ -938,11 +953,12 @@
 		super.jump();
 		this.addStat(StatList.jumpStat, 1);
 		if(this.isSprinting()) {
-			this.addExhaustion(0.8F);
-		} else {
-			this.addExhaustion(0.2F);
+			this.addExhaustion(1.0F);
 		}
+	}
 
+	protected float getSpeedModifier() {
+		return super.getSpeedModifier() * EnchantmentHelper.getSpeedModifier(this.inventory);
 	}
 
 	public void moveEntityWithHeading(float var1, float var2) {
@@ -953,6 +969,12 @@
 			double var9 = this.motionY;
 			float var11 = this.jumpMovementFactor;
 			this.jumpMovementFactor = 0.05F;
+			if (this.isSprinting()) {
+				this.jumpMovementFactor *= 2.5F;
+			}
+			if (this.noClip) {
+				this.jumpMovementFactor *= 2.5F;
+			}
 			super.moveEntityWithHeading(var1, var2);
 			this.motionY = var9 * 0.6D;
 			this.jumpMovementFactor = var11;
@@ -970,13 +992,11 @@
 				var7 = Math.round(MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
 				if(var7 > 0) {
 					this.addStat(StatList.distanceDoveStat, var7);
-					this.addExhaustion(0.015F * (float)var7 * 0.01F);
 				}
 			} else if(this.isInWater()) {
 				var7 = Math.round(MathHelper.sqrt_double(var1 * var1 + var5 * var5) * 100.0F);
 				if(var7 > 0) {
 					this.addStat(StatList.distanceSwumStat, var7);
-					this.addExhaustion(0.015F * (float)var7 * 0.01F);
 				}
 			} else if(this.isOnLadder()) {
 				if(var3 > 0.0D) {
@@ -987,9 +1007,7 @@
 				if(var7 > 0) {
 					this.addStat(StatList.distanceWalkedStat, var7);
 					if(this.isSprinting()) {
-						this.addExhaustion(10.0F * 0.01F * (float)var7 * 0.01F);
-					} else {
-						this.addExhaustion(0.01F * (float)var7 * 0.01F);
+						this.addExhaustion((float)var7 * 0.002F);
 					}
 				}
 			} else {
@@ -1060,6 +1078,7 @@
 		for(this.experienceTotal += var1; this.experience >= 1.0F; this.experience /= (float)this.xpBarCap()) {
 			this.experience = (this.experience - 1.0F) * (float)this.xpBarCap();
 			this.increaseLevel();
+			this.worldObj.playSoundAtEntity(this, "random.orb", 1.0F, 0.8F + this.rand.nextFloat() * 0.4F);
 		}
 
 	}
@@ -1073,7 +1092,13 @@
 	}
 
 	public int xpBarCap() {
-		return 7 + (this.experienceLevel * 7 >> 1);
+		if (experienceLevel >= 30) {
+	        return 62 + (experienceLevel - 30) * 7;
+	    } else if (experienceLevel >= 15) {
+	        return 17 + (experienceLevel - 15) * 3;
+	    } else {
+	        return 17;
+	    }
 	}
 
 	private void increaseLevel() {
@@ -1081,11 +1106,20 @@
 	}
 
 	public void addExhaustion(float var1) {
-		if(!this.capabilities.disableDamage) {
-			if(!this.worldObj.isRemote) {
-				this.foodStats.addExhaustion(var1);
-			}
-
+		if (this.worldObj.difficultySetting == 0
+				|| this.worldObj.worldInfo.isHardcoreModeEnabled()
+				|| this.worldObj.getWorldInfo().isClassicModeEnabled()) {
+			return;
+		} else if (this.worldObj.difficultySetting == 1) {
+			var1 /= 2.0F;
+		} else if (this.worldObj.difficultySetting == 3) {
+			var1 *= 2.0F;
+		}
+
+		var1 *= EnchantmentHelper.getExhaustionModifier(this.inventory);
+
+		if(!this.capabilities.disableDamage && !this.worldObj.isRemote) {
+			this.foodStats.addExhaustion(var1);
 		}
 	}
 
@@ -1094,7 +1128,7 @@
 	}
 
 	public boolean canEat(boolean var1) {
-		return (var1 || this.foodStats.needFood()) && !this.capabilities.disableDamage;
+		return (var1 || this.foodStats.needFood() || this.shouldHeal()) && !this.capabilities.disableDamage;
 	}
 
 	public boolean shouldHeal() {
@@ -1148,4 +1182,8 @@
 
 	public void func_50022_L() {
 	}
+
+	public boolean handleWaterMovement() {
+		return !this.capabilities.isFlying && super.handleWaterMovement();
+ 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenEmpty.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenEmpty extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		return false;
+	}
+}
--- net/minecraft/src/FurnaceRecipes.java
+++ net/minecraft/src/FurnaceRecipes.java
@@ -19,6 +19,8 @@
 		this.addSmelting(Item.porkRaw.shiftedIndex, new ItemStack(Item.porkCooked));
 		this.addSmelting(Item.beefRaw.shiftedIndex, new ItemStack(Item.beefCooked));
 		this.addSmelting(Item.chickenRaw.shiftedIndex, new ItemStack(Item.chickenCooked));
+		this.addSmelting(Item.muttonRaw.shiftedIndex, new ItemStack(Item.muttonCooked));
+		this.addSmelting(Item.pigmanFlesh.shiftedIndex, new ItemStack(Item.porkCooked));
 		this.addSmelting(Item.fishRaw.shiftedIndex, new ItemStack(Item.fishCooked));
 		this.addSmelting(Block.cobblestone.blockID, new ItemStack(Block.stone));
 		this.addSmelting(Item.clay.shiftedIndex, new ItemStack(Item.brick));
--- /dev/null
+++ net/minecraft/src/WorldGenPalmtree.java
@@ -1,0 +1,52 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenPalmtree extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int ground = var1.getBlockId(var3, var4 - 1, var5);
+		if (ground != Block.grass.blockID && ground != Block.sand.blockID) {
+			return false;
+		}
+
+		int height = var2.nextInt(3) + 3;
+		int height2 = var2.nextInt(2) + 1;
+		int height3 = var2.nextInt(2);
+		int heightTotal = height + height2 + height3;
+
+		{
+			int dir = var2.nextInt(4);
+			int dirX = dir == 0 ? 1 : dir == 2 ? -1 : 0;
+			int dirZ = dir == 1 ? 1 : dir == 3 ? -1 : 0;
+
+			for (int y = 0; y < heightTotal; y++) {
+				if (y == height || y == height + height2) {
+					var3 += dirX;
+					var5 += dirZ;
+				}
+				this.setBlockAndMetadata(var1, var3, var4 + y, var5, Block.wood.blockID, 3);
+			}
+		}
+
+		var4 += heightTotal;
+		if (var1.isAirBlock(var3, var4, var5)) {
+			this.setBlockAndMetadata(var1, var3, var4, var5, Block.leaves.blockID, 3);
+		}
+
+		for (int dir = 0; dir < 4; dir++) {
+			int dirX = dir == 0 ? 1 : dir == 2 ? -1 : 0;
+			int dirZ = dir == 1 ? 1 : dir == 3 ? -1 : 0;
+
+			for (int i = 1; i < 4; i++) {
+				if (i <= 2 && var1.isAirBlock(var3 + dirX * i, var4, var5 + dirZ * i)) {
+					this.setBlockAndMetadata(var1, var3 + dirX * i, var4, var5 + dirZ * i, Block.leaves.blockID, 3);
+				}
+				if (i >= 2 && var1.isAirBlock(var3 + dirX * i, var4 - 1, var5 + dirZ * i)) {
+					this.setBlockAndMetadata(var1, var3 + dirX * i, var4 - 1, var5 + dirZ * i, Block.leaves.blockID, 3);
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/BlockStep.java
+++ net/minecraft/src/BlockStep.java
@@ -4,11 +4,10 @@
 import java.util.Random;
 
 public class BlockStep extends Block {
-	public static final String[] blockStepTypes = new String[]{"stone", "sand", "wood", "cobble", "brick", "smoothStoneBrick"};
 	private boolean blockType;
 
-	public BlockStep(int var1, boolean var2) {
-		super(var1, 6, Material.rock);
+	public BlockStep(int var1, boolean var2, Material var3) {
+		super(var1, 6, var3);
 		this.blockType = var2;
 		if(!var2) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
@@ -47,11 +46,6 @@
 		super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
 	}
 
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		int var3 = var2 & 7;
-		return var3 == 0 ? (var1 <= 1 ? 6 : 5) : (var3 == 1 ? (var1 == 0 ? 208 : (var1 == 1 ? 176 : 192)) : (var3 == 2 ? 4 : (var3 == 3 ? 16 : (var3 == 4 ? Block.brick.blockIndexInTexture : (var3 == 5 ? Block.stoneBrick.blockIndexInTexture : 6)))));
-	}
-
 	public int getBlockTextureFromSide(int var1) {
 		return this.getBlockTextureFromSideAndMetadata(var1, 0);
 	}
@@ -68,10 +62,6 @@
 
 	}
 
-	public int idDropped(int var1, Random var2, int var3) {
-		return Block.stairSingle.blockID;
-	}
-
 	public int quantityDropped(Random var1) {
 		return this.blockType ? 2 : 1;
 	}
@@ -82,9 +72,5 @@
 
 	public boolean renderAsNormalBlock() {
 		return this.blockType;
-	}
-
-	protected ItemStack createStackedBlock(int var1) {
-		return new ItemStack(Block.stairSingle.blockID, 1, var1 & 7);
 	}
 }
--- /dev/null
+++ net/minecraft/src/GenLayerTemperateBorder.java
@@ -1,0 +1,55 @@
+package net.minecraft.src;
+
+public class GenLayerTemperateBorder extends GenLayer {
+	public GenLayerTemperateBorder(long var1, GenLayer var3) {
+		super(var1);
+		super.parent = var3;
+	}
+
+	public int[] getInts(int var1, int var2, int var3, int var4) {
+		int var5 = var1 - 1;
+		int var6 = var2 - 1;
+		int var7 = var3 + 2;
+		int var8 = var4 + 2;
+		int[] var9 = this.parent.getInts(var5, var6, var7, var8);
+		int[] var10 = IntCache.getIntCache(var3 * var4);
+
+		for(int var11 = 0; var11 < var4; ++var11) {
+			for(int var12 = 0; var12 < var3; ++var12) {
+				this.initChunkSeed(var12 + var1, var11 + var2);
+				int i = var9[var12 + 1 + (var11 + 1) * var7];
+
+				ClimateZone c = ClimateZone.getZoneFromId(i);
+				ClimateZone[] n = {
+						ClimateZone.getZoneFromId(var9[var12 + 0 + (var11 + 1) * var7]),
+						ClimateZone.getZoneFromId(var9[var12 + 2 + (var11 + 1) * var7]),
+						ClimateZone.getZoneFromId(var9[var12 + 1 + (var11 + 0) * var7]),
+						ClimateZone.getZoneFromId(var9[var12 + 1 + (var11 + 2) * var7])
+				};
+				if (c != null) {
+					if (c == ClimateZone.WARM && arrContains(n, ClimateZone.SNOWY)) {
+						i = ClimateZone.COOL.id();
+					} else if (c == ClimateZone.COOL && arrContains(n, ClimateZone.HOT)) {
+						i = ClimateZone.WARM.id();
+					} else if (c == ClimateZone.SNOWY && arrContains(n, ClimateZone.HOT)
+							|| c == ClimateZone.HOT && arrContains(n, ClimateZone.SNOWY)) {
+						i = ClimateZone.TEMPERATE.id();
+					}
+				}
+
+				var10[var12 + var11 * var3] = i;
+			}
+		}
+
+		return var10;
+	}
+
+	private static boolean arrContains(ClimateZone[] n, ClimateZone z) {
+		for (ClimateZone nz : n) {
+			if (nz == z) {
+				return true;
+			}
+		}
+		return false;
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldTypeCustomized.java
@@ -1,0 +1,118 @@
+package net.minecraft.src;
+
+public class WorldTypeCustomized extends WorldType {
+	private final boolean customized;
+
+	private final int biome;
+	private boolean oceans = true;
+	private boolean oceanBiomes = true;
+	private boolean beaches = true;
+	private boolean rivers = true;
+	private boolean amplified = false;
+	private int biomeSize = 4;
+
+	protected WorldTypeCustomized(int var1, String var2) {
+		this(var1, var2, -1, false);
+	}
+
+	protected WorldTypeCustomized(int var1, String var2, int var3) {
+		this(var1, var2, var3, true);
+	}
+
+	protected WorldTypeCustomized(int var1, String var2, int var3, boolean var4) {
+		super(var1, var2);
+		this.customized = var4;
+		this.biome = var3;
+	}
+
+	public WorldType readData(NBTTagCompound var1) {
+		return this.withBiome(var1.getInteger("Biome"))
+				.withOceans(var1.getBoolean("Oceans"))
+				.withOceanBiomes(var1.getBoolean("OceanBiomes"))
+				.withBeaches(var1.getBoolean("Beaches"))
+				.withRivers(var1.getBoolean("Rivers"))
+				.withAmplified(var1.getBoolean("Amplified"))
+				.withBiomeSize(var1.getInteger("BiomeSize"));
+	}
+
+	public void writeData(NBTTagCompound var1) {
+		var1.setInteger("Biome", this.biome);
+		var1.setBoolean("Oceans", this.oceans);
+		var1.setBoolean("OceanBiomes", this.oceanBiomes);
+		var1.setBoolean("Beaches", this.beaches);
+		var1.setBoolean("Rivers", this.rivers);
+		var1.setBoolean("Amplified", this.amplified);
+		var1.setInteger("BiomeSize", this.biomeSize);
+	}
+
+	public WorldTypeCustomized withBiome(int biome) {
+		return new WorldTypeCustomized(-1, this.func_48449_a(), biome);
+	}
+
+	public WorldTypeCustomized withOceans(boolean oceans) {
+		if (this.customized) this.oceans = oceans;
+		return this;
+	}
+
+	public WorldTypeCustomized withOceanBiomes(boolean oceanBiomes) {
+		if (this.customized) this.oceanBiomes = oceanBiomes;
+		return this;
+	}
+
+	public WorldTypeCustomized withBeaches(boolean beaches) {
+		if (this.customized) this.beaches = beaches;
+		return this;
+	}
+
+	public WorldTypeCustomized withRivers(boolean rivers) {
+		if (this.customized) this.rivers = rivers;
+		return this;
+	}
+
+	public WorldTypeCustomized withAmplified(boolean amplified) {
+		if (this.customized) this.amplified = amplified;
+		return this;
+	}
+
+	public WorldTypeCustomized withLegacyGen(boolean legacyWorldGen) {
+		if (this.customized) this.legacyWorldGen = legacyWorldGen;
+		return this;
+	}
+
+	public WorldTypeCustomized withBiomeSize(int biomeSize) {
+		if (this.customized) this.biomeSize = biomeSize;
+		return this;
+	}
+
+	public int getBiome() {
+		return this.biome;
+	}
+
+	public boolean hasOceans() {
+		return this.oceans;
+	}
+
+	public boolean hasOceanBiomes() {
+		return this.oceanBiomes;
+	}
+
+	public boolean hasBeaches() {
+		return beaches;
+	}
+
+	public boolean hasRivers() {
+		return this.rivers;
+	}
+
+	public boolean isAmplified() {
+		return this.amplified;
+	}
+
+	public int getBiomeSize() {
+		return this.biomeSize;
+	}
+
+	public boolean useLegacyWorldGen() {
+		return this.legacyWorldGen || this.biome >= 0;
+	}
+}
--- net/minecraft/src/BiomeGenBase.java
+++ net/minecraft/src/BiomeGenBase.java
@@ -6,33 +6,317 @@
 
 public abstract class BiomeGenBase {
 	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];
-	public static final BiomeGenBase ocean = (new BiomeGenOcean(0)).setColor(112).setBiomeName("Ocean").setMinMaxHeight(-1.0F, 0.4F);
-	public static final BiomeGenBase plains = (new BiomeGenPlains(1)).setColor(9286496).setBiomeName("Plains").setTemperatureRainfall(0.8F, 0.4F);
-	public static final BiomeGenBase desert = (new BiomeGenDesert(2)).setColor(16421912).setBiomeName("Desert").setDisableRain().setTemperatureRainfall(2.0F, 0.0F).setMinMaxHeight(0.1F, 0.2F);
-	public static final BiomeGenBase extremeHills = (new BiomeGenHills(3)).setColor(6316128).setBiomeName("Extreme Hills").setMinMaxHeight(0.2F, 1.3F).setTemperatureRainfall(0.2F, 0.3F);
-	public static final BiomeGenBase forest = (new BiomeGenForest(4)).setColor(353825).setBiomeName("Forest").func_4080_a(5159473).setTemperatureRainfall(0.7F, 0.8F);
-	public static final BiomeGenBase taiga = (new BiomeGenTaiga(5)).setColor(747097).setBiomeName("Taiga").func_4080_a(5159473).func_50024_b().setTemperatureRainfall(0.05F, 0.8F).setMinMaxHeight(0.1F, 0.4F);
-	public static final BiomeGenBase swampland = (new BiomeGenSwamp(6)).setColor(522674).setBiomeName("Swampland").func_4080_a(9154376).setMinMaxHeight(-0.2F, 0.1F).setTemperatureRainfall(0.8F, 0.9F);
-	public static final BiomeGenBase river = (new BiomeGenRiver(7)).setColor(255).setBiomeName("River").setMinMaxHeight(-0.5F, 0.0F);
-	public static final BiomeGenBase hell = (new BiomeGenHell(8)).setColor(16711680).setBiomeName("Hell").setDisableRain().setTemperatureRainfall(2.0F, 0.0F);
-	public static final BiomeGenBase sky = (new BiomeGenEnd(9)).setColor(8421631).setBiomeName("Sky").setDisableRain();
-	public static final BiomeGenBase frozenOcean = (new BiomeGenOcean(10)).setColor(9474208).setBiomeName("FrozenOcean").func_50024_b().setMinMaxHeight(-1.0F, 0.5F).setTemperatureRainfall(0.0F, 0.5F);
-	public static final BiomeGenBase frozenRiver = (new BiomeGenRiver(11)).setColor(10526975).setBiomeName("FrozenRiver").func_50024_b().setMinMaxHeight(-0.5F, 0.0F).setTemperatureRainfall(0.0F, 0.5F);
-	public static final BiomeGenBase icePlains = (new BiomeGenSnow(12)).setColor(16777215).setBiomeName("Ice Plains").func_50024_b().setTemperatureRainfall(0.0F, 0.5F);
-	public static final BiomeGenBase iceMountains = (new BiomeGenSnow(13)).setColor(10526880).setBiomeName("Ice Mountains").func_50024_b().setMinMaxHeight(0.2F, 1.2F).setTemperatureRainfall(0.0F, 0.5F);
-	public static final BiomeGenBase mushroomIsland = (new BiomeGenMushroomIsland(14)).setColor(16711935).setBiomeName("MushroomIsland").setTemperatureRainfall(0.9F, 1.0F).setMinMaxHeight(0.2F, 1.0F);
-	public static final BiomeGenBase mushroomIslandShore = (new BiomeGenMushroomIsland(15)).setColor(10486015).setBiomeName("MushroomIslandShore").setTemperatureRainfall(0.9F, 1.0F).setMinMaxHeight(-1.0F, 0.1F);
-	public static final BiomeGenBase beach = (new BiomeGenBeach(16)).setColor(16440917).setBiomeName("Beach").setTemperatureRainfall(0.8F, 0.4F).setMinMaxHeight(0.0F, 0.1F);
-	public static final BiomeGenBase desertHills = (new BiomeGenDesert(17)).setColor(13786898).setBiomeName("DesertHills").setDisableRain().setTemperatureRainfall(2.0F, 0.0F).setMinMaxHeight(0.2F, 0.7F);
-	public static final BiomeGenBase forestHills = (new BiomeGenForest(18)).setColor(2250012).setBiomeName("ForestHills").func_4080_a(5159473).setTemperatureRainfall(0.7F, 0.8F).setMinMaxHeight(0.2F, 0.6F);
-	public static final BiomeGenBase taigaHills = (new BiomeGenTaiga(19)).setColor(1456435).setBiomeName("TaigaHills").func_50024_b().func_4080_a(5159473).setTemperatureRainfall(0.05F, 0.8F).setMinMaxHeight(0.2F, 0.7F);
-	public static final BiomeGenBase extremeHillsEdge = (new BiomeGenHills(20)).setColor(7501978).setBiomeName("Extreme Hills Edge").setMinMaxHeight(0.2F, 0.8F).setTemperatureRainfall(0.2F, 0.3F);
-	public static final BiomeGenBase jungle = (new BiomeGenJungle(21)).setColor(5470985).setBiomeName("Jungle").func_4080_a(5470985).setTemperatureRainfall(1.2F, 0.9F).setMinMaxHeight(0.2F, 0.4F);
-	public static final BiomeGenBase jungleHills = (new BiomeGenJungle(22)).setColor(2900485).setBiomeName("JungleHills").func_4080_a(5470985).setTemperatureRainfall(1.2F, 0.9F).setMinMaxHeight(1.8F, 0.2F);
+	public static final boolean[] oceanList = new boolean[256];
+
+	// Beta 1.8
+	public static final BiomeGenBase ocean = new BiomeGenOcean(0)
+			.setBiomeName("Ocean")
+			.setColor(0x000070)
+			.setTemperatureRainfall(0.5F, 0.5F)
+			.setMinMaxHeight(-1.0F, 0.4F)
+			.setOcean();
+	public static final BiomeGenBase plains = new BiomeGenPlains(1)
+			.setBiomeName("Plains")
+			.setColor(0x8db360)
+			.setTemperatureRainfall(0.8F, 0.5F)
+			.setMinMaxHeight(0.1F, 0.3F);
+	public static final BiomeGenBase desert = new BiomeGenDesert(2)
+			.setBiomeName("Desert")
+			.setColor(0xfa9418)
+			.setTemperatureRainfall(2.0F, 0.0F)
+			.setMinMaxHeight(0.2F, 0.2F)
+			.setDisableRain();
+	public static final BiomeGenBase extremeHills = new BiomeGenHills(35)
+			.setBiomeName("Extreme Hills")
+			.setColor(0x606060)
+			.setTemperatureRainfall(0.2F, 0.3F)
+			.setMinMaxHeight(0.2F, 1.8F);
+	public static final BiomeGenBase forest = new BiomeGenForest(4)
+			.setBiomeName("Forest")
+			.setColor(0x056621)
+			.setTemperatureRainfall(0.7F, 0.8F)
+			.setMinMaxHeight(0.1F, 0.6F);
+	public static final BiomeGenBase taiga = new BiomeGenTaiga(28)
+			.setBiomeName("Taiga")
+			.setColor(0x0b6659)
+			.setTemperatureRainfall(0.3F, 0.8F)
+			.setMinMaxHeight(0.1F, 0.6F);
+	public static final BiomeGenBase swampland = new BiomeGenSwamp(6)
+			.setBiomeName("Swampland")
+			.setColor(0x07f9b2)
+			.setTemperatureRainfall(0.8F, 1.0F)
+			.setMinMaxHeight(-0.2F, 0.1F);
+	public static final BiomeGenBase river = new BiomeGenRiver(7)
+			.setBiomeName("River")
+			.setColor(0x0000ff)
+			.setTemperatureRainfall(0.5F, 0.5F)
+			.setMinMaxHeight(-0.5F, 0.0F);
+	public static final BiomeGenBase hell = new BiomeGenHell(8)
+			.setBiomeName("Nether")
+			.setColor(0xff0000)
+			.setTemperatureRainfall(2.0F, 0.0F)
+			.setDisableRain();
+	public static final BiomeGenBase sky = new BiomeGenEnd(9)
+			.setBiomeName("The End")
+			.setColor(0x000000)
+			.setDisableRain();
+	// 1.0.0
+	public static final BiomeGenBase frozenOcean = new BiomeGenOcean(10)
+			.setBiomeName("Frozen Ocean")
+			.setColor(0x9090a0)
+			.setTemperatureRainfall(0.0F, 0.5F)
+			.setMinMaxHeight(-1.0F, 0.4F)
+			.setEnableSnow()
+			.setOcean();
+	public static final BiomeGenBase frozenRiver = new BiomeGenRiver(11)
+			.setBiomeName("Frozen River")
+			.setColor(0xa0a0ff)
+			.setTemperatureRainfall(0.0F, 0.5F)
+			.setMinMaxHeight(-0.5F, 0.0F)
+			.setEnableSnow();
+	public static final BiomeGenBase icePlains = new BiomeGenSnow(12)
+			.setBiomeName("Ice Plains")
+			.setColor(0xffffff)
+			.setTemperatureRainfall(0.0F, 0.5F)
+			.setMinMaxHeight(0.0F, 0.3F)
+			.setEnableSnow();
+	public static final BiomeGenBase iceMountains = new BiomeGenSnow(13)
+			.setBiomeName("Ice Mountains")
+			.setColor(0xa0a0a0)
+			.setTemperatureRainfall(0.0F, 0.5F)
+			.setMinMaxHeight(0.2F, 1.2F)
+			.setEnableSnow();
+	public static final BiomeGenBase mushroomIsland = new BiomeGenMushroomIsland(14)
+			.setBiomeName("Mushroom Island")
+			.setColor(0xff00ff)
+			.setTemperatureRainfall(0.9F, 1.0F)
+			.setMinMaxHeight(0.2F, 1.0F);
+	public static final BiomeGenBase mushroomIslandShore = new BiomeGenMushroomIsland(15)
+			.setBiomeName("Mushroom Island Shore")
+			.setColor(0xa000ff)
+			.setTemperatureRainfall(0.9F, 1.0F)
+			.setMinMaxHeight(-1.0F, 0.1F)
+			.setOcean();
+	// 1.1
+	public static final BiomeGenBase snowyTaiga = new BiomeGenTaiga(5)
+			.setBiomeName("Snowy Taiga")
+			.setColor(0x7fffff)
+			.setTemperatureRainfall(0.0F, 0.8F)
+			.setMinMaxHeight(0.1F, 0.6F)
+			.setEnableSnow();
+	public static final BiomeGenBase beach = new BiomeGenBeach(16)
+			.setBiomeName("Beach")
+			.setColor(0xfade55)
+			.setTemperatureRainfall(0.8F, 0.4F)
+			.setMinMaxHeight(0.0F, 0.1F);
+	// 1.2.1
+	public static final BiomeGenBase jungle = new BiomeGenJungle(21)
+			.setBiomeName("Jungle")
+			.setColor(0x537b09)
+			.setTemperatureRainfall(1.2F, 0.9F)
+			.setMinMaxHeight(0.1F, 1.0F);
+	// aa1.0
+	public static final BiomeGenBase parchedForest = new BiomeGenParched(3)
+			.setBiomeName("Parched Forest")
+			.setColor(0x8d7e2f)
+			.setTemperatureRainfall(0.8F, 0.3F)
+			.setMinMaxHeight(0.3F, 1.8F);
+	public static final BiomeGenBase highlands = new BiomeGenHighlands(23)
+			.setBiomeName("Highlands")
+			.setColor(0x6090a0)
+			.setTemperatureRainfall(0.6F, 0.7F)
+			.setMinMaxHeight(1.8F, 0.8F);
+	public static final BiomeGenBase highlandsEdge = new BiomeGenHighlands(24)
+			.setBiomeName("Highlands Edge")
+			.setColor(0x65d4b7)
+			.setTemperatureRainfall(0.6F, 0.6F)
+			.setMinMaxHeight(1.0F, 0.6F);
+	public static final BiomeGenBase seaCrags = new BiomeGenCrags(25)
+			.setBiomeName("Sea Crags")
+			.setColor(0x000040)
+			.setTemperatureRainfall(0.5F, 0.5F)
+			.setMinMaxHeight(-1.0F, 0.5F)
+			.setOcean();
+	public static final BiomeGenBase archipelago = new BiomeGenArchipelago(26)
+			.setBiomeName("Archipelago")
+			.setColor(0x0000a0)
+			.setTemperatureRainfall(0.8F, 0.9F)
+			.setMinMaxHeight(-1.0F, 1.0F)
+			.setOcean();
+	// aa1.1
+	public static final BiomeGenBase rainforest = new BiomeGenRainforest(27)
+			.setBiomeName("Rainforest")
+			.setColor(0x1a9e1e)
+			.setTemperatureRainfall(1.2F, 0.9F)
+			.setMinMaxHeight(0.1F, 1.0F);
+	public static final BiomeGenBase frozenBeach = new BiomeGenBeach(30)
+			.setBiomeName("Frozen Beach")
+			.setColor(0xfff0a5)
+			.setTemperatureRainfall(0.0F, 0.5F)
+			.setMinMaxHeight(0.0F, 0.1F)
+			.setEnableSnow();
+	public static final BiomeGenBase frostyHighlands = new BiomeGenHighlands(31)
+			.setBiomeName("Frosty Highlands")
+			.setColor(0x65a7a1)
+			.setTemperatureRainfall(0.0F, 0.1F)
+			.setMinMaxHeight(1.8F, 0.8F)
+			.setEnableSnow();
+	public static final BiomeGenBase frostyHighlandsEdge = new BiomeGenHighlands(32)
+			.setBiomeName("Frosty Highlands Edge")
+			.setColor(0x65eaea)
+			.setTemperatureRainfall(0.0F, 0.1F)
+			.setMinMaxHeight(1.0F, 0.6F)
+			.setEnableSnow();
+	public static final BiomeGenBase gravelBeach = new BiomeGenGravelBeach(33)
+			.setBiomeName("Gravel Beach")
+			.setColor(0xa0a0a0)
+			.setTemperatureRainfall(0.8F, 0.4F)
+			.setMinMaxHeight(0.0F, 0.1F);
+	public static final BiomeGenBase windsweptCrags = new BiomeGenWindsweptCrags(34)
+			.setBiomeName("Windswept Crags")
+			.setColor(0x416f1f)
+			.setTemperatureRainfall(0.2F, 0.3F)
+			.setMinMaxHeight(0.5F, 2.5F);
+	public static final BiomeGenBase shrubland = new BiomeGenShrubland(36)
+			.setBiomeName("Shrubland")
+			.setColor(0x7aec0e)
+			.setTemperatureRainfall(0.8F, 0.6F)
+			.setMinMaxHeight(0.1F, 0.5F);
+	public static final BiomeGenBase savanna = new BiomeGenSavanna(37)
+			.setBiomeName("Savanna")
+			.setColor(0xc6ce4c)
+			.setTemperatureRainfall(0.8F, 0.2F)
+			.setMinMaxHeight(0.1F, 0.5F);
+	public static final BiomeGenBase savannaHills = new BiomeGenSavanna(38)
+			.setBiomeName("Savanna Hills")
+			.setColor(0xffa07f)
+			.setTemperatureRainfall(0.8F, 0.2F)
+			.setMinMaxHeight(1.2F, 0.5F);
+	// aa1.2
+	public static final BiomeGenBase woodedHills = new BiomeGenWoodedHills(41)
+			.setBiomeName("Wooded Hills")
+			.setColor(0x316a46)
+			.setTemperatureRainfall(0.4F, 0.6F)
+			.setMinMaxHeight(0.2F, 1.8F);
+	public static final BiomeGenBase snowcappedHills = new BiomeGenSnowcappedHills(42)
+			.setBiomeName("Snowcapped Hills")
+			.setColor(0x606090)
+			.setTemperatureRainfall(0.2F, 0.3F)
+			.setMinMaxHeight(1.2F, 1.2F);
+	public static final BiomeGenBase birchForest = new BiomeGenBirchForest(43)
+			.setBiomeName("Birch Forest")
+			.setColor(0x307444)
+			.setTemperatureRainfall(0.6F, 0.6F)
+			.setMinMaxHeight(0.1F, 0.6F);
+	public static final BiomeGenBase mushroomValley = new BiomeGenMushroomValley(44)
+			.setBiomeName("Mushroom Valley")
+			.setColor(0xff007f)
+			.setTemperatureRainfall(0.9F, 1.0F)
+			.setMinMaxHeight(1.5F, 1.0F);
+	public static final BiomeGenBase snowcappedPeaks = new BiomeGenSnowcappedPeaks(45)
+			.setBiomeName("Snowcapped Peaks")
+			.setColor(0x90a0c0)
+			.setTemperatureRainfall(0.2F, 0.5F)
+			.setMinMaxHeight(1.0F, 0.0F);
+	public static final BiomeGenBase megaTaiga = new BiomeGenMegaTaiga(46)
+			.setBiomeName("Mega Taiga")
+			.setColor(0x596651)
+			.setTemperatureRainfall(0.3F, 0.8F)
+			.setMinMaxHeight(0.1F, 0.5F);
+	// Obsolete
+	public static final BiomeGenBase desertHills = new BiomeGenDesert(17)
+			.setBiomeName("Desert Hills")
+			.setColor(0xd25f12)
+			.setTemperatureRainfall(2.0F, 0.0F)
+			.setMinMaxHeight(0.2F, 0.8F)
+			.setDisableRain();
+	public static final BiomeGenBase forestHills = new BiomeGenForest(18)
+			.setBiomeName("Forest Hills")
+			.setColor(0x22551c)
+			.setTemperatureRainfall(0.8F, 0.8F)
+			.setMinMaxHeight(0.2F, 1.0F);
+	public static final BiomeGenBase snowyTaigaHills = new BiomeGenTaiga(19)
+			.setBiomeName("Snowy Taiga Hills")
+			.setColor(0x50a0a0)
+			.setTemperatureRainfall(0.0F, 0.8F)
+			.setMinMaxHeight(0.2F, 1.3F)
+			.setEnableSnow();
+	public static final BiomeGenBase parchedForestEdge = new BiomeGenParched(20)
+			.setBiomeName("Parched Forest Edge")
+			.setColor(0xb1a460)
+			.setTemperatureRainfall(0.8F, 0.3F)
+			.setMinMaxHeight(0.1F, 1.0F);
+	public static final BiomeGenBase jungleHills = new BiomeGenJungle(22)
+			.setBiomeName("Jungle Hills")
+			.setColor(0x2c4205)
+			.setTemperatureRainfall(1.2F, 0.9F)
+			.setMinMaxHeight(2.0F, 0.5F);
+	public static final BiomeGenBase taigaHills = new BiomeGenTaiga(29)
+			.setBiomeName("Taiga Hills")
+			.setColor(0x163933)
+			.setTemperatureRainfall(0.3F, 0.8F)
+			.setMinMaxHeight(0.2F, 1.3F);
+
+	static {
+		plains.hillsVariant = forest;
+		desert.hillsVariant = desertHills;
+		forest.hillsVariant = forestHills;
+		snowyTaiga.hillsVariant = snowyTaigaHills;
+		icePlains.hillsVariant = iceMountains;
+		jungle.hillsVariant = jungleHills;
+		taiga.hillsVariant = taigaHills;
+		savanna.hillsVariant = savannaHills;
+
+		highlands.edgeVariant = highlandsEdge;
+		frostyHighlands.edgeVariant = frostyHighlandsEdge;
+
+		parchedForest.snowyVariant = iceMountains;
+		forest.snowyVariant = snowyTaiga;
+		taiga.snowyVariant = snowyTaiga;
+		highlands.snowyVariant = frostyHighlands;
+
+		forest.internalVariant = plains;
+		forest.internalChance = 4;
+		forest.internalLayer = 1;
+		plains.internalVariant = forest;
+		plains.internalChance = 4;
+		plains.internalLayer = 1;
+		snowyTaiga.internalVariant = icePlains;
+		snowyTaiga.internalChance = 4;
+		snowyTaiga.internalLayer = 1;
+		icePlains.internalVariant = iceMountains;
+		icePlains.internalChance = 10;
+		icePlains.internalLayer = 0;
+		jungle.internalVariant = river;
+		jungle.internalChance = 8;
+		extremeHills.internalVariant = woodedHills;
+		extremeHills.internalChance = 3;
+		extremeHills.internalLayer = 0;
+		savanna.internalVariant = desert;
+		savanna.internalChance = 5;
+		savanna.internalLayer = 0;
+
+		swampland.hasBeach = false;
+		river.hasBeach = false;
+		frozenRiver.hasBeach = false;
+		frostyHighlands.hasBeach = false;
+		frostyHighlandsEdge.hasBeach = false;
+		snowcappedHills.hasBeach = false;
+		mushroomValley.hasBeach = false;
+		highlands.hasBeach = false;
+		highlandsEdge.hasBeach = false;
+		rainforest.hasBeach = false;
+		windsweptCrags.hasBeach = false;
+		extremeHills.hasBeach = false;
+		parchedForest.hasBeach = false;
+	}
+
 	public String biomeName;
 	public int color;
 	public byte topBlock = (byte)Block.grass.blockID;
+	public byte topMeta = 0;
 	public byte fillerBlock = (byte)Block.dirt.blockID;
+	public byte fillerMeta = 0;
 	public int field_6161_q = 5169201;
 	public float minHeight = 0.1F;
 	public float maxHeight = 0.3F;
@@ -40,6 +324,13 @@
 	public float rainfall = 0.5F;
 	public int waterColorMultiplier = 16777215;
 	public BiomeDecorator biomeDecorator;
+	public BiomeGenBase edgeVariant;
+	public BiomeGenBase hillsVariant;
+	public BiomeGenBase snowyVariant;
+	public BiomeGenBase internalVariant;
+	public int internalChance = 1;
+	public int internalLayer = 2;
+	public boolean hasBeach = true;
 	protected List spawnableMonsterList = new ArrayList();
 	protected List spawnableCreatureList = new ArrayList();
 	protected List spawnableWaterCreatureList = new ArrayList();
@@ -50,6 +341,7 @@
 	protected WorldGenBigTree worldGenBigTree = new WorldGenBigTree(false);
 	protected WorldGenForest worldGenForest = new WorldGenForest(false);
 	protected WorldGenSwamp worldGenSwamp = new WorldGenSwamp();
+	private static NoiseGeneratorSimplexOctaves heightNoise = new NoiseGeneratorSimplexOctaves(new Random(), 4);
 
 	protected BiomeGenBase(int var1) {
 		this.biomeID = var1;
@@ -68,18 +360,38 @@
 		this.spawnableWaterCreatureList.add(new SpawnListEntry(EntitySquid.class, 10, 4, 4));
 	}
 
+	public static void setupNoise(Random random) {
+		heightNoise = new NoiseGeneratorSimplexOctaves(random, 4);
+	}
+
+	protected static float getHeightNoiseValue(double x, double z) {
+		return (float)heightNoise.generateNoiseNormalized(x * 0.05D, z * 0.05D);
+	}
+
+	protected static boolean doHills(int x, int z) {
+		return getHeightNoiseValue(x, z) > 0.35D;
+	}
+
+	protected static boolean doMutation(int x, int z) {
+		return getHeightNoiseValue(x / -2.0D, z / -2.0D) < -0.35D;
+	}
+
+	public float getMinHeight(int x, int z) {
+		return this.minHeight;
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return this.maxHeight;
+	}
+
 	protected BiomeDecorator createBiomeDecorator() {
 		return new BiomeDecorator(this);
 	}
 
 	private BiomeGenBase setTemperatureRainfall(float var1, float var2) {
-		if(var1 > 0.1F && var1 < 0.2F) {
-			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
-		} else {
-			this.temperature = var1;
-			this.rainfall = var2;
-			return this;
-		}
+		this.temperature = var1;
+		this.rainfall = var2;
+		return this;
 	}
 
 	private BiomeGenBase setMinMaxHeight(float var1, float var2) {
@@ -93,6 +405,11 @@
 		return this;
 	}
 
+	private BiomeGenBase setOcean() {
+		oceanList[this.biomeID] = true;
+		return this;
+	}
+
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
 		return (WorldGenerator)(var1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
 	}
@@ -101,7 +418,7 @@
 		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
 	}
 
-	protected BiomeGenBase func_50024_b() {
+	protected BiomeGenBase setEnableSnow() {
 		this.enableSnow = true;
 		return this;
 	}
@@ -155,5 +472,85 @@
 
 	public void decorate(World var1, Random var2, int var3, int var4) {
 		this.biomeDecorator.decorate(var1, var2, var3, var4);
+	}
+
+	public boolean isOcean() {
+		return oceanList[this.biomeID];
+	}
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, int topTerrainHeight, double erosionValue, double simplexValue) {
+		this.buildDefaultSurface(world, random, blocks, metadata, x, z, topTerrainHeight, erosionValue, simplexValue);
+	}
+
+	public final void buildDefaultSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, int topTerrainHeight, double erosionValue, double simplexValue) {
+		int height = blocks.length / 256;
+		int chunkX = x & 15;
+		int chunkZ = z & 15;
+
+		int top = this.topBlock;
+		int filler = this.fillerBlock;
+		int topMeta = this.topMeta;
+		int fillerMeta = this.fillerMeta;
+		int sandStoneHeight = -1;
+
+		int erosion = (int)(erosionValue / 3.0D + 3.0D + random.nextDouble() * 0.25D);
+
+		for (int y = topTerrainHeight; y >= 0; --y) {
+			int index = chunkX * height * 16 + chunkZ * height + y;
+
+			if (y <= random.nextInt(5)) {
+				blocks[index] = (byte) Block.bedrock.blockID;
+			} else {
+				byte block = blocks[index];
+
+				if (block > 0) {
+					if (block == Block.stone.blockID) {
+						if (sandStoneHeight == -1) {
+							if (erosion <= 0) {
+								top = 0;
+								topMeta = 0;
+								filler = Block.stone.blockID;
+								fillerMeta = 0;
+							} else if (y >= 63 - 4 && y <= 63 + 1) {
+								top = this.topBlock;
+								topMeta = this.topMeta;
+								filler = this.fillerBlock;
+								fillerMeta = this.fillerMeta;
+							}
+
+							if (y < 63 && top == 0) {
+								top = Block.waterStill.blockID;
+								topMeta = 0;
+							}
+
+							sandStoneHeight = erosion;
+
+							if (y >= 63 - 1) {
+								blocks[index] = (byte)top;
+								metadata[index] = (byte)topMeta;
+							} else {
+								blocks[index] = (byte)filler;
+								metadata[index] = (byte)fillerMeta;
+							}
+						} else if (sandStoneHeight > 0) {
+							--sandStoneHeight;
+							blocks[index] = (byte)filler;
+							metadata[index] = (byte)fillerMeta;
+
+							if (sandStoneHeight == 0 && filler == Block.sand.blockID) {
+								sandStoneHeight = random.nextInt(4) + Math.max(0, y - 63);
+								filler = Block.sandStone.blockID;
+								fillerMeta = 0;
+							}
+						}
+					}
+				} else {
+					sandStoneHeight = -1;
+				}
+			}
+		}
+	}
+
+	public int hashCode() {
+		return this.biomeName.hashCode();
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenMegaPineTree.java
@@ -1,0 +1,211 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenMegaPineTree extends WorldGenerator {
+    private boolean heightMod;
+	private int minHeight;
+	private int heightVariation;
+
+    public WorldGenMegaPineTree(boolean var2) {
+        this(var2, 15, 15);
+    }
+
+    public WorldGenMegaPineTree(boolean var2, int var3, int var4) {
+        this(false, var2, var3, var4);
+    }
+
+    public WorldGenMegaPineTree(boolean var1, boolean var2, int var3, int var4) {
+        super(var1);
+        this.heightMod = var2;
+		this.minHeight = var3;
+        this.heightVariation = var4;
+    }
+
+    public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int var6 = var2.nextInt(this.heightVariation) + this.minHeight;
+
+        if (!this.func_150537_a(var1, var2, var3, var4, var5, var6)) {
+            return false;
+        } else {
+            this.func_150541_c(var1, var3, var5, var4 + var6, 0, var2);
+
+            for (int var7 = 0; var7 < var6; ++var7) {
+                Material var8 = var1.getBlockMaterial(var3, var4 + var7, var5);
+
+                if (var8 == Material.air || var8 == Material.leaves) {
+                    this.setBlockAndMetadata(var1, var3, var4 + var7, var5, Block.wood.blockID, 1);
+                }
+
+                if (var7 < var6 - 1) {
+                    var8 = var1.getBlockMaterial(var3 + 1, var4 + var7, var5);
+
+                    if (var8 == Material.air || var8 == Material.leaves) {
+                        this.setBlockAndMetadata(var1, var3 + 1, var4 + var7, var5, Block.wood.blockID, 1);
+                    }
+
+                    var8 = var1.getBlockMaterial(var3 + 1, var4 + var7, var5 + 1);
+
+                    if (var8 == Material.air || var8 == Material.leaves) {
+                        this.setBlockAndMetadata(var1, var3 + 1, var4 + var7, var5 + 1, Block.wood.blockID, 1);
+                    }
+
+                    var8 = var1.getBlockMaterial(var3, var4 + var7, var5 + 1);
+
+                    if (var8 == Material.air || var8 == Material.leaves) {
+                        this.setBlockAndMetadata(var1, var3, var4 + var7, var5 + 1, Block.wood.blockID, 1);
+                    }
+                }
+            }
+
+            return true;
+        }
+    }
+
+    private void func_150541_c(World var1, int var2, int var3, int var4, int var5, Random var6) {
+        int var7 = var6.nextInt(5);
+
+        if (this.heightMod) {
+            var7 += this.heightVariation;
+        } else {
+            var7 += 3;
+        }
+
+        int var8 = 0;
+
+        for (int var9 = var4 - var7; var9 <= var4; ++var9) {
+            int var10 = var4 - var9;
+            int var11 = var5 + MathHelper.floor_float((float) var10 / (float) var7 * 3.5F);
+            this.func_150535_a(var1, var2, var9, var3,
+                    var11 + (var10 > 0 && var11 == var8 && (var9 & 1) == 0 ? 1 : 0), var6);
+            var8 = var11;
+        }
+    }
+
+    public void func_150524_b(World var1, Random var2, int var3, int var4, int var5) {
+        this.func_150539_c(var1, var2, var3 - 1, var4, var5 - 1);
+        this.func_150539_c(var1, var2, var3 + 2, var4, var5 - 1);
+        this.func_150539_c(var1, var2, var3 - 1, var4, var5 + 2);
+        this.func_150539_c(var1, var2, var3 + 2, var4, var5 + 2);
+
+        for (int var6 = 0; var6 < 5; ++var6) {
+            int var7 = var2.nextInt(64);
+            int var8 = var7 % 8;
+            int var9 = var7 / 8;
+
+            if (var8 == 0 || var8 == 7 || var9 == 0 || var9 == 7) {
+                this.func_150539_c(var1, var2, var3 - 3 + var8, var4, var5 - 3 + var9);
+            }
+        }
+    }
+
+    private void func_150539_c(World var1, Random var2, int var3, int var4, int var5) {
+        for (int var6 = -2; var6 <= 2; ++var6) {
+            for (int var7 = -2; var7 <= 2; ++var7) {
+                if (Math.abs(var6) != 2 || Math.abs(var7) != 2) {
+                    this.func_150540_a(var1, var3 + var6, var4, var5 + var7);
+                }
+            }
+        }
+    }
+
+    private void func_150540_a(World var1, int var2, int var3, int var4) {
+        for (int var5 = var3 + 2; var5 >= var3 - 3; --var5) {
+            int var6 = var1.getBlockId(var2, var5, var4);
+
+            if (var6 == Block.grass.blockID || var6 == Block.dirt.blockID) {
+                this.setBlockAndMetadata(var1, var2, var5, var4, Block.dirt.blockID, 0);
+				break;
+            }
+
+            if (var6 != 0 && var5 < var3) {
+                break;
+            }
+        }
+    }
+
+	protected boolean func_150523_a(Block var1) {
+        return var1 == null || var1.blockMaterial == Material.leaves
+                || var1 == Block.grass || var1 == Block.dirt || var1 == Block.wood
+                || var1 == Block.sapling || var1 == Block.vine;
+    }
+
+	private boolean func_150536_b(World var1, Random var2, int var3, int var4, int var5, int var6) {
+        boolean var7 = true;
+
+        if (var4 >= 1) {
+            for (int var8 = var4; var8 <= var4 + 1 + var6; ++var8) {
+                byte var9 = 2;
+
+                if (var8 == var4) {
+                    var9 = 1;
+                }
+
+                if (var8 >= var4 + 1 + var6 - 2) {
+                    var9 = 2;
+                }
+
+                for (int var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
+                    for (int var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
+                        if (var8 >= 0) {
+                            int var12 = var1.getBlockId(var10, var8, var11);
+
+                            if (!this.func_150523_a(Block.blocksList[var12])) {
+                                var7 = false;
+                            }
+                        } else {
+                            var7 = false;
+                        }
+                    }
+                }
+            }
+
+            return var7;
+        } else {
+            return false;
+        }
+    }
+
+	private boolean func_150532_c(World var1, Random var2, int var3, int var4, int var5) {
+        int var6 = var1.getBlockId(var3, var4 - 1, var5);
+
+        if ((var6 == Block.grass.blockID || var6 == Block.dirt.blockID) && var4 >= 2) {
+            var1.setBlockAndMetadata(var3, var4 - 1, var5, Block.dirt.blockID, 0);
+            var1.setBlockAndMetadata(var3 + 1, var4 - 1, var5, Block.dirt.blockID, 0);
+            var1.setBlockAndMetadata(var3, var4 - 1, var5 + 1, Block.dirt.blockID, 0);
+            var1.setBlockAndMetadata(var3 + 1, var4 - 1, var5 + 1, Block.dirt.blockID, 0);
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+	protected boolean func_150537_a(World var1, Random var2, int var3, int var4, int var5, int var6) {
+        return this.func_150536_b(var1, var2, var3, var4, var5, var6)
+                && this.func_150532_c(var1, var2, var3, var4, var5);
+    }
+
+	protected void func_150535_a(World var1, int var2, int var3, int var4, int var5, Random var6) {
+        int var7 = var5 * var5;
+
+        for (int var8 = var2 - var5; var8 <= var2 + var5 + 1; ++var8) {
+            int var9 = var8 - var2;
+
+            for (int var10 = var4 - var5; var10 <= var4 + var5 + 1; ++var10) {
+                int var11 = var10 - var4;
+                int var12 = var9 - 1;
+                int var13 = var11 - 1;
+
+                if (var9 * var9 + var11 * var11 <= var7 || var12 * var12 + var13 * var13 <= var7
+                        || var9 * var9 + var13 * var13 <= var7
+                        || var12 * var12 + var11 * var11 <= var7) {
+                    Material var14 = var1.getBlockMaterial(var8, var3, var10);
+
+                    if (var14 == Material.air || var14 == Material.leaves) {
+                        this.setBlockAndMetadata(var1, var8, var3, var10, Block.leaves.blockID, 1);
+                    }
+                }
+            }
+        }
+    }
+}
--- net/minecraft/src/WorldType.java
+++ net/minecraft/src/WorldType.java
@@ -4,21 +4,30 @@
 	public static final WorldType[] worldTypes = new WorldType[16];
 	public static final WorldType DEFAULT = (new WorldType(0, "default", 1)).func_48448_d();
 	public static final WorldType FLAT = new WorldType(1, "flat");
-	public static final WorldType DEFAULT_1_1 = (new WorldType(8, "default_1_1", 0)).setCanBeCreated(false);
+	public static final WorldType LARGE_BIOMES = new WorldType(2, "largeBiomes");
+	public static final WorldType SMALL_BIOMES = new WorldType(3, "smallBiomes");
+	public static final WorldType AMPLIFIED = new WorldType(4, "amplified");
+	public static final WorldType LEGACY = new WorldType(5, "legacy").setLegacyWorldGen();
+	public static final WorldTypeCustomized CUSTOMIZED = (WorldTypeCustomized)(new WorldTypeCustomized(6, "customized"));
+	public static final WorldTypeCustomized SINGLE_BIOME = (WorldTypeCustomized)(new WorldTypeCustomized(7, "singleBiome").setCanBeCreated(false));
+	public static final WorldType DEFAULT_1_1 = (new WorldType(8, "default_1_1", 0)).setCanBeCreated(false).setLegacyWorldGen();
 	private final String worldType;
 	private final int generatorVersion;
 	private boolean canBeCreated;
 	private boolean field_48460_h;
+	protected boolean legacyWorldGen;
 
-	private WorldType(int var1, String var2) {
+	protected WorldType(int var1, String var2) {
 		this(var1, var2, 0);
 	}
 
-	private WorldType(int var1, String var2, int var3) {
+	protected WorldType(int var1, String var2, int var3) {
 		this.worldType = var2;
 		this.generatorVersion = var3;
 		this.canBeCreated = true;
-		worldTypes[var1] = this;
+		if (var1 >= 0) {
+			worldTypes[var1] = this;
+		}
 	}
 
 	public String func_48449_a() {
@@ -33,18 +42,34 @@
 		return this == DEFAULT && var1 == 0 ? DEFAULT_1_1 : this;
 	}
 
-	private WorldType setCanBeCreated(boolean var1) {
+	protected WorldType setCanBeCreated(boolean var1) {
 		this.canBeCreated = var1;
 		return this;
 	}
 
-	private WorldType func_48448_d() {
+	protected WorldType func_48448_d() {
 		this.field_48460_h = true;
 		return this;
 	}
 
 	public boolean func_48453_c() {
 		return this.field_48460_h;
+	}
+
+	protected WorldType setLegacyWorldGen() {
+		this.legacyWorldGen = true;
+		return this;
+	}
+
+	public boolean useLegacyWorldGen() {
+		return this.legacyWorldGen;
+ 	}
+
+	public WorldType readData(NBTTagCompound var1) {
+		return this;
+	}
+
+	public void writeData(NBTTagCompound var1) {
 	}
 
 	public static WorldType parseWorldType(String var0) {
--- net/minecraft/src/WorldGenBigTree.java
+++ net/minecraft/src/WorldGenBigTree.java
@@ -335,9 +335,7 @@
 		this.basePos[0] = var3;
 		this.basePos[1] = var4;
 		this.basePos[2] = var5;
-		if(this.heightLimit == 0) {
-			this.heightLimit = 5 + this.rand.nextInt(this.heightLimitLimit);
-		}
+		this.heightLimit = 5 + this.rand.nextInt(this.heightLimitLimit);
 
 		if(!this.validTreeLocation()) {
 			return false;
--- /dev/null
+++ net/minecraft/src/ClimateZoneTemperature.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public enum ClimateZoneTemperature {
+	TEMPERATE,
+	COLD,
+	HOT
+}
--- /dev/null
+++ net/minecraft/src/BiomeGenMegaTaiga.java
@@ -1,0 +1,34 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenMegaTaiga extends BiomeGenBase {
+	private WorldGenMegaPineTree pineA = new WorldGenMegaPineTree(false);
+	private WorldGenMegaPineTree pineB = new WorldGenMegaPineTree(true);
+
+	protected BiomeGenMegaTaiga(int var1) {
+		super(var1);
+		this.spawnableCreatureList.add(new SpawnListEntry(EntityWolf.class, 8, 4, 4));
+		this.biomeDecorator.treesPerChunk = 10;
+		this.biomeDecorator.grassPerChunk = 7;
+		this.biomeDecorator.deadBushPerChunk = 1;
+		this.biomeDecorator.mushroomsPerChunk = 3;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(3) == 0 ? (var1.nextInt(13) != 0 ? this.pineA : this.pineB)
+				: BiomeGenBase.taiga.getRandomWorldGenForTrees(var1);
+	}
+
+	public WorldGenerator func_48410_b(Random var1) {
+		return new WorldGenTallGrass(Block.tallGrass.blockID, var1.nextInt(5) > 0 ? 2 : 1);
+	}
+
+	public float getMinHeight(int x, int z) {
+		return super.getMinHeight(x, z) + (doHills(x, z) ? 0.1F : 0.0F);
+	}
+
+	public float getMaxHeight(int x, int z) {
+		return super.getMaxHeight(x, z) + (doHills(x, z) ? 0.4F : 0.0F);
+	}
+}
--- net/minecraft/src/StructureStrongholdStart.java
+++ net/minecraft/src/StructureStrongholdStart.java
@@ -4,8 +4,11 @@
 import java.util.Random;
 
 class StructureStrongholdStart extends StructureStart {
+	private boolean hasPortal;
+
 	public StructureStrongholdStart(World var1, Random var2, int var3, int var4) {
-		StructureStrongholdPieces.prepareStructurePieces();
+		StructureStrongholdPieces.prepareStructurePieces(var2);
+		this.hasPortal = StructureStrongholdPieces.hasPortal();
 		ComponentStrongholdStairs2 var5 = new ComponentStrongholdStairs2(0, var2, (var3 << 4) + 2, (var4 << 4) + 2);
 		this.components.add(var5);
 		var5.buildComponent(var5, this.components, var2);
@@ -18,6 +21,14 @@
 		}
 
 		this.updateBoundingBox();
-		this.markAvailableHeight(var1, var2, 10);
+		int offset = -var2.nextInt(16);
+		this.boundingBox.offset(0, offset, 0);
+		for (Object component : this.components) {
+			((StructureComponent)component).getBoundingBox().offset(0, offset, 0);
+		}
+	}
+
+	public boolean isFindable() {
+		return this.hasPortal;
 	}
 }
--- /dev/null
+++ net/minecraft/src/GenLayerRemoveTooMuchOcean.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+public class GenLayerRemoveTooMuchOcean extends GenLayer {
+	public GenLayerRemoveTooMuchOcean(long var1, GenLayer var3) {
+		super(var1);
+		this.parent = var3;
+	}
+
+	public int[] getInts(int var1, int var2, int var3, int var4) {
+		int var5 = var1 - 1;
+        int var6 = var2 - 1;
+        int var7 = var3 + 2;
+        int var8 = var4 + 2;
+        int[] var9 = this.parent.getInts(var5, var6, var7, var8);
+        int[] var10 = IntCache.getIntCache(var3 * var4);
+
+        for (int var11 = 0; var11 < var4; ++var11) {
+            for (int var12 = 0; var12 < var3; ++var12) {
+                int var13 = var9[var12 + 1 + (var11 + 1 - 1) * (var3 + 2)];
+                int var14 = var9[var12 + 1 + 1 + (var11 + 1) * (var3 + 2)];
+                int var15 = var9[var12 + 1 - 1 + (var11 + 1) * (var3 + 2)];
+                int var16 = var9[var12 + 1 + (var11 + 1 + 1) * (var3 + 2)];
+                int var17 = var9[var12 + 1 + (var11 + 1) * var7];
+                var10[var12 + var11 * var3] = var17;
+                this.initChunkSeed((long) (var12 + var1), (long) (var11 + var2));
+
+                if (var17 == 0 && var13 == 0 && var14 == 0 && var15 == 0 && var16 == 0
+                        && this.nextInt(2) == 0) {
+                    var10[var12 + var11 * var3] = 1;
+                }
+            }
+        }
+
+        return var10;
+	}
+}
--- net/minecraft/src/WorldGenForest.java
+++ net/minecraft/src/WorldGenForest.java
@@ -3,14 +3,21 @@
 import java.util.Random;
 
 public class WorldGenForest extends WorldGenerator {
+	boolean tall = false;
+
 	public WorldGenForest(boolean var1) {
 		super(var1);
 	}
 
+	public WorldGenForest(boolean var1, boolean var2) {
+		super(var1);
+		this.tall = var2;
+	}
+
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		int var6 = var2.nextInt(3) + 5;
+		int var6 = var2.nextInt(this.tall ? 9 : 3) + 5;
 		boolean var7 = true;
-		if(var4 >= 1 && var4 + var6 + 1 <= 256) {
+		if(var4 >= 1) {
 			int var8;
 			int var10;
 			int var11;
@@ -27,7 +34,7 @@
 
 				for(var10 = var3 - var9; var10 <= var3 + var9 && var7; ++var10) {
 					for(var11 = var5 - var9; var11 <= var5 + var9 && var7; ++var11) {
-						if(var8 >= 0 && var8 < 256) {
+						if(var8 >= 0) {
 							var12 = var1.getBlockId(var10, var8, var11);
 							if(var12 != 0 && var12 != Block.leaves.blockID) {
 								var7 = false;
@@ -43,7 +50,7 @@
 				return false;
 			} else {
 				var8 = var1.getBlockId(var3, var4 - 1, var5);
-				if((var8 == Block.grass.blockID || var8 == Block.dirt.blockID) && var4 < 256 - var6 - 1) {
+				if(var8 == Block.grass.blockID || var8 == Block.dirt.blockID) {
 					this.func_50023_a(var1, var3, var4 - 1, var5, Block.dirt.blockID);
 
 					int var16;
--- net/minecraft/src/NetServerHandler.java
+++ net/minecraft/src/NetServerHandler.java
@@ -191,9 +191,6 @@
 
 				float var21 = 1.0F / 16.0F;
 				boolean var22 = var2.getCollidingBoundingBoxes(this.playerEntity, this.playerEntity.boundingBox.copy().contract((double)var21, (double)var21, (double)var21)).size() == 0;
-				if(this.playerEntity.onGround && !var1.onGround && var15 > 0.0D) {
-					this.playerEntity.addExhaustion(0.2F);
-				}
 
 				this.playerEntity.moveEntity(var13, var15, var17);
 				this.playerEntity.onGround = var1.onGround;
@@ -259,6 +256,8 @@
 			this.playerEntity.dropOneItem();
 		} else if(var1.status == 5) {
 			this.playerEntity.stopUsingItem();
+		} else if(var1.status == 6) {
+			this.playerEntity.dropItemStack();
 		} else {
 			boolean var3 = var2.disableSpawnProtection = var2.worldProvider.worldType != 0 || this.mcServer.configManager.isOp(this.playerEntity.username);
 			boolean var4 = false;
--- net/minecraft/src/GenLayerAddIsland.java
+++ net/minecraft/src/GenLayerAddIsland.java
@@ -1,11 +1,18 @@
 package net.minecraft.src;
 
 public class GenLayerAddIsland extends GenLayer {
+	private boolean smooth;
+
 	public GenLayerAddIsland(long var1, GenLayer var3) {
 		super(var1);
 		this.parent = var3;
 	}
 
+	public GenLayerAddIsland smooth() {
+		this.smooth = true;
+		return this;
+	}
+
 	public int[] getInts(int var1, int var2, int var3, int var4) {
 		int var5 = var1 - 1;
 		int var6 = var2 - 1;
@@ -16,15 +23,24 @@
 
 		for(int var11 = 0; var11 < var4; ++var11) {
 			for(int var12 = 0; var12 < var3; ++var12) {
-				int var13 = var9[var12 + 0 + (var11 + 0) * var7];
-				int var14 = var9[var12 + 2 + (var11 + 0) * var7];
-				int var15 = var9[var12 + 0 + (var11 + 2) * var7];
-				int var16 = var9[var12 + 2 + (var11 + 2) * var7];
+				int var13, var14, var15, var16;
+
+				if (smooth) {
+					var13 = var9[var12 + 0 + (var11 + 1) * var7];
+					var14 = var9[var12 + 2 + (var11 + 1) * var7];
+					var15 = var9[var12 + 1 + (var11 + 0) * var7];
+					var16 = var9[var12 + 1 + (var11 + 2) * var7];
+				} else {
+					var13 = var9[var12 + 0 + (var11 + 0) * var7];
+					var14 = var9[var12 + 2 + (var11 + 0) * var7];
+					var15 = var9[var12 + 0 + (var11 + 2) * var7];
+					var16 = var9[var12 + 2 + (var11 + 2) * var7];
+				}
 				int var17 = var9[var12 + 1 + (var11 + 1) * var7];
 				this.initChunkSeed((long)(var12 + var1), (long)(var11 + var2));
 				if(var17 != 0 || var13 == 0 && var14 == 0 && var15 == 0 && var16 == 0) {
 					if(var17 > 0 && (var13 == 0 || var14 == 0 || var15 == 0 || var16 == 0)) {
-						if(this.nextInt(5) == 0) {
+						if(!this.smooth && this.nextInt(5) == 0) {
 							if(var17 == BiomeGenBase.icePlains.biomeID) {
 								var10[var12 + var11 * var3] = BiomeGenBase.frozenOcean.biomeID;
 							} else {
--- net/minecraft/src/ComponentStrongholdChestCorridor.java
+++ net/minecraft/src/ComponentStrongholdChestCorridor.java
@@ -4,7 +4,7 @@
 import java.util.Random;
 
 public class ComponentStrongholdChestCorridor extends ComponentStronghold {
-	private static final StructurePieceTreasure[] chestLoot = new StructurePieceTreasure[]{new StructurePieceTreasure(Item.enderPearl.shiftedIndex, 0, 1, 1, 10), new StructurePieceTreasure(Item.diamond.shiftedIndex, 0, 1, 3, 3), new StructurePieceTreasure(Item.ingotIron.shiftedIndex, 0, 1, 5, 10), new StructurePieceTreasure(Item.ingotGold.shiftedIndex, 0, 1, 3, 5), new StructurePieceTreasure(Item.redstone.shiftedIndex, 0, 4, 9, 5), new StructurePieceTreasure(Item.bread.shiftedIndex, 0, 1, 3, 15), new StructurePieceTreasure(Item.appleRed.shiftedIndex, 0, 1, 3, 15), new StructurePieceTreasure(Item.pickaxeSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.swordSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.plateSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.helmetSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.legsSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.bootsSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.appleGold.shiftedIndex, 0, 1, 1, 1)};
+	private static final StructurePieceTreasure[] chestLoot = new StructurePieceTreasure[]{new StructurePieceTreasure(Item.enderPearl.shiftedIndex, 0, 1, 1, 10), new StructurePieceTreasure(Item.diamond.shiftedIndex, 0, 1, 3, 3), new StructurePieceTreasure(Item.ingotIron.shiftedIndex, 0, 1, 5, 10), new StructurePieceTreasure(Item.ingotGold.shiftedIndex, 0, 1, 3, 5), new StructurePieceTreasure(Item.redstone.shiftedIndex, 0, 4, 9, 5), new StructurePieceTreasure(Item.bread.shiftedIndex, 0, 1, 3, 15), new StructurePieceTreasure(Item.appleRed.shiftedIndex, 0, 1, 3, 15), new StructurePieceTreasure(Item.pickaxeSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.swordSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.plateChain.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.helmetChain.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.legsChain.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.bootsChain.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.appleGold.shiftedIndex, 0, 1, 1, 1)};
 	private final EnumDoor doorType;
 	private boolean hasMadeChest;
 
--- net/minecraft/src/Item.java
+++ net/minecraft/src/Item.java
@@ -68,7 +68,7 @@
 	public static Item legsGold = (new ItemArmor(60, EnumArmorMaterial.GOLD, 4, 2)).setIconCoord(4, 2).setItemName("leggingsGold");
 	public static Item bootsGold = (new ItemArmor(61, EnumArmorMaterial.GOLD, 4, 3)).setIconCoord(4, 3).setItemName("bootsGold");
 	public static Item flint = (new Item(62)).setIconCoord(6, 0).setItemName("flint");
-	public static Item porkRaw = (new ItemFood(63, 3, 0.3F, true)).setIconCoord(7, 5).setItemName("porkchopRaw");
+	public static Item porkRaw = (new ItemFood(63, 3, 0.3F, true)).setPotionEffect(Potion.hunger.id, 20, 1, 0.5F).setIconCoord(7, 5).setItemName("porkchopRaw");
 	public static Item porkCooked = (new ItemFood(64, 8, 0.8F, true)).setIconCoord(8, 5).setItemName("porkchopCooked");
 	public static Item painting = (new ItemPainting(65)).setIconCoord(10, 1).setItemName("painting");
 	public static Item appleGold = (new ItemAppleGold(66, 4, 1.2F, false)).setAlwaysEdible().setPotionEffect(Potion.regeneration.id, 5, 0, 1.0F).setIconCoord(11, 0).setItemName("appleGold");
@@ -98,7 +98,7 @@
 	public static Item fishingRod = (new ItemFishingRod(90)).setIconCoord(5, 4).setItemName("fishingRod");
 	public static Item pocketSundial = (new Item(91)).setIconCoord(6, 4).setItemName("clock");
 	public static Item lightStoneDust = (new Item(92)).setIconCoord(9, 4).setItemName("yellowDust").setPotionEffect(PotionHelper.glowstoneEffect);
-	public static Item fishRaw = (new ItemFood(93, 2, 0.3F, false)).setIconCoord(9, 5).setItemName("fishRaw");
+	public static Item fishRaw = (new ItemFood(93, 2, 0.3F, false)).setPotionEffect(Potion.hunger.id, 20, 1, 0.5F).setIconCoord(9, 5).setItemName("fishRaw");
 	public static Item fishCooked = (new ItemFood(94, 5, 0.6F, false)).setIconCoord(10, 5).setItemName("fishCooked");
 	public static Item dyePowder = (new ItemDye(95)).setIconCoord(14, 4).setItemName("dyePowder");
 	public static Item bone = (new Item(96)).setIconCoord(12, 1).setItemName("bone").setFull3D();
@@ -114,9 +114,9 @@
 	public static Item melonSeeds = (new ItemSeeds(106, Block.melonStem.blockID, Block.tilledField.blockID)).setIconCoord(14, 3).setItemName("seeds_melon");
 	public static Item beefRaw = (new ItemFood(107, 3, 0.3F, true)).setIconCoord(9, 6).setItemName("beefRaw");
 	public static Item beefCooked = (new ItemFood(108, 8, 0.8F, true)).setIconCoord(10, 6).setItemName("beefCooked");
-	public static Item chickenRaw = (new ItemFood(109, 2, 0.3F, true)).setPotionEffect(Potion.hunger.id, 30, 0, 0.3F).setIconCoord(9, 7).setItemName("chickenRaw");
+	public static Item chickenRaw = (new ItemFood(109, 2, 0.3F, true)).setPotionEffect(Potion.hunger.id, 20, 1, 0.5F).setIconCoord(9, 7).setItemName("chickenRaw");
 	public static Item chickenCooked = (new ItemFood(110, 6, 0.6F, true)).setIconCoord(10, 7).setItemName("chickenCooked");
-	public static Item rottenFlesh = (new ItemFood(111, 4, 0.1F, true)).setPotionEffect(Potion.hunger.id, 30, 0, 0.8F).setIconCoord(11, 5).setItemName("rottenFlesh");
+	public static Item rottenFlesh = (new ItemFood(111, 4, 0.1F, true)).setPotionEffect(Potion.poison.id, 10, 0, 1.0F).setIconCoord(11, 5).setItemName("rottenFlesh");
 	public static Item enderPearl = (new ItemEnderPearl(112)).setIconCoord(11, 6).setItemName("enderPearl");
 	public static Item blazeRod = (new Item(113)).setIconCoord(12, 6).setItemName("blazeRod");
 	public static Item ghastTear = (new Item(114)).setIconCoord(11, 7).setItemName("ghastTear").setPotionEffect(PotionHelper.ghastTearEffect);
@@ -135,6 +135,9 @@
 	public static Item monsterPlacer = (new ItemMonsterPlacer(127)).setIconCoord(9, 9).setItemName("monsterPlacer");
 	public static Item expBottle = (new ItemExpBottle(128)).setIconCoord(11, 10).setItemName("expBottle");
 	public static Item fireballCharge = (new ItemFireball(129)).setIconCoord(14, 2).setItemName("fireball");
+	public static Item muttonRaw = (new ItemFood(130, 2, 0.3F, true)).setIconCoord(7, 7).setItemName("muttonRaw");
+	public static Item muttonCooked = (new ItemFood(131, 6, 0.6F, true)).setIconCoord(8, 7).setItemName("muttonCooked");
+	public static Item pigmanFlesh = (new ItemFood(132, 6, 0.1F, true)).setPotionEffect(Potion.hunger.id, 20, 2, 1.0F).setIconCoord(6, 6).setItemName("pigmanFlesh");
 	public static Item record13 = (new ItemRecord(2000, "13")).setIconCoord(0, 15).setItemName("record");
 	public static Item recordCat = (new ItemRecord(2001, "cat")).setIconCoord(1, 15).setItemName("record");
 	public static Item recordBlocks = (new ItemRecord(2002, "blocks")).setIconCoord(2, 15).setItemName("record");
@@ -348,6 +351,26 @@
 
 	public int getItemEnchantability() {
 		return 0;
+	}
+
+	public static void enableClassicTweaks() {
+		for (Item item : itemsList) {
+			if (item != null)
+				item.setClassicTweaks();
+		}
+	}
+
+	public static void disableClassicTweaks() {
+		for (Item item : itemsList) {
+			if (item != null)
+				item.unsetClassicTweaks();
+		}
+	}
+
+	protected void setClassicTweaks() {
+	}
+
+	protected void unsetClassicTweaks() {
 	}
 
 	static {
--- net/minecraft/src/ComponentVillageHall.java
+++ net/minecraft/src/ComponentVillageHall.java
@@ -38,10 +38,10 @@
 		this.fillWithBlocks(var1, var3, 8, 1, 6, 8, 1, 10, Block.fence.blockID, Block.fence.blockID, false);
 		this.fillWithBlocks(var1, var3, 3, 1, 10, 7, 1, 10, Block.fence.blockID, Block.fence.blockID, false);
 		this.fillWithBlocks(var1, var3, 1, 0, 1, 7, 0, 4, Block.planks.blockID, Block.planks.blockID, false);
-		this.fillWithBlocks(var1, var3, 0, 0, 0, 0, 3, 5, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 8, 0, 0, 8, 3, 5, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 1, 0, 0, 7, 1, 0, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 1, 0, 5, 7, 1, 5, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 0, 0, 0, 3, 5, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 8, 0, 0, 8, 3, 5, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 1, 0, 0, 7, 1, 0, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 1, 0, 5, 7, 1, 5, false, var2, StructureVillagePieces.villageStones);
 		this.fillWithBlocks(var1, var3, 1, 2, 0, 7, 3, 0, Block.planks.blockID, Block.planks.blockID, false);
 		this.fillWithBlocks(var1, var3, 1, 2, 5, 7, 3, 5, Block.planks.blockID, Block.planks.blockID, false);
 		this.fillWithBlocks(var1, var3, 0, 4, 1, 8, 4, 1, Block.planks.blockID, Block.planks.blockID, false);
--- net/minecraft/src/EntityExpBottle.java
+++ net/minecraft/src/EntityExpBottle.java
@@ -27,8 +27,18 @@
 
 	protected void onImpact(MovingObjectPosition var1) {
 		if(!this.worldObj.isRemote) {
+			if (this.worldObj.worldInfo.isClassicModeEnabled()) {
+			this.worldObj.playAuxSFX(2001, (int)Math.round(this.posX), (int)Math.round(this.posY), (int)Math.round(this.posZ), Block.glass.blockID);
+				this.worldObj.playSoundAtEntity(this, "random.break", 1.0F, 0.8F + this.worldObj.rand.nextFloat() * 0.4F);
+				this.setDead();
+				return;
+			}
+
 			this.worldObj.playAuxSFX(2002, (int)Math.round(this.posX), (int)Math.round(this.posY), (int)Math.round(this.posZ), 0);
 			int var2 = 3 + this.worldObj.rand.nextInt(5) + this.worldObj.rand.nextInt(5);
+			if (this.worldObj.worldInfo.isHardcoreModeEnabled()) {
+				var2 *= 2;
+			}
 
 			while(var2 > 0) {
 				int var3 = EntityXPOrb.getXPSplit(var2);
--- net/minecraft/src/BiomeCacheBlock.java
+++ net/minecraft/src/BiomeCacheBlock.java
@@ -24,4 +24,12 @@
 	public BiomeGenBase getBiomeGenAt(int var1, int var2) {
 		return this.biomes[var1 & 15 | (var2 & 15) << 4];
 	}
+
+	public float getTemperatureAt(int var1, int var2) {
+		return this.temperatureValues[var1 & 15 | (var2 & 15) << 4];
+	}
+
+	public float getRainfallAt(int var1, int var2) {
+		return this.rainfallValues[var1 & 15 | (var2 & 15) << 4];
+	}
 }
--- /dev/null
+++ net/minecraft/src/NoiseGeneratorSimplex.java
@@ -1,0 +1,186 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class NoiseGeneratorSimplex {
+    private static int[][] field_151611_e =
+            new int[][] {{1, 1, 0}, {-1, 1, 0}, {1, -1, 0}, {-1, -1, 0}, {1, 0, 1}, {-1, 0, 1},
+                    {1, 0, -1}, {-1, 0, -1}, {0, 1, 1}, {0, -1, 1}, {0, 1, -1}, {0, -1, -1}};
+    public static final double field_151614_a = Math.sqrt(3.0D);
+    private int[] field_151608_f;
+    public double field_151612_b;
+    public double field_151613_c;
+    public double field_151610_d;
+    private static final double field_151609_g = 0.5D * (field_151614_a - 1.0D);
+    private static final double field_151615_h = (3.0D - field_151614_a) / 6.0D;
+
+    public NoiseGeneratorSimplex() {
+        this(new Random());
+    }
+
+    public NoiseGeneratorSimplex(Random p_i45471_1_) {
+        this.field_151608_f = new int[512];
+        this.field_151612_b = p_i45471_1_.nextDouble() * 256.0D;
+        this.field_151613_c = p_i45471_1_.nextDouble() * 256.0D;
+        this.field_151610_d = p_i45471_1_.nextDouble() * 256.0D;
+        int var2;
+
+        for (var2 = 0; var2 < 256; this.field_151608_f[var2] = var2++) {
+            ;
+        }
+
+        for (var2 = 0; var2 < 256; ++var2) {
+            int var3 = p_i45471_1_.nextInt(256 - var2) + var2;
+            int var4 = this.field_151608_f[var2];
+            this.field_151608_f[var2] = this.field_151608_f[var3];
+            this.field_151608_f[var3] = var4;
+            this.field_151608_f[var2 + 256] = this.field_151608_f[var2];
+        }
+    }
+
+    private static int func_151607_a(double var0) {
+        return var0 > 0.0D ? (int) var0 : (int) var0 - 1;
+    }
+
+    private static double func_151604_a(int[] var0, double var1, double var3) {
+        return (double) var0[0] * var1 + (double) var0[1] * var3;
+    }
+
+    public double func_151605_a(double var1, double var3) {
+        double var11 = 0.5D * (field_151614_a - 1.0D);
+        double var13 = (var1 + var3) * var11;
+        int var15 = func_151607_a(var1 + var13);
+        int var16 = func_151607_a(var3 + var13);
+        double var17 = (3.0D - field_151614_a) / 6.0D;
+        double var19 = (double) (var15 + var16) * var17;
+        double var21 = (double) var15 - var19;
+        double var23 = (double) var16 - var19;
+        double var25 = var1 - var21;
+        double var27 = var3 - var23;
+        byte var29;
+        byte var30;
+
+        if (var25 > var27) {
+            var29 = 1;
+            var30 = 0;
+        } else {
+            var29 = 0;
+            var30 = 1;
+        }
+
+        double var31 = var25 - (double) var29 + var17;
+        double var33 = var27 - (double) var30 + var17;
+        double var35 = var25 - 1.0D + 2.0D * var17;
+        double var37 = var27 - 1.0D + 2.0D * var17;
+        int var39 = var15 & 255;
+        int var40 = var16 & 255;
+        int var41 = this.field_151608_f[var39 + this.field_151608_f[var40]] % 12;
+        int var42 = this.field_151608_f[var39 + var29 + this.field_151608_f[var40 + var30]] % 12;
+        int var43 = this.field_151608_f[var39 + 1 + this.field_151608_f[var40 + 1]] % 12;
+        double var44 = 0.5D - var25 * var25 - var27 * var27;
+        double var5;
+
+        if (var44 < 0.0D) {
+            var5 = 0.0D;
+        } else {
+            var44 *= var44;
+            var5 = var44 * var44 * func_151604_a(field_151611_e[var41], var25, var27);
+        }
+
+        double var46 = 0.5D - var31 * var31 - var33 * var33;
+        double var7;
+
+        if (var46 < 0.0D) {
+            var7 = 0.0D;
+        } else {
+            var46 *= var46;
+            var7 = var46 * var46 * func_151604_a(field_151611_e[var42], var31, var33);
+        }
+
+        double var48 = 0.5D - var35 * var35 - var37 * var37;
+        double var9;
+
+        if (var48 < 0.0D) {
+            var9 = 0.0D;
+        } else {
+            var48 *= var48;
+            var9 = var48 * var48 * func_151604_a(field_151611_e[var43], var35, var37);
+        }
+
+        return 70.0D * (var5 + var7 + var9);
+    }
+
+    public void func_151606_a(double[] var1, double var2, double var4, int var6, int var7,
+            double var8, double var10, double var12) {
+        int var14 = 0;
+
+        for (int var15 = 0; var15 < var7; ++var15) {
+            double var16 = (var4 + (double) var15) * var10 + this.field_151613_c;
+
+            for (int var18 = 0; var18 < var6; ++var18) {
+                double var19 = (var2 + (double) var18) * var8 + this.field_151612_b;
+                double var27 = (var19 + var16) * field_151609_g;
+                int var29 = func_151607_a(var19 + var27);
+                int var30 = func_151607_a(var16 + var27);
+                double var31 = (double) (var29 + var30) * field_151615_h;
+                double var33 = (double) var29 - var31;
+                double var35 = (double) var30 - var31;
+                double var37 = var19 - var33;
+                double var39 = var16 - var35;
+                byte var41;
+                byte var42;
+
+                if (var37 > var39) {
+                    var41 = 1;
+                    var42 = 0;
+                } else {
+                    var41 = 0;
+                    var42 = 1;
+                }
+
+                double var43 = var37 - (double) var41 + field_151615_h;
+                double var45 = var39 - (double) var42 + field_151615_h;
+                double var47 = var37 - 1.0D + 2.0D * field_151615_h;
+                double var49 = var39 - 1.0D + 2.0D * field_151615_h;
+                int var51 = var29 & 255;
+                int var52 = var30 & 255;
+                int var53 = this.field_151608_f[var51 + this.field_151608_f[var52]] % 12;
+                int var54 = this.field_151608_f[var51 + var41 + this.field_151608_f[var52 + var42]]
+                        % 12;
+                int var55 = this.field_151608_f[var51 + 1 + this.field_151608_f[var52 + 1]] % 12;
+                double var56 = 0.5D - var37 * var37 - var39 * var39;
+                double var21;
+
+                if (var56 < 0.0D) {
+                    var21 = 0.0D;
+                } else {
+                    var56 *= var56;
+                    var21 = var56 * var56 * func_151604_a(field_151611_e[var53], var37, var39);
+                }
+
+                double var58 = 0.5D - var43 * var43 - var45 * var45;
+                double var23;
+
+                if (var58 < 0.0D) {
+                    var23 = 0.0D;
+                } else {
+                    var58 *= var58;
+                    var23 = var58 * var58 * func_151604_a(field_151611_e[var54], var43, var45);
+                }
+
+                double var60 = 0.5D - var47 * var47 - var49 * var49;
+                double var25;
+
+                if (var60 < 0.0D) {
+                    var25 = 0.0D;
+                } else {
+                    var60 *= var60;
+                    var25 = var60 * var60 * func_151604_a(field_151611_e[var55], var47, var49);
+                }
+
+                int var10001 = var14++;
+                var1[var10001] += 70.0D * (var21 + var23 + var25) * var12;
+            }
+        }
+    }
+}
--- net/minecraft/src/MapGenStructure.java
+++ net/minecraft/src/MapGenStructure.java
@@ -86,7 +86,7 @@
 		double var23;
 		while(var16.hasNext()) {
 			StructureStart var17 = (StructureStart)var16.next();
-			if(var17.isSizeableStructure()) {
+			if(var17.isFindable() && var17.isSizeableStructure()) {
 				StructureComponent var18 = (StructureComponent)var17.getComponents().get(0);
 				var19 = var18.getCenter();
 				var20 = var19.x - var2;
--- net/minecraft/src/ComponentVillageHouse1.java
+++ net/minecraft/src/ComponentVillageHouse1.java
@@ -31,10 +31,10 @@
 		}
 
 		this.fillWithBlocks(var1, var3, 1, 1, 1, 7, 5, 4, 0, 0, false);
-		this.fillWithBlocks(var1, var3, 0, 0, 0, 8, 0, 5, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 0, 5, 0, 8, 5, 5, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 0, 6, 1, 8, 6, 4, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 0, 7, 2, 8, 7, 3, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 0, 0, 8, 0, 5, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 5, 0, 8, 5, 5, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 6, 1, 8, 6, 4, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 7, 2, 8, 7, 3, false, var2, StructureVillagePieces.villageStones);
 		int var4 = this.getMetadataWithOffset(Block.stairCompactPlanks.blockID, 3);
 		int var5 = this.getMetadataWithOffset(Block.stairCompactPlanks.blockID, 2);
 
@@ -47,14 +47,14 @@
 			}
 		}
 
-		this.fillWithBlocks(var1, var3, 0, 1, 0, 0, 1, 5, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 1, 1, 5, 8, 1, 5, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 8, 1, 0, 8, 1, 4, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 2, 1, 0, 7, 1, 0, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 0, 2, 0, 0, 4, 0, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 0, 2, 5, 0, 4, 5, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 8, 2, 5, 8, 4, 5, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 8, 2, 0, 8, 4, 0, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 1, 0, 0, 1, 5, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 1, 1, 5, 8, 1, 5, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 8, 1, 0, 8, 1, 4, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 2, 1, 0, 7, 1, 0, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 2, 0, 0, 4, 0, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 0, 2, 5, 0, 4, 5, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 8, 2, 5, 8, 4, 5, false, var2, StructureVillagePieces.villageStones);
+		this.fillWithRandomizedBlocks(var1, var3, 8, 2, 0, 8, 4, 0, false, var2, StructureVillagePieces.villageStones);
 		this.fillWithBlocks(var1, var3, 0, 2, 1, 0, 4, 4, Block.planks.blockID, Block.planks.blockID, false);
 		this.fillWithBlocks(var1, var3, 1, 2, 5, 7, 4, 5, Block.planks.blockID, Block.planks.blockID, false);
 		this.fillWithBlocks(var1, var3, 8, 2, 1, 8, 4, 4, Block.planks.blockID, Block.planks.blockID, false);
--- /dev/null
+++ net/minecraft/src/WorldGenCrags.java
@@ -1,0 +1,35 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenCrags extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int height = var2.nextInt(14) + 4;
+		int radius = var2.nextInt(6) + 3;
+		float radiusSquare = radius * radius;
+
+		for (int x = -radius; x <= radius; x++) {
+			for (int z = -radius; z <= radius; z++) {
+				float distSquare = x * x + z * z;
+				float slope = 1 - distSquare / radiusSquare;
+
+				if (slope < 0) continue;
+				if (slope > 1) slope = 1;
+
+				slope *= slope;
+				int intSlope = (int) (slope * height);
+
+				int ground = var1.getTopSolidOrLiquidBlock(x + var3, z + var5);
+				if (intSlope > 0 && var1.getBlockId(x + var3, ground - 1, z + var5) == Block.grass.blockID) {
+					this.setBlockAndMetadata(var1, x + var3, ground - 1, z + var5, Block.dirt.blockID, 0);
+				}
+
+				for (int y = 0; y < intSlope; y++) {
+					this.setBlockAndMetadata(var1, x + var3, y + ground, z + var5, Block.stone.blockID, 0);
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- /dev/null
+++ net/minecraft/src/NoiseGeneratorSimplexOctaves.java
@@ -1,0 +1,71 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class NoiseGeneratorSimplexOctaves extends NoiseGenerator {
+    private NoiseGeneratorSimplex[] field_151603_a;
+    private int field_151602_b;
+
+    public NoiseGeneratorSimplexOctaves(Random p_i45470_1_, int p_i45470_2_) {
+        this.field_151602_b = p_i45470_2_;
+        this.field_151603_a = new NoiseGeneratorSimplex[p_i45470_2_];
+
+        for (int var3 = 0; var3 < p_i45470_2_; ++var3) {
+            this.field_151603_a[var3] = new NoiseGeneratorSimplex(p_i45470_1_);
+        }
+    }
+
+    public double func_151601_a(double var1, double var3) {
+        double var5 = 0.0D;
+        double var7 = 1.0D;
+
+        for (int var9 = 0; var9 < this.field_151602_b; ++var9) {
+            var5 += this.field_151603_a[var9].func_151605_a(var1 * var7, var3 * var7) / var7;
+            var7 /= 2.0D;
+        }
+
+        return var5;
+    }
+
+    public double generateNoiseNormalized(double var1, double var3) {
+        double var5 = 0.0D;
+        double var7 = 1.0D;
+        double var7a = 0.0D;
+
+        for (int var9 = 0; var9 < this.field_151602_b; ++var9) {
+            var5 += this.field_151603_a[var9].func_151605_a(var1 * var7, var3 * var7) / var7;
+            var7a += 1.0F / var7;
+            var7 /= 2.0D;
+        }
+
+        return var5 / var7a;
+    }
+
+    public double[] func_151599_a(double[] var1, double var2, double var4, int var6, int var7,
+            double var8, double var10, double var12) {
+        return this.func_151600_a(var1, var2, var4, var6, var7, var8, var10, var12, 0.5D);
+    }
+
+    public double[] func_151600_a(double[] var1, double var2, double var4, int var6, int var7,
+            double var8, double var10, double var12, double var14) {
+        if (var1 != null && var1.length >= var6 * var7) {
+            for (int var16 = 0; var16 < var1.length; ++var16) {
+                var1[var16] = 0.0D;
+            }
+        } else {
+            var1 = new double[var6 * var7];
+        }
+
+        double var21 = 1.0D;
+        double var18 = 1.0D;
+
+        for (int var20 = 0; var20 < this.field_151602_b; ++var20) {
+            this.field_151603_a[var20].func_151606_a(var1, var2, var4, var6, var7,
+                    var8 * var18 * var21, var10 * var18 * var21, 0.55D / var21);
+            var18 *= var12;
+            var21 *= var14;
+        }
+
+        return var1;
+    }
+}
--- /dev/null
+++ net/minecraft/src/ClimateZone.java
@@ -1,0 +1,118 @@
+package net.minecraft.src;
+
+import java.util.*;
+
+import static net.minecraft.src.BiomeGenBase.*;
+
+public enum ClimateZone {
+	TEMPERATE(
+			0,
+			plains,
+			forest,
+			birchForest,
+			birchForest,
+			parchedForest,
+			extremeHills,
+			snowcappedPeaks,
+			highlands
+	),
+	HOT(
+			1,
+			jungle,
+			jungle,
+			rainforest,
+			rainforest,
+			mushroomValley,
+			swampland,
+			savanna,
+			desert
+	),
+	COOL(
+			0,
+			taiga,
+			megaTaiga,
+			extremeHills,
+			highlands,
+			taiga,
+			windsweptCrags,
+			snowcappedHills,
+			snowcappedPeaks,
+			snowcappedHills
+	),
+	WARM(
+			0,
+			forest,
+			plains,
+			parchedForest,
+			desert,
+			swampland,
+			savanna
+	),
+	SNOWY(
+			-1,
+			snowyTaiga,
+			snowyTaiga,
+			icePlains,
+			icePlains,
+			iceMountains,
+			frostyHighlands
+	);
+
+	public static final ClimateZone[] allZones = values();
+	private static final Map<Integer, List<ClimateZone>> zonesPerTemperature;
+	public static final List<ClimateZone> zeroZones;
+	private static final int minTemperature;
+	private static final int maxTemperature;
+
+	static {
+		Map<Integer, List<ClimateZone>> zones = new HashMap<>();
+		int minTemp = 0;
+		int maxTemp = 0;
+
+		for (ClimateZone zone : allZones) {
+			if (zone.temperature < minTemp) {
+				minTemp = zone.temperature;
+			}
+			if (zone.temperature > maxTemp) {
+				maxTemp = zone.temperature;
+			}
+			zones.computeIfAbsent(zone.temperature, k -> new ArrayList<>()).add(zone);
+		}
+
+		for (int k : zones.keySet()) {
+			zones.computeIfPresent(k, (y, v) -> Collections.unmodifiableList(v));
+		}
+
+		zonesPerTemperature = Collections.unmodifiableMap(zones);
+		zeroZones = zonesPerTemperature.get(0);
+		minTemperature = minTemp;
+		maxTemperature = maxTemp;
+	}
+
+	public final int temperature;
+	public final BiomeGenBase[] biomes;
+
+	ClimateZone(int temperature, BiomeGenBase... biomes) {
+		this.temperature = temperature;
+		this.biomes = biomes;
+	}
+
+	public int id() {
+		return this.ordinal() + 1;
+	}
+
+	public static ClimateZone getZoneFromId(int id) {
+		if (id < 1 || id > allZones.length + 1) return null;
+		return allZones[id - 1];
+	}
+
+	public static List<ClimateZone> getZonesFromTemperature(int temperature) {
+		if (temperature < minTemperature) {
+			temperature = minTemperature;
+		} else if (temperature > maxTemperature) {
+			temperature = maxTemperature;
+		}
+
+		return zonesPerTemperature.getOrDefault(temperature, zeroZones);
+	}
+}
--- net/minecraft/src/BiomeGenPlains.java
+++ net/minecraft/src/BiomeGenPlains.java
@@ -3,8 +3,8 @@
 public class BiomeGenPlains extends BiomeGenBase {
 	protected BiomeGenPlains(int var1) {
 		super(var1);
-		this.biomeDecorator.treesPerChunk = -999;
+		this.biomeDecorator.treesPerChunk = 0;
 		this.biomeDecorator.flowersPerChunk = 4;
-		this.biomeDecorator.grassPerChunk = 10;
+		this.biomeDecorator.grassPerChunk = 5;
 	}
 }
--- net/minecraft/src/GenLayerZoom.java
+++ net/minecraft/src/GenLayerZoom.java
@@ -87,7 +87,7 @@
 		}
 	}
 
-	public static GenLayer func_35025_a(long var0, GenLayer var2, int var3) {
+	public static GenLayer multiZoom(long var0, GenLayer var2, int var3) {
 		Object var4 = var2;
 
 		for(int var5 = 0; var5 < var3; ++var5) {
--- net/minecraft/src/BiomeCache.java
+++ net/minecraft/src/BiomeCache.java
@@ -32,6 +32,15 @@
 		return this.getBiomeCacheBlock(var1, var2).getBiomeGenAt(var1, var2);
 	}
 
+	public float getTemperature(int var1, int var2) {
+		return this.getBiomeCacheBlock(var1, var2).getTemperatureAt(var1, var2);
+	}
+
+	public float getRainfall(int var1, int var2) {
+		return this.getBiomeCacheBlock(var1, var2).getRainfallAt(var1, var2);
+	}
+
+
 	public void cleanupCache() {
 		long var1 = System.currentTimeMillis();
 		long var3 = var1 - this.lastCleanupTime;
--- net/minecraft/src/WorldChunkManagerHell.java
+++ net/minecraft/src/WorldChunkManagerHell.java
@@ -60,7 +60,7 @@
 	}
 
 	public ChunkPosition findBiomePosition(int var1, int var2, int var3, List var4, Random var5) {
-		return var4.contains(this.biomeGenerator) ? new ChunkPosition(var1 - var3 + var5.nextInt(var3 * 2 + 1), 0, var2 - var3 + var5.nextInt(var3 * 2 + 1)) : null;
+		return var4 == null || var4.contains(this.biomeGenerator) ? new ChunkPosition(var1 - var3 + var5.nextInt(var3 * 2 + 1), 0, var2 - var3 + var5.nextInt(var3 * 2 + 1)) : null;
 	}
 
 	public boolean areBiomesViable(int var1, int var2, int var3, List var4) {
--- net/minecraft/src/BlockSoulSand.java
+++ net/minecraft/src/BlockSoulSand.java
@@ -13,5 +13,6 @@
 	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
 		var5.motionX *= 0.4D;
 		var5.motionZ *= 0.4D;
+		var5.motionY -= 0.1D;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BiomeGenMushroomValley.java
@@ -1,0 +1,26 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenMushroomValley extends BiomeGenBase {
+	protected BiomeGenMushroomValley(int var1) {
+		super(var1);
+		this.biomeDecorator.treesPerChunk = 10;
+		this.biomeDecorator.flowersPerChunk = 10;
+		this.spawnableCreatureList.add(new SpawnListEntry(EntityMooshroom.class, 4, 4, 4));
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(5) == 0 ? this.biomeDecorator.bigMushroomGen : var1.nextInt(5) == 0 ? this.worldGenBigTree : this.worldGenTrees;
+	}
+
+	public void buildBiomeSurface(World world, Random random, byte[] blocks, byte[] metadata, int x, int z, int topTerrainHeight, double erosionValue, double simplexValue) {
+		if (Math.abs(erosionValue) > 3.0D) {
+			this.topBlock = (byte)Block.mycelium.blockID;
+		} else {
+			this.topBlock = (byte)Block.grass.blockID;
+		}
+
+		super.buildBiomeSurface(world, random, blocks, metadata, x, z, topTerrainHeight, erosionValue, simplexValue);
+	}
+}
--- net/minecraft/src/GenLayerBiome.java
+++ net/minecraft/src/GenLayerBiome.java
@@ -1,33 +1,106 @@
 package net.minecraft.src;
 
+import java.util.*;
+
+import static net.minecraft.src.BiomeGenBase.*;
+
 public class GenLayerBiome extends GenLayer {
-	private BiomeGenBase[] allowedBiomes = new BiomeGenBase[]{BiomeGenBase.desert, BiomeGenBase.forest, BiomeGenBase.extremeHills, BiomeGenBase.swampland, BiomeGenBase.plains, BiomeGenBase.taiga, BiomeGenBase.jungle};
+	private BiomeGenBase[] allowedBiomes = {
+			desert,
+			forest,
+			parchedForest,
+			swampland,
+			plains,
+			taiga,
+			jungle,
+			highlands
+	};
+	private BiomeGenBase[] allowedSnowBiomes = null;
+	private BiomeGenBase[] oceanBiomes = {
+			seaCrags,
+			archipelago
+	};
+	private final WorldType worldType;
 
 	public GenLayerBiome(long var1, GenLayer var3, WorldType var4) {
 		super(var1);
 		this.parent = var3;
+		this.worldType = var4;
 		if(var4 == WorldType.DEFAULT_1_1) {
-			this.allowedBiomes = new BiomeGenBase[]{BiomeGenBase.desert, BiomeGenBase.forest, BiomeGenBase.extremeHills, BiomeGenBase.swampland, BiomeGenBase.plains, BiomeGenBase.taiga};
+			this.allowedBiomes = new BiomeGenBase[] {
+					desert,
+					forest,
+					extremeHills,
+					swampland,
+					plains,
+					snowyTaiga
+			};
+			this.oceanBiomes = new BiomeGenBase[] {
+					ocean
+			};
+		} else if (var4 == WorldType.LEGACY) {
+			Set<BiomeGenBase> biomes = new HashSet<>();
+			Set<BiomeGenBase> snowBiomes = new HashSet<>();
+			for (ClimateZone climateZone : ClimateZone.allZones) {
+				if (climateZone.temperature < 0) {
+					snowBiomes.addAll(Arrays.asList(climateZone.biomes));
+				} else {
+					biomes.addAll(Arrays.asList(climateZone.biomes));
+				}
+			}
+			this.allowedBiomes = biomes.toArray(new BiomeGenBase[0]);
+			this.allowedSnowBiomes = snowBiomes.toArray(new BiomeGenBase[0]);
 		}
-
 	}
 
 	public int[] getInts(int var1, int var2, int var3, int var4) {
+		int singleBiome = -1;
+		boolean singleOcean = false;
+		boolean oceanBiomes = true;
+		boolean climatic = this.worldType != WorldType.LEGACY;
+		if (this.worldType instanceof WorldTypeCustomized) {
+			WorldTypeCustomized sb = (WorldTypeCustomized)this.worldType;
+			if (sb.getBiome() >= 0) {
+				singleBiome = sb.getBiome();
+				singleOcean = oceanList[singleBiome] && singleBiome != 0;
+			}
+			oceanBiomes = !singleOcean && sb.hasOceanBiomes();
+			climatic = sb.useLegacyWorldGen();
+		}
+
 		int[] var5 = this.parent.getInts(var1, var2, var3, var4);
 		int[] var6 = IntCache.getIntCache(var3 * var4);
 
 		for(int var7 = 0; var7 < var4; ++var7) {
 			for(int var8 = 0; var8 < var3; ++var8) {
 				this.initChunkSeed((long)(var8 + var1), (long)(var7 + var2));
-				int var9 = var5[var8 + var7 * var3];
-				if(var9 == 0) {
-					var6[var8 + var7 * var3] = 0;
-				} else if(var9 == BiomeGenBase.mushroomIsland.biomeID) {
-					var6[var8 + var7 * var3] = var9;
-				} else if(var9 == 1) {
-					var6[var8 + var7 * var3] = this.allowedBiomes[this.nextInt(this.allowedBiomes.length)].biomeID;
+				int pos = var8 + var7 * var3;
+				int var9 = var5[pos];
+
+				if (singleBiome < 0 &&
+						(var9 == mushroomIsland.biomeID
+						|| var9 == mushroomIslandShore.biomeID
+						|| var9 == frozenOcean.biomeID)) {
+					var6[pos] = var9;
+				} else if (var9 > 0 || singleOcean) {
+					ClimateZone zone = climatic ? ClimateZone.getZoneFromId(var9) : null;
+					BiomeGenBase[] biomeArray = zone != null ? zone.biomes : this.allowedBiomes;
+					BiomeGenBase biome = singleBiome >= 0 ? biomeList[singleBiome] : biomeArray[this.nextInt(biomeArray.length)];
+					if (var9 == icePlains.biomeID && !climatic && singleBiome < 0) {
+						if (this.allowedSnowBiomes != null) {
+							biome = this.allowedSnowBiomes[this.nextInt(this.allowedSnowBiomes.length)];
+						} else if (biome.snowyVariant != null) {
+							biome = biome.snowyVariant;
+						} else {
+							biome = icePlains;
+						}
+					}
+
+					var6[pos] = biome.biomeID;
+				} else if (oceanBiomes && this.nextInt(3) == 0) {
+					var6[pos] = this.oceanBiomes[this.nextInt(this.oceanBiomes.length)].biomeID;
 				} else {
-					var6[var8 + var7 * var3] = BiomeGenBase.icePlains.biomeID;
+					var6[pos] = 0;
 				}
 			}
 		}
--- net/minecraft/src/BlockMushroom.java
+++ net/minecraft/src/BlockMushroom.java
@@ -63,7 +63,7 @@
 	}
 
 	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-		if(var3 >= 0 && var3 < 256) {
+		if(var3 >= 0) {
 			int var5 = var1.getBlockId(var2, var3 - 1, var4);
 			return var5 == Block.mycelium.blockID || var1.getFullBlockLightValue(var2, var3, var4) < 13 && this.canThisPlantGrowOnThisBlockID(var5);
 		} else {
