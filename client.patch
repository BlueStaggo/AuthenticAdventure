--- net/minecraft/src/WorldGenBigMushroom.java
+++ net/minecraft/src/WorldGenBigMushroom.java
@@ -53,8 +53,6 @@
 				var9 = var1.getBlockId(var3, var4 - 1, var5);
 				if(var9 != Block.dirt.blockID && var9 != Block.grass.blockID && var9 != Block.mycelium.blockID) {
 					return false;
-				} else if(!Block.mushroomBrown.canPlaceBlockAt(var1, var3, var4, var5)) {
-					return false;
 				} else {
 					this.setBlockAndMetadata(var1, var3, var4 - 1, var5, Block.dirt.blockID, 0);
 					int var16 = var4 + var7;
--- net/minecraft/src/GenLayerShore.java
+++ net/minecraft/src/GenLayerShore.java
@@ -1,6 +1,13 @@
 package net.minecraft.src;
 
+import static net.minecraft.src.BiomeGenBase.oceanList;
+
 public class GenLayerShore extends GenLayer {
+	private final BiomeGenBase[] beaches = {
+			BiomeGenBase.beach,
+			BiomeGenBase.gravelBeach
+	};
+
 	public GenLayerShore(long var1, GenLayer var3) {
 		super(var1);
 		this.parent = var3;
@@ -14,42 +21,48 @@
 			for(int var8 = 0; var8 < var3; ++var8) {
 				this.initChunkSeed((long)(var8 + var1), (long)(var7 + var2));
 				int var9 = var5[var8 + 1 + (var7 + 1) * (var3 + 2)];
-				int var10;
-				int var11;
-				int var12;
-				int var13;
+				BiomeGenBase biome = BiomeGenBase.biomeList[var9];
+				BiomeGenBase beach = this.beaches[this.nextInt(this.beaches.length)];
+
+				int var10 = var5[var8 + 1 + (var7 + 1 - 1) * (var3 + 2)];
+				int var11 = var5[var8 + 1 + 1 + (var7 + 1) * (var3 + 2)];
+				int var12 = var5[var8 + 1 - 1 + (var7 + 1) * (var3 + 2)];
+				int var13 = var5[var8 + 1 + (var7 + 1 + 1) * (var3 + 2)];
+				int var14 = var8 + var7 * var3;
+
 				if(var9 == BiomeGenBase.mushroomIsland.biomeID) {
-					var10 = var5[var8 + 1 + (var7 + 1 - 1) * (var3 + 2)];
-					var11 = var5[var8 + 1 + 1 + (var7 + 1) * (var3 + 2)];
-					var12 = var5[var8 + 1 - 1 + (var7 + 1) * (var3 + 2)];
-					var13 = var5[var8 + 1 + (var7 + 1 + 1) * (var3 + 2)];
-					if(var10 != BiomeGenBase.ocean.biomeID && var11 != BiomeGenBase.ocean.biomeID && var12 != BiomeGenBase.ocean.biomeID && var13 != BiomeGenBase.ocean.biomeID) {
-						var6[var8 + var7 * var3] = var9;
-					} else {
-						var6[var8 + var7 * var3] = BiomeGenBase.mushroomIslandShore.biomeID;
-					}
-				} else if(var9 != BiomeGenBase.ocean.biomeID && var9 != BiomeGenBase.river.biomeID && var9 != BiomeGenBase.swampland.biomeID && var9 != BiomeGenBase.extremeHills.biomeID) {
-					var10 = var5[var8 + 1 + (var7 + 1 - 1) * (var3 + 2)];
-					var11 = var5[var8 + 1 + 1 + (var7 + 1) * (var3 + 2)];
-					var12 = var5[var8 + 1 - 1 + (var7 + 1) * (var3 + 2)];
-					var13 = var5[var8 + 1 + (var7 + 1 + 1) * (var3 + 2)];
-					if(var10 != BiomeGenBase.ocean.biomeID && var11 != BiomeGenBase.ocean.biomeID && var12 != BiomeGenBase.ocean.biomeID && var13 != BiomeGenBase.ocean.biomeID) {
-						var6[var8 + var7 * var3] = var9;
-					} else {
-						var6[var8 + var7 * var3] = BiomeGenBase.beach.biomeID;
-					}
-				} else if(var9 == BiomeGenBase.extremeHills.biomeID) {
-					var10 = var5[var8 + 1 + (var7 + 1 - 1) * (var3 + 2)];
-					var11 = var5[var8 + 1 + 1 + (var7 + 1) * (var3 + 2)];
-					var12 = var5[var8 + 1 - 1 + (var7 + 1) * (var3 + 2)];
-					var13 = var5[var8 + 1 + (var7 + 1 + 1) * (var3 + 2)];
-					if(var10 == BiomeGenBase.extremeHills.biomeID && var11 == BiomeGenBase.extremeHills.biomeID && var12 == BiomeGenBase.extremeHills.biomeID && var13 == BiomeGenBase.extremeHills.biomeID) {
-						var6[var8 + var7 * var3] = var9;
-					} else {
-						var6[var8 + var7 * var3] = BiomeGenBase.extremeHillsEdge.biomeID;
+					if(!oceanList[var10] && !oceanList[var11] && !oceanList[var12] && !oceanList[var13]) {
+						var6[var14] = var9;
+					} else {
+						var6[var14] = BiomeGenBase.mushroomIslandShore.biomeID;
 					}
 				} else {
-					var6[var8 + var7 * var3] = var9;
+					boolean coast = oceanList[var10] || oceanList[var11] || oceanList[var12] || oceanList[var13];
+					boolean frozenCoast = var10 == BiomeGenBase.frozenOcean.biomeID
+							|| var11 == BiomeGenBase.frozenOcean.biomeID
+							|| var12 == BiomeGenBase.frozenOcean.biomeID
+							|| var13 == BiomeGenBase.frozenOcean.biomeID;
+					if(!oceanList[var9] && biome.hasBeach && biome.edgeVariant == null) {
+						if(!coast) {
+							var6[var14] = var9;
+						} else if (frozenCoast) {
+							var6[var14] = BiomeGenBase.frozenBeach.biomeID;
+						} else {
+							var6[var14] = beach.biomeID;
+						}
+					} else if(biome.edgeVariant != null) {
+						if (var10 == BiomeGenBase.river.biomeID || var11 == BiomeGenBase.river.biomeID || var12 == BiomeGenBase.river.biomeID || var13 == BiomeGenBase.river.biomeID) {
+							var6[var14] = biome.edgeVariant.biomeID;
+						} else if(var10 == var9 && var11 == var9 && var12 == var9 && var13 == var9) {
+							var6[var14] = var9;
+						} else if(biome.hasBeach && coast) {
+							var6[var14] = frozenCoast ? BiomeGenBase.frozenBeach.biomeID : beach.biomeID;
+						} else {
+							var6[var14] = biome.edgeVariant.biomeID;
+						}
+					} else {
+						var6[var14] = var9;
+					}
 				}
 			}
 		}
--- net/minecraft/src/StructureStrongholdPieceWeight.java
+++ net/minecraft/src/StructureStrongholdPieceWeight.java
@@ -5,11 +5,17 @@
 	public final int pieceWeight;
 	public int instancesSpawned;
 	public int instancesLimit;
+	public boolean noSurface;
 
 	public StructureStrongholdPieceWeight(Class var1, int var2, int var3) {
+		this(var1, var2, var3, false);
+	}
+
+	public StructureStrongholdPieceWeight(Class var1, int var2, int var3, boolean var4) {
 		this.pieceClass = var1;
 		this.pieceWeight = var2;
 		this.instancesLimit = var3;
+		this.noSurface = var4;
 	}
 
 	public boolean canSpawnMoreStructuresOfType(int var1) {
--- /dev/null
+++ net/minecraft/src/WorldGenMud.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenMud extends WorldGenerator {
+	private int mudID;
+	private int radius;
+
+	public WorldGenMud(int var1, int var2) {
+		this.mudID = var2;
+		this.radius = var1;
+	}
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int var6 = var2.nextInt(this.radius - 2) + 2;
+		int var6sq = var6 * var6;
+		byte var7 = 2;
+
+		for(int var8 = var3 - var6; var8 <= var3 + var6; ++var8) {
+			for(int var9 = var5 - var6; var9 <= var5 + var6; ++var9) {
+				int var10 = var8 - var3;
+				int var11 = var9 - var5;
+				if(var10 * var10 + var11 * var11 <= var6sq - var2.nextInt(var6sq)) {
+					for(int var12 = var4 - var7; var12 <= var4 + var7; ++var12) {
+						int var13 = var1.getBlockId(var8, var12, var9);
+						if(var13 == Block.dirt.blockID || var13 == Block.grass.blockID) {
+							var1.setBlock(var8, var12, var9, this.mudID);
+						}
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/StructureStrongholdPieces.java
+++ net/minecraft/src/StructureStrongholdPieces.java
@@ -6,13 +6,30 @@
 import java.util.Random;
 
 public class StructureStrongholdPieces {
-	private static final StructureStrongholdPieceWeight[] pieceWeightArray = new StructureStrongholdPieceWeight[]{new StructureStrongholdPieceWeight(ComponentStrongholdStraight.class, 40, 0), new StructureStrongholdPieceWeight(ComponentStrongholdPrison.class, 5, 5), new StructureStrongholdPieceWeight(ComponentStrongholdLeftTurn.class, 20, 0), new StructureStrongholdPieceWeight(ComponentStrongholdRightTurn.class, 20, 0), new StructureStrongholdPieceWeight(ComponentStrongholdRoomCrossing.class, 10, 6), new StructureStrongholdPieceWeight(ComponentStrongholdStairsStraight.class, 5, 5), new StructureStrongholdPieceWeight(ComponentStrongholdStairs.class, 5, 5), new StructureStrongholdPieceWeight(ComponentStrongholdCrossing.class, 5, 4), new StructureStrongholdPieceWeight(ComponentStrongholdChestCorridor.class, 5, 4), new StructureStrongholdPieceWeight2(ComponentStrongholdLibrary.class, 10, 2), new StructureStrongholdPieceWeight3(ComponentStrongholdPortalRoom.class, 20, 1)};
+	private static final StructureStrongholdPieceWeight[] pieceWeightArray = new StructureStrongholdPieceWeight[] {
+			new StructureStrongholdPieceWeight(ComponentStrongholdStraight.class, 40, 0),
+			new StructureStrongholdPieceWeight(ComponentStrongholdPrison.class, 5, 5, true),
+			new StructureStrongholdPieceWeight(ComponentStrongholdLeftTurn.class, 20, 0),
+			new StructureStrongholdPieceWeight(ComponentStrongholdRightTurn.class, 20, 0),
+			new StructureStrongholdPieceWeight(ComponentStrongholdRoomCrossing.class, 10, 6, true),
+			new StructureStrongholdPieceWeight(ComponentStrongholdStairsStraight.class, 5, 5),
+			new StructureStrongholdPieceWeight(ComponentStrongholdStairs.class, 10, 25),
+			new StructureStrongholdPieceWeight(ComponentStrongholdCrossing.class, 5, 4, true),
+			new StructureStrongholdPieceWeight(ComponentStrongholdChestCorridor.class, 10, 10, true),
+			new StructureStrongholdPieceWeight2(ComponentStrongholdLibrary.class, 10, 3, true),
+			new StructureStrongholdPieceWeight3(ComponentStrongholdPortalRoom.class, 20, 1, true)
+	};
+	private static boolean hasPortal = false;
 	private static List structurePieceList;
 	private static Class strongComponentType;
 	static int totalWeight = 0;
 	private static final StructureStrongholdStones strongholdStones = new StructureStrongholdStones((StructureStrongholdPieceWeight2)null);
 
-	public static void prepareStructurePieces() {
+	public static boolean hasPortal() {
+		return hasPortal;
+	}
+
+	public static void prepareStructurePieces(Random rand) {
 		structurePieceList = new ArrayList();
 		StructureStrongholdPieceWeight[] var0 = pieceWeightArray;
 		int var1 = var0.length;
@@ -24,6 +41,7 @@
 		}
 
 		strongComponentType = null;
+		hasPortal = rand.nextInt(5) == 0;
 	}
 
 	private static boolean canAddStructurePieces() {
@@ -93,7 +111,10 @@
 					StructureStrongholdPieceWeight var11 = (StructureStrongholdPieceWeight)var10.next();
 					var9 -= var11.pieceWeight;
 					if(var9 < 0) {
-						if(!var11.canSpawnMoreStructuresOfType(var7) || var11 == var0.field_35038_a) {
+						if(!var11.canSpawnMoreStructuresOfType(var7)
+								|| var11 == var0.field_35038_a
+								|| (var4 >= 50 && var11.noSurface)
+								|| (ComponentStrongholdPortalRoom.class.isAssignableFrom(var11.pieceClass) && !hasPortal)) {
 							break;
 						}
 
@@ -112,7 +133,7 @@
 			}
 
 			StructureBoundingBox var14 = ComponentStrongholdCorridor.func_35051_a(var1, var2, var3, var4, var5, var6);
-			if(var14 != null && var14.minY > 1) {
+			if(var14 != null && var14.minY > 1 && var14.minY < 60) {
 				return new ComponentStrongholdCorridor(var7, var2, var14, var6);
 			} else {
 				return null;
--- net/minecraft/src/GuiInventory.java
+++ net/minecraft/src/GuiInventory.java
@@ -15,24 +15,12 @@
 		var1.addStat(AchievementList.openInventory, 1);
 	}
 
-	public void updateScreen() {
-		if(this.mc.playerController.isInCreativeMode()) {
-			this.mc.displayGuiScreen(new GuiContainerCreative(this.mc.thePlayer));
-		}
-
-	}
-
 	public void initGui() {
+		super.initGui();
 		this.controlList.clear();
-		if(this.mc.playerController.isInCreativeMode()) {
-			this.mc.displayGuiScreen(new GuiContainerCreative(this.mc.thePlayer));
-		} else {
-			super.initGui();
-			if(!this.mc.thePlayer.getActivePotionEffects().isEmpty()) {
-				this.guiLeft = 160 + (this.width - this.xSize - 200) / 2;
-			}
+		if(!this.mc.thePlayer.getActivePotionEffects().isEmpty()) {
+			this.guiLeft = 160 + (this.width - this.xSize - 200) / 2;
 		}
-
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
--- net/minecraft/src/GenLayerRiverMix.java
+++ net/minecraft/src/GenLayerRiverMix.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import static net.minecraft.src.BiomeGenBase.oceanList;
+
 public class GenLayerRiverMix extends GenLayer {
 	private GenLayer field_35512_b;
 	private GenLayer field_35513_c;
@@ -22,15 +24,16 @@
 		int[] var7 = IntCache.getIntCache(var3 * var4);
 
 		for(int var8 = 0; var8 < var3 * var4; ++var8) {
-			if(var5[var8] == BiomeGenBase.ocean.biomeID) {
+			if(oceanList[var5[var8]]) {
 				var7[var8] = var5[var8];
-			} else if(var6[var8] >= 0) {
-				if(var5[var8] == BiomeGenBase.icePlains.biomeID) {
+			} else if(var6[var8] > 0) {
+				BiomeGenBase biome = BiomeGenBase.biomeList[var5[var8]];
+				if(biome.getFloatTemperature() < 0.15F) {
 					var7[var8] = BiomeGenBase.frozenRiver.biomeID;
-				} else if(var5[var8] != BiomeGenBase.mushroomIsland.biomeID && var5[var8] != BiomeGenBase.mushroomIslandShore.biomeID) {
-					var7[var8] = var6[var8];
-				} else {
+				} else if(var5[var8] == BiomeGenBase.mushroomIsland.biomeID || var5[var8] == BiomeGenBase.mushroomIslandShore.biomeID) {
 					var7[var8] = BiomeGenBase.mushroomIslandShore.biomeID;
+				} else {
+					var7[var8] = var6[var8];
 				}
 			} else {
 				var7[var8] = var5[var8];
--- net/minecraft/src/GuiMainMenu.java
+++ net/minecraft/src/GuiMainMenu.java
@@ -8,6 +8,8 @@
 import java.util.Calendar;
 import java.util.Date;
 import java.util.Random;
+
+import org.lwjgl.input.Keyboard;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.util.glu.GLU;
 
@@ -17,6 +19,7 @@
 	private String splashText = "missingno";
 	private GuiButton multiplayerButton;
 	private int panoramaTimer = 0;
+	private int panoramaType = 0;
 	private int viewportTexture;
 
 	public GuiMainMenu() {
@@ -43,10 +46,15 @@
 		}
 
 		this.updateCounter = rand.nextFloat();
+		this.panoramaType = rand.nextInt(6);
+	}
+
+	private boolean speedUpPanorama() {
+		return Keyboard.isKeyDown(Keyboard.KEY_LSHIFT);
 	}
 
 	public void updateScreen() {
-		++this.panoramaTimer;
+		this.panoramaTimer += this.speedUpPanorama() ? 10 : 1;
 	}
 
 	public boolean doesGuiPauseGame() {
@@ -54,6 +62,9 @@
 	}
 
 	protected void keyTyped(char var1, int var2) {
+		if (Character.toLowerCase(var1) == 'p' && ++this.panoramaType >= 6) {
+			this.panoramaType = 0;
+		}
 	}
 
 	public void initGui() {
@@ -116,7 +127,11 @@
 
 	}
 
-	private void drawPanorama(int var1, int var2, float var3) {
+	private void drawPanorama(int var1, int var2, float var3, int var4a) {
+		if (this.speedUpPanorama()) {
+			var3 *= 10.0F;
+		}
+
 		Tessellator var4 = Tessellator.instance;
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glPushMatrix();
@@ -165,7 +180,7 @@
 					GL11.glRotatef(-90.0F, 1.0F, 0.0F, 0.0F);
 				}
 
-				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/title/bg/panorama" + var10 + ".png"));
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/title/bg/panorama" + var4a + "-" + var10 + ".png"));
 				var4.startDrawingQuads();
 				var4.setColorRGBA_I(16777215, 255 / (var6 + 1));
 				float var11 = 0.0F;
@@ -218,9 +233,9 @@
 		GL11.glColorMask(true, true, true, true);
 	}
 
-	private void renderSkybox(int var1, int var2, float var3) {
+	private void renderSkybox(int var1, int var2, float var3, int var4a) {
 		GL11.glViewport(0, 0, 256, 256);
-		this.drawPanorama(var1, var2, var3);
+		this.drawPanorama(var1, var2, var3, var4a);
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 		this.rotateAndBlurSkybox(var3);
@@ -250,7 +265,7 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
-		this.renderSkybox(var1, var2, var3);
+		this.renderSkybox(var1, var2, var3, panoramaType);
 		Tessellator var4 = Tessellator.instance;
 		short var5 = 274;
 		int var6 = this.width / 2 - var5 / 2;
@@ -269,6 +284,7 @@
 			this.drawTexturedModalRect(var6 + 0, var7 + 0, 0, 0, 155, 44);
 			this.drawTexturedModalRect(var6 + 155, var7 + 0, 0, 45, 155, 44);
 		}
+		this.drawTexturedModalRect((this.width - 128) / 2, var7 + 30, 0, 96, 128, 32);
 
 		var4.setColorOpaque_I(16777215);
 		GL11.glPushMatrix();
@@ -279,7 +295,7 @@
 		GL11.glScalef(var8, var8, var8);
 		this.drawCenteredString(this.fontRenderer, this.splashText, 0, -8, 16776960);
 		GL11.glPopMatrix();
-		this.drawString(this.fontRenderer, "Minecraft 1.2.5", 2, this.height - 10, 16777215);
+		this.drawString(this.fontRenderer, "Minecraft AuthAdv 1.1", 2, this.height - 10, 16777215);
 		String var9 = "Copyright Mojang AB. Do not distribute!";
 		this.drawString(this.fontRenderer, var9, this.width - this.fontRenderer.getStringWidth(var9) - 2, this.height - 10, 16777215);
 		super.drawScreen(var1, var2, var3);
--- net/minecraft/src/ChunkCache.java
+++ net/minecraft/src/ChunkCache.java
@@ -237,4 +237,12 @@
 	public int getHeight() {
 		return 256;
 	}
+
+	public float getTemperature(int var1, int var2) {
+		return this.worldObj.getTemperature(var1, var2);
+	}
+
+	public float getRainfall(int var1, int var2) {
+		return this.worldObj.getRainfall(var1, var2);
+	}
 }
--- net/minecraft/src/CanvasIsomPreview.java
+++ net/minecraft/src/CanvasIsomPreview.java
@@ -94,7 +94,7 @@
 
 	public void loadLevel(String var1) {
 		this.field_1785_i = this.field_1784_j = 0;
-		this.level = new World(new SaveHandler(new File(this.workDir, "saves"), var1, false), var1, new WorldSettings((new Random()).nextLong(), 0, true, false, WorldType.DEFAULT));
+		this.level = new World(new SaveHandler(new File(this.workDir, "saves"), var1, false), var1, new WorldSettings((new Random()).nextLong(), 0, true, false, false, WorldType.DEFAULT));
 		this.level.skylightSubtracted = 0;
 		List var2 = this.zonesToRender;
 		synchronized(var2) {
--- /dev/null
+++ net/minecraft/src/WorldTypeSingleBiome.java
@@ -1,0 +1,109 @@
+package net.minecraft.src;
+
+public class WorldTypeSingleBiome extends WorldType {
+	private final boolean customized;
+
+	private final int biome;
+	private boolean oceans = true;
+	private boolean oceanBiomes = true;
+	private boolean beaches = true;
+	private boolean rivers = true;
+	private boolean hills = true;
+	private boolean amplified = true;
+
+	protected WorldTypeSingleBiome(int var1, String var2) {
+		this(var1, var2, BiomeGenBase.plains.biomeID, false);
+	}
+
+	protected WorldTypeSingleBiome(int var1, String var2, int var3) {
+		this(var1, var2, var3, true);
+	}
+	
+	protected WorldTypeSingleBiome(int var1, String var2, int var3, boolean var4) {
+		super(var1, var2);
+		this.customized = var4;
+		this.biome = var3;
+	}
+
+	public WorldType readData(NBTTagCompound var1) {
+		return this.withBiome(var1.getInteger("Biome"))
+				.withOceans(var1.getBoolean("Oceans"))
+				.withOceanBiomes(var1.getBoolean("OceanBiomes"))
+				.withBeaches(var1.getBoolean("Beaches"))
+				.withRivers(var1.getBoolean("Rivers"))
+				.withHills(var1.getBoolean("Hills"))
+				.withAmplified(var1.getBoolean("Amplified"));
+	}
+
+	public void writeData(NBTTagCompound var1) {
+		var1.setInteger("Biome", this.biome);
+		var1.setBoolean("Oceans", this.oceans);
+		var1.setBoolean("OceanBiomes", this.oceanBiomes);
+		var1.setBoolean("Beaches", this.beaches);
+		var1.setBoolean("Rivers", this.rivers);
+		var1.setBoolean("Hills", this.hills);
+		var1.setBoolean("Amplified", this.amplified);
+	}
+
+	public WorldTypeSingleBiome withBiome(int biome) {
+		return new WorldTypeSingleBiome(-1, this.func_48628_a(), biome);
+	}
+
+	public WorldTypeSingleBiome withOceans(boolean oceans) {
+		if (this.customized) this.oceans = oceans;
+		return this;
+	}
+
+	public WorldTypeSingleBiome withOceanBiomes(boolean oceanBiomes) {
+		if (this.customized) this.oceanBiomes = oceanBiomes;
+		return this;
+	}
+
+	public WorldTypeSingleBiome withBeaches(boolean beaches) {
+		if (this.customized) this.beaches = beaches;
+		return this;
+	}
+
+	public WorldTypeSingleBiome withRivers(boolean rivers) {
+		if (this.customized) this.rivers = rivers;
+		return this;
+	}
+
+	public WorldTypeSingleBiome withHills(boolean hills) {
+		if (this.customized) this.hills = hills;
+		return this;
+	}
+
+	public WorldTypeSingleBiome withAmplified(boolean amplified) {
+		if (this.customized) this.amplified = amplified;
+		return this;
+	}
+
+	public int getBiome() {
+		return this.biome;
+	}
+
+	public boolean hasOceans() {
+		return this.oceans;
+	}
+
+	public boolean hasOceanBiomes() {
+		return this.oceanBiomes;
+	}
+
+	public boolean hasBeaches() {
+		return beaches;
+	}
+
+	public boolean hasRivers() {
+		return this.rivers;
+	}
+
+	public boolean hasHills() {
+		return this.hills;
+	}
+
+	public boolean isAmplified() {
+		return amplified;
+	}
+}
--- net/minecraft/src/StructureStrongholdPieceWeight3.java
+++ net/minecraft/src/StructureStrongholdPieceWeight3.java
@@ -5,6 +5,10 @@
 		super(var1, var2, var3);
 	}
 
+	StructureStrongholdPieceWeight3(Class var1, int var2, int var3, boolean var4) {
+		super(var1, var2, var3, var4);
+	}
+
 	public boolean canSpawnMoreStructuresOfType(int var1) {
 		return super.canSpawnMoreStructuresOfType(var1) && var1 > 5;
 	}
--- net/minecraft/src/BiomeGenDesert.java
+++ net/minecraft/src/BiomeGenDesert.java
@@ -12,6 +12,7 @@
 		this.biomeDecorator.deadBushPerChunk = 2;
 		this.biomeDecorator.reedsPerChunk = 50;
 		this.biomeDecorator.cactiPerChunk = 10;
+		this.biomeDecorator.generateLakes = false;
 	}
 
 	public void decorate(World var1, Random var2, int var3, int var4) {
--- net/minecraft/src/EntityCow.java
+++ net/minecraft/src/EntityCow.java
@@ -60,7 +60,7 @@
 			this.dropItem(Item.leather.shiftedIndex, 1);
 		}
 
-		var3 = this.rand.nextInt(3) + 1 + this.rand.nextInt(1 + var2);
+		var3 = this.rand.nextInt(3) + this.rand.nextInt(1 + var2);
 
 		for(var4 = 0; var4 < var3; ++var4) {
 			if(this.isBurning()) {
--- net/minecraft/src/EntityCreeper.java
+++ net/minecraft/src/EntityCreeper.java
@@ -23,7 +23,7 @@
 	}
 
 	public int getMaxHealth() {
-		return 20;
+		return this.worldObj != null && this.worldObj.getWorldInfo().isHardcoreModeEnabled() ? 30 : 20;
 	}
 
 	protected void entityInit() {
--- net/minecraft/src/EntityAIArrowAttack.java
+++ net/minecraft/src/EntityAIArrowAttack.java
@@ -47,11 +47,11 @@
 			this.field_48367_f = 0;
 		}
 
-		if(var3 <= var1 && this.field_48367_f >= 20) {
-			this.entityHost.getNavigator().clearPathEntity();
-		} else {
-			this.entityHost.getNavigator().func_48667_a(this.attackTarget, this.field_48370_e);
-		}
+        if(var3 <= var1 && this.field_48367_f >= 20 && false) {
+        	this.entityHost.getNavigator().clearPathEntity();
+        } else {
+        	this.entityHost.getNavigator().func_48667_a(this.attackTarget, this.field_48370_e);
+        }
 
 		this.entityHost.getLookHelper().setLookPositionWithEntity(this.attackTarget, 30.0F, 30.0F);
 		this.rangedAttackTime = Math.max(this.rangedAttackTime - 1, 0);
--- net/minecraft/src/WorldProvider.java
+++ net/minecraft/src/WorldProvider.java
@@ -42,7 +42,9 @@
 
 	public boolean canCoordinateBeSpawn(int var1, int var2) {
 		int var3 = this.worldObj.getFirstUncoveredBlock(var1, var2);
-		return var3 == Block.grass.blockID;
+		return var3 == Block.grass.blockID
+				|| var3 == Block.sand.blockID
+				|| var3 == Block.gravel.blockID;
 	}
 
 	public float calculateCelestialAngle(long var1, float var3) {
--- /dev/null
+++ net/minecraft/src/BlockStepStone.java
@@ -1,0 +1,31 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockStepStone extends BlockStep {
+	public static final String[] blockStepTypes = new String[]{"stone", "sand", "wood", "cobble", "brick", "smoothStoneBrick", "netherBrick"};
+
+	public BlockStepStone(int var1, boolean var2) {
+		super(var1, var2, Material.rock);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		int var3 = var2 & 7;
+		return var3 == 0 ? (var1 <= 1 ? 6 : 5)
+				: var3 == 1 ? (var1 == 0 ? 208 : var1 == 1 ? 176 : 192)
+				: var3 == 2 ? Block.planks.blockIndexInTexture
+				: var3 == 3 ? Block.cobblestone.blockIndexInTexture
+				: var3 == 4 ? Block.brick.blockIndexInTexture
+				: var3 == 5 ? Block.stoneBrick.blockIndexInTexture
+				: var3 == 6 ? Block.netherBrick.blockIndexInTexture
+				: 6;
+	}
+
+	public int idDropped(int var1, Random var2, int var3) {
+		return Block.stairSingle.blockID;
+	}
+
+	protected ItemStack createStackedBlock(int var1) {
+		return new ItemStack(Block.stairSingle.blockID, 1, var1 & 7);
+	}
+}
--- net/minecraft/src/BiomeGenForest.java
+++ net/minecraft/src/BiomeGenForest.java
@@ -11,6 +11,6 @@
 	}
 
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
-		return (WorldGenerator)(var1.nextInt(5) == 0 ? this.worldGenForest : (var1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees));
+		return var1.nextInt(5) == 0 ? this.worldGenForest : (var1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
 	}
 }
--- net/minecraft/src/EntityPigZombie.java
+++ net/minecraft/src/EntityPigZombie.java
@@ -92,7 +92,7 @@
 
 		int var4;
 		for(var4 = 0; var4 < var3; ++var4) {
-			this.dropItem(Item.rottenFlesh.shiftedIndex, 1);
+			this.dropItem(Item.pigmanFlesh.shiftedIndex, 1);
 		}
 
 		var3 = this.rand.nextInt(2 + var2);
@@ -106,7 +106,7 @@
 	protected void dropRareDrop(int var1) {
 		if(var1 > 0) {
 			ItemStack var2 = new ItemStack(Item.swordGold);
-			EnchantmentHelper.func_48441_a(this.rand, var2, 5);
+			EnchantmentHelper.func_48441_a(this.rand, var2, 5, this.worldObj.getWorldInfo().isHardcoreModeEnabled());
 			this.entityDropItem(var2, 0.0F);
 		} else {
 			int var3 = this.rand.nextInt(3);
@@ -122,7 +122,7 @@
 	}
 
 	protected int getDropItemId() {
-		return Item.rottenFlesh.shiftedIndex;
+		return Item.pigmanFlesh.shiftedIndex;
 	}
 
 	public ItemStack getHeldItem() {
--- net/minecraft/src/GenLayerRiver.java
+++ net/minecraft/src/GenLayerRiver.java
@@ -27,6 +27,8 @@
 					} else {
 						var10[var12 + var11 * var3] = BiomeGenBase.river.biomeID;
 					}
+				} else if (var17 == 0) {
+					var10[var12 + var11 * var3] = var17;
 				} else {
 					var10[var12 + var11 * var3] = BiomeGenBase.river.biomeID;
 				}
--- net/minecraft/src/GenLayer.java
+++ net/minecraft/src/GenLayer.java
@@ -6,50 +6,102 @@
 	private long chunkSeed;
 	private long baseSeed;
 
-	public static GenLayer[] func_48425_a(long var0, WorldType var2) {
-		GenLayerIsland var3 = new GenLayerIsland(1L);
-		GenLayerFuzzyZoom var9 = new GenLayerFuzzyZoom(2000L, var3);
-		GenLayerAddIsland var10 = new GenLayerAddIsland(1L, var9);
-		GenLayerZoom var11 = new GenLayerZoom(2001L, var10);
-		var10 = new GenLayerAddIsland(2L, var11);
-		GenLayerAddSnow var12 = new GenLayerAddSnow(2L, var10);
-		var11 = new GenLayerZoom(2002L, var12);
-		var10 = new GenLayerAddIsland(3L, var11);
-		var11 = new GenLayerZoom(2003L, var10);
-		var10 = new GenLayerAddIsland(4L, var11);
-		GenLayerAddMushroomIsland var15 = new GenLayerAddMushroomIsland(5L, var10);
-		byte var4 = 4;
-		GenLayer var5 = GenLayerZoom.func_35515_a(1000L, var15, 0);
-		GenLayerRiverInit var13 = new GenLayerRiverInit(100L, var5);
-		var5 = GenLayerZoom.func_35515_a(1000L, var13, var4 + 2);
-		GenLayerRiver var14 = new GenLayerRiver(1L, var5);
-		GenLayerSmooth var16 = new GenLayerSmooth(1000L, var14);
-		GenLayer var6 = GenLayerZoom.func_35515_a(1000L, var15, 0);
-		GenLayerBiome var17 = new GenLayerBiome(200L, var6, var2);
-		var6 = GenLayerZoom.func_35515_a(1000L, var17, 2);
-		Object var18 = new GenLayerHills(1000L, var6);
-
-		for(int var7 = 0; var7 < var4; ++var7) {
-			var18 = new GenLayerZoom((long)(1000 + var7), (GenLayer)var18);
-			if(var7 == 0) {
-				var18 = new GenLayerAddIsland(3L, (GenLayer)var18);
-			}
-
-			if(var7 == 1) {
-				var18 = new GenLayerShore(1000L, (GenLayer)var18);
-			}
-
-			if(var7 == 1) {
-				var18 = new GenLayerSwampRivers(1000L, (GenLayer)var18);
-			}
-		}
-
-		GenLayerSmooth var19 = new GenLayerSmooth(1000L, (GenLayer)var18);
-		GenLayerRiverMix var20 = new GenLayerRiverMix(100L, var19, var16);
-		GenLayerVoronoiZoom var8 = new GenLayerVoronoiZoom(10L, var20);
-		var20.initWorldGenSeed(var0);
-		var8.initWorldGenSeed(var0);
-		return new GenLayer[]{var20, var8, var20};
+	public static GenLayer[] func_48425_a(long l, WorldType wt) {
+		boolean isSingleBiome = false;
+		boolean isOcean = false;
+		boolean genOceans = true;
+		boolean genOceanBiomes = true;
+		boolean genBeaches = true;
+		boolean genRivers = true;
+		boolean genHills = true;
+		if (wt instanceof WorldTypeSingleBiome) {
+			WorldTypeSingleBiome sb = (WorldTypeSingleBiome) wt;
+			isSingleBiome = true;
+			isOcean = BiomeGenBase.oceanList[sb.getBiome()];
+			genOceans = sb.hasOceans();
+			genOceanBiomes = sb.hasOceanBiomes();
+			genBeaches = sb.hasBeaches();
+			genRivers = sb.hasRivers() && !isOcean;
+			genHills = sb.hasHills();
+		}
+
+        GenLayer genLayer = isOcean || !genOceans ? new GenLayerSingleBiome(isOcean ? 0 : 1) : new GenLayerIsland(1L);
+		if (wt == WorldType.DEFAULT_1_1) {
+			genLayer = new GenLayerFuzzyZoom(2000L, genLayer);
+			genLayer = new GenLayerAddIsland(1L, genLayer);
+			genLayer = new GenLayerZoom(2001L, genLayer);
+			genLayer = new GenLayerAddIsland(2L, genLayer);
+			genLayer = new GenLayerAddSnow(2L, genLayer);
+			genLayer = new GenLayerZoom(2002L, genLayer);
+			genLayer = new GenLayerAddIsland(3L, genLayer);
+			genLayer = new GenLayerZoom(2003L, genLayer);
+			genLayer = new GenLayerAddIsland(4L, genLayer);
+			genLayer = new GenLayerAddMushroomIsland(5L, genLayer);
+		} else {
+			if (!isOcean && genOceans) {
+		        genLayer = new GenLayerFuzzyZoom(2000L, genLayer);
+		        genLayer = new GenLayerAddIsland(1L, genLayer);
+		        genLayer = new GenLayerZoom(2001L, genLayer);
+		        genLayer = new GenLayerAddIsland(2L, genLayer);
+		        genLayer = new GenLayerAddIsland(3L, genLayer);
+				genLayer = new GenLayerRemoveTooMuchOcean(1000L, genLayer);
+		        genLayer = new GenLayerAddIsland(4L, genLayer);
+		        genLayer = new GenLayerZoom(2002L, genLayer);
+		        genLayer = new GenLayerZoom(2003L, genLayer);
+		        genLayer = new GenLayerAddIsland(5L, genLayer);
+			}
+			if (!isSingleBiome) genLayer = new GenLayerAddSnow(1001L, genLayer);
+	        if (genOceans && genOceanBiomes) genLayer = new GenLayerAddMushroomIsland(1002L, genLayer);
+		}
+
+        int n = wt == WorldType.LARGE_BIOMES ? 6
+		        : wt == WorldType.SMALL_BIOMES ? 3
+		        : 4;
+        GenLayer genLayer2 = genRivers ? genLayer : null;
+		if (genRivers) {
+	        genLayer2 = GenLayerZoom.octaves(1000L, genLayer2, 0);
+	        genLayer2 = new GenLayerRiverInit(100L, genLayer2);
+	        genLayer2 = GenLayerZoom.octaves(1000L, genLayer2, n + 2);
+	        genLayer2 = new GenLayerRiver(1L, genLayer2);
+	        genLayer2 = new GenLayerSmooth(1000L, genLayer2);
+		}
+        GenLayer genLayer3 = genLayer;
+        genLayer3 = GenLayerZoom.octaves(1000L, genLayer3, 0);
+        genLayer3 = new GenLayerBiome(200L, genLayer3, wt);
+        genLayer3 = GenLayerZoom.octaves(1000L, genLayer3, 2);
+		if (genHills) genLayer3 = new GenLayerHills(1000L, genLayer3);
+        GenLayer genLayer4 = new GenLayerTemperature(genLayer3);
+        GenLayer genLayer5 = new GenLayerDownfall(genLayer3);
+        for (int i = 0; i < n; ++i) {
+            genLayer3 = new GenLayerZoom(1000 + i, genLayer3);
+			if (i == 0 && !isOcean && genOceans) {
+				if (wt == WorldType.DEFAULT_1_1) {
+					genLayer3 = new GenLayerAddIsland(3L, genLayer3);
+				} else if (genBeaches) {
+					genLayer3 = new GenLayerShore(1000L, genLayer3);
+				}
+			}
+			if (i == 1) {
+				if (wt == WorldType.DEFAULT_1_1) {
+					genLayer3 = new GenLayerShore(1000L, genLayer3);
+					genLayer3 = new GenLayerSwampRivers(1000L, genLayer3);
+				}
+				genLayer4 = new GenLayerBlur(genLayer4);
+				genLayer5 = new GenLayerBlur(genLayer5);
+            }
+            genLayer4 = new GenLayerSmoothZoom(1000 + i, genLayer4);
+            genLayer5 = new GenLayerSmoothZoom(1000 + i, genLayer5);
+        }
+        genLayer3 = new GenLayerSmooth(1000L, genLayer3);
+        if (genRivers) genLayer3 = new GenLayerRiverMix(100L, genLayer3, genLayer2);
+		genLayer4 = GenLayerSmoothZoom.octaves(1000L, genLayer4, 2);
+		genLayer5 = GenLayerSmoothZoom.octaves(1000L, genLayer5, 2);
+        GenLayerVoronoiZoom genLayerVoronoiZoom = new GenLayerVoronoiZoom(10L, genLayer3);
+        genLayer3.initWorldGenSeed(l);
+        genLayer4.initWorldGenSeed(l);
+        genLayer5.initWorldGenSeed(l);
+        genLayerVoronoiZoom.initWorldGenSeed(l);
+        return new GenLayer[]{genLayer3, genLayerVoronoiZoom, genLayer4, genLayer5};
 	}
 
 	public GenLayer(long var1) {
--- net/minecraft/src/Enchantment.java
+++ net/minecraft/src/Enchantment.java
@@ -9,6 +9,8 @@
 	public static final Enchantment projectileProtection = new EnchantmentProtection(4, 5, 4);
 	public static final Enchantment respiration = new EnchantmentOxygen(5, 2);
 	public static final Enchantment aquaAffinity = new EnchantmentWaterWorker(6, 2);
+	public static final Enchantment velocity = new EnchantmentVelocity(7, 5);
+	public static final Enchantment stamina = new EnchantmentStamina(8, 5);
 	public static final Enchantment sharpness = new EnchantmentDamage(16, 10, 0);
 	public static final Enchantment smite = new EnchantmentDamage(17, 5, 1);
 	public static final Enchantment baneOfArthropods = new EnchantmentDamage(18, 5, 2);
--- net/minecraft/src/TextureWaterFX.java
+++ net/minecraft/src/TextureWaterFX.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import net.minecraft.client.Minecraft;
+
 public class TextureWaterFX extends TextureFX {
 	protected float[] red = new float[256];
 	protected float[] green = new float[256];
@@ -75,9 +77,18 @@
 				var7 = var11;
 			}
 
-			this.imageData[var2 * 4 + 0] = (byte)var5;
-			this.imageData[var2 * 4 + 1] = (byte)var6;
-			this.imageData[var2 * 4 + 2] = (byte)var7;
+			if (Minecraft.isColoredWaterEnabled()) {
+				int red = MathHelper.clamp_int(var5 + var6 * var6 / 255 + var7 / 3, 0, 255);
+				int green = MathHelper.clamp_int(var6 * 3 / 2 + var7 / 4, 0, 255);
+				int blue = MathHelper.clamp_int(var5 / 2 + var6 * var6 / 255 + var7, 0, 255);
+				this.imageData[var2 * 4 + 0] = (byte)red;
+				this.imageData[var2 * 4 + 1] = (byte)green;
+				this.imageData[var2 * 4 + 2] = (byte)blue;
+			} else {
+				this.imageData[var2 * 4 + 0] = (byte)var5;
+				this.imageData[var2 * 4 + 1] = (byte)var6;
+				this.imageData[var2 * 4 + 2] = (byte)var7;
+			}
 			this.imageData[var2 * 4 + 3] = (byte)var8;
 		}
 
--- net/minecraft/src/MovementInput.java
+++ net/minecraft/src/MovementInput.java
@@ -5,6 +5,7 @@
 	public float moveForward = 0.0F;
 	public boolean jump = false;
 	public boolean sneak = false;
+	public boolean sprint = false;
 
 	public void func_52013_a() {
 	}
--- net/minecraft/src/EntityBoat.java
+++ net/minecraft/src/EntityBoat.java
@@ -68,15 +68,7 @@
 					this.riddenByEntity.mountEntity(this);
 				}
 
-				int var3;
-				for(var3 = 0; var3 < 3; ++var3) {
-					this.dropItemWithOffset(Block.planks.blockID, 1, 0.0F);
-				}
-
-				for(var3 = 0; var3 < 2; ++var3) {
-					this.dropItemWithOffset(Item.stick.shiftedIndex, 1, 0.0F);
-				}
-
+				this.dropItemWithOffset(Item.boat.shiftedIndex, 1, 0.0F);
 				this.setDead();
 			}
 
@@ -240,24 +232,9 @@
 			}
 
 			this.moveEntity(this.motionX, this.motionY, this.motionZ);
-			if(this.isCollidedHorizontally && var21 > 0.2D) {
-				if(!this.worldObj.isRemote) {
-					this.setDead();
-
-					int var22;
-					for(var22 = 0; var22 < 3; ++var22) {
-						this.dropItemWithOffset(Block.planks.blockID, 1, 0.0F);
-					}
-
-					for(var22 = 0; var22 < 2; ++var22) {
-						this.dropItemWithOffset(Item.stick.shiftedIndex, 1, 0.0F);
-					}
-				}
-			} else {
-				this.motionX *= (double)0.99F;
-				this.motionY *= (double)0.95F;
-				this.motionZ *= (double)0.99F;
-			}
+			this.motionX *= (double)0.99F;
+			this.motionY *= (double)0.95F;
+			this.motionZ *= (double)0.99F;
 
 			this.rotationPitch = 0.0F;
 			var8 = (double)this.rotationYaw;
--- net/minecraft/src/ChunkProviderGenerate.java
+++ net/minecraft/src/ChunkProviderGenerate.java
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.util.Arrays;
 import java.util.List;
 import java.util.Random;
 
@@ -13,8 +14,9 @@
 	public NoiseGeneratorOctaves noiseGen6;
 	public NoiseGeneratorOctaves mobSpawnerNoise;
 	private World worldObj;
+	private WorldType worldType;
 	private final boolean mapFeaturesEnabled;
-	private double[] noiseArray;
+	private double[] noiseArray = new double[825];
 	private double[] stoneNoise = new double[256];
 	private MapGenBase caveGenerator = new MapGenCaves();
 	private MapGenStronghold strongholdGenerator = new MapGenStronghold();
@@ -22,6 +24,7 @@
 	private MapGenMineshaft mineshaftGenerator = new MapGenMineshaft();
 	private MapGenBase ravineGenerator = new MapGenRavine();
 	private BiomeGenBase[] biomesForGeneration;
+	private byte[] blocksForGeneration = new byte[65536];
 	double[] noise3;
 	double[] noise1;
 	double[] noise2;
@@ -32,6 +35,7 @@
 
 	public ChunkProviderGenerate(World var1, long var2, boolean var4) {
 		this.worldObj = var1;
+		this.worldType = var1.getWorldInfo().getTerrainType();
 		this.mapFeaturesEnabled = var4;
 		this.rand = new Random(var2);
 		this.noiseGen1 = new NoiseGeneratorOctaves(this.rand, 16);
@@ -41,14 +45,24 @@
 		this.noiseGen5 = new NoiseGeneratorOctaves(this.rand, 10);
 		this.noiseGen6 = new NoiseGeneratorOctaves(this.rand, 16);
 		this.mobSpawnerNoise = new NoiseGeneratorOctaves(this.rand, 8);
+
+		this.field_35388_l = new float[25];
+
+		for(int var8 = -2; var8 <= 2; ++var8) {
+			for(int var9 = -2; var9 <= 2; ++var9) {
+				float var10 = 10.0F / MathHelper.sqrt_float((float)(var8 * var8 + var9 * var9) + 0.2F);
+				this.field_35388_l[var8 + 2 + (var9 + 2) * 5] = var10;
+			}
+		}
 	}
 
 	public void generateTerrain(int var1, int var2, byte[] var3) {
+		int height = var3.length / 256;
 		byte var4 = 4;
-		byte var5 = 16;
+		int var5 = height / 8;
 		byte var6 = 63;
 		int var7 = var4 + 1;
-		byte var8 = 17;
+		int var8 = var5 + 1;
 		int var9 = var4 + 1;
 		this.biomesForGeneration = this.worldObj.getWorldChunkManager().getBiomesForGeneration(this.biomesForGeneration, var1 * 4 - 2, var2 * 4 - 2, var7 + 5, var9 + 5);
 		this.noiseArray = this.initializeNoiseField(this.noiseArray, var1 * var4, 0, var2 * var4, var7, var8, var9);
@@ -74,8 +88,8 @@
 						double var40 = (var21 - var17) * var32;
 
 						for(int var42 = 0; var42 < 4; ++var42) {
-							int var43 = var42 + var10 * 4 << 11 | 0 + var11 * 4 << 7 | var12 * 8 + var31;
-							short var44 = 128;
+							int var43 = (var42 + var10 * 4) * height * 16 | var11 * 4 * height | var12 * 8 + var31;
+							short var44 = (short)height;
 							var43 -= var44;
 							double var45 = 0.25D;
 							double var49 = (var36 - var34) * var45;
@@ -111,6 +125,7 @@
 	}
 
 	public void replaceBlocksForBiome(int var1, int var2, byte[] var3, BiomeGenBase[] var4) {
+		int height = var3.length / 256;
 		byte var5 = 63;
 		double var6 = 1.0D / 32.0D;
 		this.stoneNoise = this.noiseGen4.generateNoiseOctaves(this.stoneNoise, var1 * 16, var2 * 16, 0, 16, 16, 1, var6 * 2.0D, var6 * 2.0D, var6 * 2.0D);
@@ -124,8 +139,8 @@
 				byte var14 = var10.topBlock;
 				byte var15 = var10.fillerBlock;
 
-				for(int var16 = 127; var16 >= 0; --var16) {
-					int var17 = (var9 * 16 + var8) * 128 + var16;
+				for(int var16 = height - 1; var16 >= 0; --var16) {
+					int var17 = (var9 * 16 + var8) * height + var16;
 					if(var16 <= 0 + this.rand.nextInt(5)) {
 						var3[var17] = (byte)Block.bedrock.blockID;
 					} else {
@@ -178,19 +193,19 @@
 
 	public Chunk provideChunk(int var1, int var2) {
 		this.rand.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
-		byte[] var3 = new byte[-Short.MIN_VALUE];
-		this.generateTerrain(var1, var2, var3);
+        Arrays.fill(this.blocksForGeneration, (byte)0);
+		this.generateTerrain(var1, var2, this.blocksForGeneration);
 		this.biomesForGeneration = this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, var1 * 16, var2 * 16, 16, 16);
-		this.replaceBlocksForBiome(var1, var2, var3, this.biomesForGeneration);
-		this.caveGenerator.generate(this, this.worldObj, var1, var2, var3);
-		this.ravineGenerator.generate(this, this.worldObj, var1, var2, var3);
+		this.replaceBlocksForBiome(var1, var2, this.blocksForGeneration, this.biomesForGeneration);
+		this.caveGenerator.generate(this, this.worldObj, var1, var2, this.blocksForGeneration);
+		this.ravineGenerator.generate(this, this.worldObj, var1, var2, this.blocksForGeneration);
 		if(this.mapFeaturesEnabled) {
-			this.mineshaftGenerator.generate(this, this.worldObj, var1, var2, var3);
-			this.villageGenerator.generate(this, this.worldObj, var1, var2, var3);
-			this.strongholdGenerator.generate(this, this.worldObj, var1, var2, var3);
+			this.mineshaftGenerator.generate(this, this.worldObj, var1, var2, this.blocksForGeneration);
+			this.villageGenerator.generate(this, this.worldObj, var1, var2, this.blocksForGeneration);
+			this.strongholdGenerator.generate(this, this.worldObj, var1, var2, this.blocksForGeneration);
 		}
 
-		Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
+		Chunk var4 = new Chunk(this.worldObj, this.blocksForGeneration, var1, var2);
 		byte[] var5 = var4.getBiomeArray();
 
 		for(int var6 = 0; var6 < var5.length; ++var6) {
@@ -202,21 +217,10 @@
 	}
 
 	private double[] initializeNoiseField(double[] var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		if(var1 == null) {
+		if(var1 == null || var1.length < var5 * var6 * var7) {
 			var1 = new double[var5 * var6 * var7];
 		}
 
-		if(this.field_35388_l == null) {
-			this.field_35388_l = new float[25];
-
-			for(int var8 = -2; var8 <= 2; ++var8) {
-				for(int var9 = -2; var9 <= 2; ++var9) {
-					float var10 = 10.0F / MathHelper.sqrt_float((float)(var8 * var8 + var9 * var9) + 0.2F);
-					this.field_35388_l[var8 + 2 + (var9 + 2) * 5] = var10;
-				}
-			}
-		}
-
 		double var43 = 684.412D;
 		double var44 = 684.412D;
 		this.noise5 = this.noiseGen5.generateNoiseOctaves(this.noise5, var2, var4, var5, var7, 1.121D, 1.121D, 0.5D);
@@ -239,13 +243,24 @@
 				for(int var21 = -var19; var21 <= var19; ++var21) {
 					for(int var22 = -var19; var22 <= var19; ++var22) {
 						BiomeGenBase var23 = this.biomesForGeneration[var14 + var21 + 2 + (var15 + var22 + 2) * (var5 + 5)];
-						float var24 = this.field_35388_l[var21 + 2 + (var22 + 2) * 5] / (var23.minHeight + 2.0F);
+						float var25 = var23.minHeight;
+						float var26 = var23.maxHeight;
+
+						if(this.worldType == WorldType.AMPLIFIED
+								|| (this.worldType instanceof WorldTypeSingleBiome
+										&& ((WorldTypeSingleBiome)this.worldType).isAmplified())
+								&& var25 > -0.5F) {
+							var25 = 1.0F + var25 / 2.0F * 2.0F;
+							var26 = 1.0F + var26 / 2.0F * 4.0F;
+						}
+
+						float var24 = this.field_35388_l[var21 + 2 + (var22 + 2) * 5] / (var25 + 2.0F);
 						if(var23.minHeight > var20.minHeight) {
 							var24 /= 2.0F;
 						}
 
-						var16 += var23.maxHeight * var24;
-						var17 += var23.minHeight * var24;
+						var16 += var26 * var24;
+						var17 += var25 * var24;
 						var18 += var24;
 					}
 				}
@@ -277,14 +292,14 @@
 				}
 
 				++var13;
+				double var47 = (double)var17;
+				double var26 = (double)var16;
+				var47 += var45 * 0.2D;
+				var47 = var47 * 8.5D / 8.0D;
+				double var28 = 8.5D + var47 * 4.0D;
 
 				for(int var46 = 0; var46 < var6; ++var46) {
-					double var47 = (double)var17;
-					double var26 = (double)var16;
-					var47 += var45 * 0.2D;
-					var47 = var47 * (double)var6 / 16.0D;
-					double var28 = (double)var6 / 2.0D + var47 * 4.0D;
-					double var30 = 0.0D;
+					double var30;
 					double var32 = ((double)var46 - var28) * 12.0D * 128.0D / 128.0D / var26;
 					if(var32 < 0.0D) {
 						var32 *= 4.0D;
@@ -339,14 +354,14 @@
 		int var12;
 		int var13;
 		int var14;
-		if(!var11 && this.rand.nextInt(4) == 0) {
+		if(!var11 && var6.biomeDecorator.generateLakes && this.rand.nextInt(4) == 0) {
 			var12 = var4 + this.rand.nextInt(16) + 8;
 			var13 = this.rand.nextInt(128);
 			var14 = var5 + this.rand.nextInt(16) + 8;
 			(new WorldGenLakes(Block.waterStill.blockID)).generate(this.worldObj, this.rand, var12, var13, var14);
 		}
 
-		if(!var11 && this.rand.nextInt(8) == 0) {
+		if(!var11 && var6.biomeDecorator.generateLakes && this.rand.nextInt(8) == 0) {
 			var12 = var4 + this.rand.nextInt(16) + 8;
 			var13 = this.rand.nextInt(this.rand.nextInt(120) + 8);
 			var14 = var5 + this.rand.nextInt(16) + 8;
--- net/minecraft/src/GenLayerHills.java
+++ net/minecraft/src/GenLayerHills.java
@@ -14,20 +14,11 @@
 			for(int var8 = 0; var8 < var3; ++var8) {
 				this.initChunkSeed((long)(var8 + var1), (long)(var7 + var2));
 				int var9 = var5[var8 + 1 + (var7 + 1) * (var3 + 2)];
-				if(this.nextInt(3) == 0) {
+				if(this.nextInt(2) == 0) {
 					int var10 = var9;
-					if(var9 == BiomeGenBase.desert.biomeID) {
-						var10 = BiomeGenBase.desertHills.biomeID;
-					} else if(var9 == BiomeGenBase.forest.biomeID) {
-						var10 = BiomeGenBase.forestHills.biomeID;
-					} else if(var9 == BiomeGenBase.taiga.biomeID) {
-						var10 = BiomeGenBase.taigaHills.biomeID;
-					} else if(var9 == BiomeGenBase.plains.biomeID) {
-						var10 = BiomeGenBase.forest.biomeID;
-					} else if(var9 == BiomeGenBase.icePlains.biomeID) {
-						var10 = BiomeGenBase.iceMountains.biomeID;
-					} else if(var9 == BiomeGenBase.jungle.biomeID) {
-						var10 = BiomeGenBase.jungleHills.biomeID;
+					BiomeGenBase variant = BiomeGenBase.biomeList[var9].hillsVariant;
+					if (variant != null) {
+						var10 = variant.biomeID;
 					}
 
 					if(var10 != var9) {
--- net/minecraft/src/EntityList.java
+++ net/minecraft/src/EntityList.java
@@ -92,6 +92,14 @@
 		return var1 != null ? (String)classToStringMapping.get(var1) : null;
 	}
 
+	public static EntityEggInfo getEntityEgg(Entity var0) {
+		int id = getEntityID(var0);
+		if(entityEggs.containsKey(id)) {
+			return (EntityEggInfo)entityEggs.get(id);
+		}
+		return null;
+	}
+
 	static {
 		addMapping(EntityItem.class, "Item", 1);
 		addMapping(EntityXPOrb.class, "XPOrb", 2);
--- net/minecraft/src/GuiContainer.java
+++ net/minecraft/src/GuiContainer.java
@@ -97,17 +97,18 @@
 				this.zLevel = 300.0F;
 				itemRenderer.zLevel = 300.0F;
 				int var15 = -267386864;
-				this.drawGradientRect(var11 - 3, var12 - 4, var11 + var10 + 3, var12 - 3, var15, var15);
-				this.drawGradientRect(var11 - 3, var12 + var14 + 3, var11 + var10 + 3, var12 + var14 + 4, var15, var15);
-				this.drawGradientRect(var11 - 3, var12 - 3, var11 + var10 + 3, var12 + var14 + 3, var15, var15);
-				this.drawGradientRect(var11 - 4, var12 - 3, var11 - 3, var12 + var14 + 3, var15, var15);
-				this.drawGradientRect(var11 + var10 + 3, var12 - 3, var11 + var10 + 4, var12 + var14 + 3, var15, var15);
+//				this.drawGradientRect(var11 - 3, var12 - 4, var11 + var10 + 3, var12 - 3, var15, var15);
+//				this.drawGradientRect(var11 - 3, var12 + var14 + 3, var11 + var10 + 3, var12 + var14 + 4, var15, var15);
+//				this.drawGradientRect(var11 - 3, var12 - 3, var11 + var10 + 3, var12 + var14 + 3, var15, var15);
+//				this.drawGradientRect(var11 - 4, var12 - 3, var11 - 3, var12 + var14 + 3, var15, var15);
+//				this.drawGradientRect(var11 + var10 + 3, var12 - 3, var11 + var10 + 4, var12 + var14 + 3, var15, var15);
 				int var16 = 1347420415;
 				int var17 = (var16 & 16711422) >> 1 | var16 & -16777216;
-				this.drawGradientRect(var11 - 3, var12 - 3 + 1, var11 - 3 + 1, var12 + var14 + 3 - 1, var16, var17);
-				this.drawGradientRect(var11 + var10 + 2, var12 - 3 + 1, var11 + var10 + 3, var12 + var14 + 3 - 1, var16, var17);
-				this.drawGradientRect(var11 - 3, var12 - 3, var11 + var10 + 3, var12 - 3 + 1, var16, var16);
-				this.drawGradientRect(var11 - 3, var12 + var14 + 2, var11 + var10 + 3, var12 + var14 + 3, var17, var17);
+//				this.drawGradientRect(var11 - 3, var12 - 3 + 1, var11 - 3 + 1, var12 + var14 + 3 - 1, var16, var17);
+//				this.drawGradientRect(var11 + var10 + 2, var12 - 3 + 1, var11 + var10 + 3, var12 + var14 + 3 - 1, var16, var17);
+//				this.drawGradientRect(var11 - 3, var12 - 3, var11 + var10 + 3, var12 - 3 + 1, var16, var16);
+//				this.drawGradientRect(var11 - 3, var12 + var14 + 2, var11 + var10 + 3, var12 + var14 + 3, var17, var17);
+				this.drawGradientRect(var11 - 3, var12 - 3, var11 + var10 + 3, var12 + var14 + 3, -1073741824, -1073741824);
 
 				for(int var18 = 0; var18 < var24.size(); ++var18) {
 					String var19 = (String)var24.get(var18);
--- net/minecraft/src/BlockFence.java
+++ net/minecraft/src/BlockFence.java
@@ -94,4 +94,14 @@
 			return true;
 		}
 	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return this.blockMaterial == Material.wood
+				? Block.planks.getBlockTextureFromSideAndMetadata(var1, var2)
+				: super.getBlockTextureFromSideAndMetadata(var1, var2);
+	}
+
+	protected int damageDropped(int var1) {
+		return this.blockMaterial == Material.wood ? var1 : 0;
+	}
 }
--- net/minecraft/src/GenLayerAddMushroomIsland.java
+++ net/minecraft/src/GenLayerAddMushroomIsland.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import static net.minecraft.src.BiomeGenBase.oceanList;
+
 public class GenLayerAddMushroomIsland extends GenLayer {
 	public GenLayerAddMushroomIsland(long var1, GenLayer var3) {
 		super(var1);
--- /dev/null
+++ net/minecraft/src/GenLayerTemperatureMix.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+public class GenLayerTemperatureMix extends GenLayer {
+    private GenLayer otherParent;
+    private int strength;
+
+    public GenLayerTemperatureMix(GenLayer genLayer, GenLayer genLayer2, int strength) {
+        super(0L);
+        this.parent = genLayer2;
+        this.otherParent = genLayer;
+        this.strength = strength;
+    }
+
+    public int[] getInts(int n, int n2, int n3, int n4) {
+        int[] nArray = this.parent.getInts(n, n2, n3, n4);
+        int[] nArray2 = this.otherParent.getInts(n, n2, n3, n4);
+        int[] nArray3 = IntCache.getIntCache(n3 * n4);
+        for (int i = 0; i < n3 * n4; ++i) {
+            nArray3[i] = nArray2[i] + (BiomeGenBase.biomeList[nArray[i]].getIntTemperature() - nArray2[i]) / (this.strength * 2 + 1);
+        }
+        return nArray3;
+    }
+}
--- /dev/null
+++ net/minecraft/src/GenLayerDownfall.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class GenLayerDownfall extends GenLayer {
+    public GenLayerDownfall(GenLayer genLayer) {
+        super(0L);
+        this.parent = genLayer;
+    }
+
+    public int[] getInts(int n, int n2, int n3, int n4) {
+        int[] nArray = this.parent.getInts(n, n2, n3, n4);
+        int[] nArray2 = IntCache.getIntCache(n3 * n4);
+        for (int i = 0; i < n3 * n4; ++i) {
+            nArray2[i] = BiomeGenBase.biomeList[nArray[i]].getIntRainfall();
+        }
+        return nArray2;
+    }
+}
--- net/minecraft/src/BiomeGenJungle.java
+++ net/minecraft/src/BiomeGenJungle.java
@@ -24,9 +24,9 @@
 		super.decorate(var1, var2, var3, var4);
 		WorldGenVines var5 = new WorldGenVines();
 
-		for(int var6 = 0; var6 < 50; ++var6) {
+		for(int var6 = 0; var6 < 80; ++var6) {
 			int var7 = var3 + var2.nextInt(16) + 8;
-			byte var8 = 64;
+			int var8 = var2.nextInt(64);
 			int var9 = var4 + var2.nextInt(16) + 8;
 			var5.generate(var1, var2, var7, var8, var9);
 		}
--- net/minecraft/src/ItemSoup.java
+++ net/minecraft/src/ItemSoup.java
@@ -1,13 +1,26 @@
 package net.minecraft.src;
 
 public class ItemSoup extends ItemFood {
-	public ItemSoup(int var1, int var2) {
-		super(var1, var2, false);
-		this.setMaxStackSize(1);
-	}
-
-	public ItemStack onFoodEaten(ItemStack var1, World var2, EntityPlayer var3) {
-		super.onFoodEaten(var1, var2, var3);
-		return new ItemStack(Item.bowlEmpty);
-	}
+    public ItemSoup(int var1, int var2) {
+        super(var1, var2, false);
+        this.setMaxStackSize(4);
+    }
+
+    public ItemStack onFoodEaten(ItemStack var1, World var2, EntityPlayer var3) {
+        var1 = super.onFoodEaten(var1, var2, var3);
+        if (var1.stackSize <= 0) {
+            return new ItemStack(Item.bowlEmpty);
+        } else {
+            var3.inventory.addItemStackToInventory(new ItemStack(Item.bowlEmpty));
+            return var1;
+        }
+    }
+
+    protected void setClassicTweaks() {
+        this.setMaxStackSize(1);
+    }
+
+    protected void unsetClassicTweaks() {
+        this.setMaxStackSize(4);
+    }
 }
--- net/minecraft/src/EntitySnowman.java
+++ net/minecraft/src/EntitySnowman.java
@@ -37,7 +37,7 @@
 			var2 = MathHelper.floor_double(this.posX + (double)((float)(var1 % 2 * 2 - 1) * 0.25F));
 			int var3 = MathHelper.floor_double(this.posY);
 			int var4 = MathHelper.floor_double(this.posZ + (double)((float)(var1 / 2 % 2 * 2 - 1) * 0.25F));
-			if(this.worldObj.getBlockId(var2, var3, var4) == 0 && this.worldObj.getBiomeGenForCoords(var2, var4).getFloatTemperature() < 0.8F && Block.snow.canPlaceBlockAt(this.worldObj, var2, var3, var4)) {
+			if(this.worldObj.getBlockId(var2, var3, var4) == 0 && this.worldObj.getBiomeGenForCoords(var2, var4).getFloatTemperature() < 1.0F && Block.snow.canPlaceBlockAt(this.worldObj, var2, var3, var4)) {
 				this.worldObj.setBlockWithNotify(var2, var3, var4, Block.snow.blockID);
 			}
 		}
--- net/minecraft/src/PlayerControllerSP.java
+++ net/minecraft/src/PlayerControllerSP.java
@@ -90,7 +90,6 @@
 					this.curBlockDamage = 0.0F;
 					this.prevBlockDamage = 0.0F;
 					this.blockDestroySoundCounter = 0.0F;
-					this.blockHitWait = 5;
 				}
 			} else {
 				this.curBlockDamage = 0.0F;
--- net/minecraft/src/ComponentStrongholdRoomCrossing.java
+++ net/minecraft/src/ComponentStrongholdRoomCrossing.java
@@ -13,7 +13,12 @@
 		this.coordBaseMode = var4;
 		this.doorType = this.getRandomDoor(var2);
 		this.boundingBox = var3;
-		this.roomType = var2.nextInt(5);
+
+		int roomType = var2.nextInt(5);
+		if (roomType == 2 && this.boundingBox.minY >= 64) {
+			roomType = -1;
+		}
+		this.roomType = roomType;
 	}
 
 	public void buildComponent(StructureComponent var1, List var2, Random var3) {
--- net/minecraft/src/BlockStairs.java
+++ net/minecraft/src/BlockStairs.java
@@ -5,10 +5,16 @@
 
 public class BlockStairs extends Block {
 	private Block modelBlock;
+	private int modelMetadata;
 
 	protected BlockStairs(int var1, Block var2) {
+		this(var1, var2, 0);
+	}
+
+	protected BlockStairs(int var1, Block var2, int var3) {
 		super(var1, var2.blockIndexInTexture, var2.blockMaterial);
 		this.modelBlock = var2;
+		this.modelMetadata = var3;
 		this.setHardness(var2.blockHardness);
 		this.setResistance(var2.blockResistance / 3.0F);
 		this.setStepSound(var2.stepSound);
@@ -40,37 +46,229 @@
 	}
 
 	public void getCollidingBoundingBoxes(World var1, int var2, int var3, int var4, AxisAlignedBB var5, ArrayList var6) {
-		int var7 = var1.getBlockMetadata(var2, var3, var4);
-		int var8 = var7 & 3;
-		float var9 = 0.0F;
-		float var10 = 0.5F;
-		float var11 = 0.5F;
-		float var12 = 1.0F;
-		if((var7 & 4) != 0) {
-			var9 = 0.5F;
-			var10 = 1.0F;
-			var11 = 0.0F;
-			var12 = 0.5F;
-		}
-
-		this.setBlockBounds(0.0F, var9, 0.0F, 1.0F, var10, 1.0F);
-		super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		if(var8 == 0) {
-			this.setBlockBounds(0.5F, var11, 0.0F, 1.0F, var12, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		} else if(var8 == 1) {
-			this.setBlockBounds(0.0F, var11, 0.0F, 0.5F, var12, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		} else if(var8 == 2) {
-			this.setBlockBounds(0.0F, var11, 0.5F, 1.0F, var12, 1.0F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		} else if(var8 == 3) {
-			this.setBlockBounds(0.0F, var11, 0.0F, 1.0F, var12, 0.5F);
-			super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-		}
-
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+		this.halfType(var1, var2, var3, var4);
+        super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+        boolean var8 = this.cornerTypeA(var1, var2, var3, var4);
+        super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+
+        if (var8 && this.cornerTypeB(var1, var2, var3, var4)) {
+            super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+        }
+
+        this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 	}
+
+	public void halfType(IBlockAccess var1, int var2, int var3, int var4) {
+        int var5 = var1.getBlockMetadata(var2, var3, var4);
+
+        if ((var5 & 4) != 0) {
+            this.setBlockBounds(0.0F, 0.5F, 0.0F, 1.0F, 1.0F, 1.0F);
+        } else {
+            this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
+        }
+    }
+
+	private boolean validNeighbor(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+        Block var6 = Block.blocksList[var1.getBlockId(var2, var3, var4)];
+        return var6 instanceof BlockStairs && var1.getBlockMetadata(var2, var3, var4) == var5;
+    }
+
+    public boolean cornerTypeA(IBlockAccess var1, int var2, int var3, int var4) {
+        int var5 = var1.getBlockMetadata(var2, var3, var4);
+        int var6 = var5 & 3;
+        float var7 = 0.5F;
+        float var8 = 1.0F;
+
+        if ((var5 & 4) != 0) {
+            var7 = 0.0F;
+            var8 = 0.5F;
+        }
+
+        float var9 = 0.0F;
+        float var10 = 1.0F;
+        float var11 = 0.0F;
+        float var12 = 0.5F;
+        boolean var13 = true;
+        Block var14;
+        int var15;
+        int var16;
+
+        if (var6 == 0) {
+            var9 = 0.5F;
+            var12 = 1.0F;
+            int var14i = var1.getBlockId(var2 + 1, var3, var4);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2 + 1, var3, var4);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var16 = var15 & 3;
+
+                if (var16 == 3 && !this.validNeighbor(var1, var2, var3, var4 + 1, var5)) {
+                    var12 = 0.5F;
+                    var13 = false;
+                } else if (var16 == 2 && !this.validNeighbor(var1, var2, var3, var4 - 1, var5)) {
+                    var11 = 0.5F;
+                    var13 = false;
+                }
+            }
+        } else if (var6 == 1) {
+            var10 = 0.5F;
+            var12 = 1.0F;
+            int var14i = var1.getBlockId(var2 - 1, var3, var4);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2 - 1, var3, var4);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var16 = var15 & 3;
+
+                if (var16 == 3 && !this.validNeighbor(var1, var2, var3, var4 + 1, var5)) {
+                    var12 = 0.5F;
+                    var13 = false;
+                } else if (var16 == 2 && !this.validNeighbor(var1, var2, var3, var4 - 1, var5)) {
+                    var11 = 0.5F;
+                    var13 = false;
+                }
+            }
+        } else if (var6 == 2) {
+            var11 = 0.5F;
+            var12 = 1.0F;
+            int var14i = var1.getBlockId(var2, var3, var4 + 1);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2, var3, var4 + 1);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var16 = var15 & 3;
+
+                if (var16 == 1 && !this.validNeighbor(var1, var2 + 1, var3, var4, var5)) {
+                    var10 = 0.5F;
+                    var13 = false;
+                } else if (var16 == 0 && !this.validNeighbor(var1, var2 - 1, var3, var4, var5)) {
+                    var9 = 0.5F;
+                    var13 = false;
+                }
+            }
+        } else if (var6 == 3) {
+            int var14i = var1.getBlockId(var2, var3, var4 - 1);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2, var3, var4 - 1);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var16 = var15 & 3;
+
+                if (var16 == 1 && !this.validNeighbor(var1, var2 + 1, var3, var4, var5)) {
+                    var10 = 0.5F;
+                    var13 = false;
+                } else if (var16 == 0 && !this.validNeighbor(var1, var2 - 1, var3, var4, var5)) {
+                    var9 = 0.5F;
+                    var13 = false;
+                }
+            }
+        }
+
+        this.setBlockBounds(var9, var7, var11, var10, var8, var12);
+        return var13;
+    }
+
+    public boolean cornerTypeB(IBlockAccess var1, int var2, int var3, int var4) {
+        int var5 = var1.getBlockMetadata(var2, var3, var4);
+        int var6 = var5 & 3;
+        float var7 = 0.5F;
+        float var8 = 1.0F;
+
+        if ((var5 & 4) != 0) {
+            var7 = 0.0F;
+            var8 = 0.5F;
+        }
+
+        float var9 = 0.0F;
+        float var10 = 0.5F;
+        float var11 = 0.5F;
+        float var12 = 1.0F;
+        boolean var13 = false;
+        Block var14;
+        int var15;
+        int var16;
+
+        if (var6 == 0) {
+            int var14i = var1.getBlockId(var2 - 1, var3, var4);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2 - 1, var3, var4);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var16 = var15 & 3;
+
+                if (var16 == 3 && !this.validNeighbor(var1, var2, var3, var4 - 1, var5)) {
+                    var11 = 0.0F;
+                    var12 = 0.5F;
+                    var13 = true;
+                } else if (var16 == 2 && !this.validNeighbor(var1, var2, var3, var4 + 1, var5)) {
+                    var11 = 0.5F;
+                    var12 = 1.0F;
+                    var13 = true;
+                }
+            }
+        } else if (var6 == 1) {
+            int var14i = var1.getBlockId(var2 + 1, var3, var4);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2 + 1, var3, var4);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var9 = 0.5F;
+                var10 = 1.0F;
+                var16 = var15 & 3;
+
+                if (var16 == 3 && !this.validNeighbor(var1, var2, var3, var4 - 1, var5)) {
+                    var11 = 0.0F;
+                    var12 = 0.5F;
+                    var13 = true;
+                } else if (var16 == 2 && !this.validNeighbor(var1, var2, var3, var4 + 1, var5)) {
+                    var11 = 0.5F;
+                    var12 = 1.0F;
+                    var13 = true;
+                }
+            }
+        } else if (var6 == 2) {
+            int var14i = var1.getBlockId(var2, var3, var4 - 1);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2, var3, var4 - 1);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var11 = 0.0F;
+                var12 = 0.5F;
+                var16 = var15 & 3;
+
+                if (var16 == 1 && !this.validNeighbor(var1, var2 - 1, var3, var4, var5)) {
+                    var13 = true;
+                } else if (var16 == 0 && !this.validNeighbor(var1, var2 + 1, var3, var4, var5)) {
+                    var9 = 0.5F;
+                    var10 = 1.0F;
+                    var13 = true;
+                }
+            }
+        } else if (var6 == 3) {
+            int var14i = var1.getBlockId(var2, var3, var4 + 1);
+			var14 = Block.blocksList[var14i];
+            var15 = var1.getBlockMetadata(var2, var3, var4 + 1);
+
+            if (var14 instanceof BlockStairs && (var5 & 4) == (var15 & 4)) {
+                var16 = var15 & 3;
+
+                if (var16 == 1 && !this.validNeighbor(var1, var2 - 1, var3, var4, var5)) {
+                    var13 = true;
+                } else if (var16 == 0 && !this.validNeighbor(var1, var2 + 1, var3, var4, var5)) {
+                    var9 = 0.5F;
+                    var10 = 1.0F;
+                    var13 = true;
+                }
+            }
+        }
+
+        if (var13) {
+            this.setBlockBounds(var9, var7, var11, var10, var8, var12);
+        }
+
+        return var13;
+    }
 
 	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
 		this.modelBlock.randomDisplayTick(var1, var2, var3, var4, var5);
@@ -101,11 +299,11 @@
 	}
 
 	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, 0);
+		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, this.modelMetadata);
 	}
 
 	public int getBlockTextureFromSide(int var1) {
-		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, 0);
+		return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, this.modelMetadata);
 	}
 
 	public int tickRate() {
--- net/minecraft/src/GuiWinGame.java
+++ net/minecraft/src/GuiWinGame.java
@@ -6,6 +6,8 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
+
+import org.lwjgl.input.Keyboard;
 import org.lwjgl.opengl.GL11;
 
 public class GuiWinGame extends GuiScreen {
@@ -15,7 +17,8 @@
 	private float field_41043_e = 0.5F;
 
 	public void updateScreen() {
-		++this.updateCounter;
+		this.updateCounter += this.speedUpCredits() ? 25 : 1;
+
 		float var1 = (float)(this.field_41042_d + this.height + this.height + 24) / this.field_41043_e;
 		if((float)this.updateCounter > var1) {
 			this.respawnPlayer();
@@ -23,6 +26,10 @@
 
 	}
 
+	private boolean speedUpCredits() {
+		return Keyboard.isKeyDown(Keyboard.KEY_SPACE);
+	}
+
 	protected void keyTyped(char var1, int var2) {
 		if(var2 == 1) {
 			this.respawnPlayer();
@@ -31,6 +38,11 @@
 	}
 
 	private void respawnPlayer() {
+		if(this.mc.theWorld == null) {
+			this.mc.displayGuiScreen(new GuiMainMenu());
+			return;
+		}
+
 		if(this.mc.theWorld.isRemote) {
 			EntityClientPlayerMP var1 = (EntityClientPlayerMP)this.mc.thePlayer;
 			var1.sendQueue.addToSendQueue(new Packet9Respawn(var1.dimension, (byte)this.mc.theWorld.difficultySetting, this.mc.theWorld.getWorldInfo().getTerrainType(), this.mc.theWorld.getHeight(), 0));
@@ -131,6 +143,10 @@
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
+		if (this.speedUpCredits()) {
+			var3 *= 25.0F;
+		}
+
 		this.func_41040_b(var1, var2, var3);
 		Tessellator var4 = Tessellator.instance;
 		short var5 = 274;
@@ -143,6 +159,7 @@
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		this.drawTexturedModalRect(var6, var7, 0, 0, 155, 44);
 		this.drawTexturedModalRect(var6 + 155, var7, 0, 45, 155, 44);
+		this.drawTexturedModalRect((this.width - 128) / 2, var7 + 30, 0, 96, 128, 32);
 		var4.setColorOpaque_I(16777215);
 		int var9 = var7 + 200;
 
--- net/minecraft/src/ComponentStrongholdStairs2.java
+++ net/minecraft/src/ComponentStrongholdStairs2.java
@@ -15,4 +15,8 @@
 	public ChunkPosition getCenter() {
 		return this.portalRoom != null ? this.portalRoom.getCenter() : super.getCenter();
 	}
+
+	public boolean addComponentParts(World var1, Random var2, StructureBoundingBox var3) {
+		return !this.isLiquidInStructureBoundingBox(var1, var3);
+	}
 }
--- net/minecraft/src/RenderEngine.java
+++ net/minecraft/src/RenderEngine.java
@@ -485,6 +485,10 @@
 			}
 		}
 
+		ColorizerWater.setWaterBiomeColorizer(this.getTextureContents("/misc/watercolor.png"));
+		ColorizerGrass.setGrassBiomeColorizer(this.getTextureContents("/misc/grasscolor.png"));
+		ColorizerFoliage.getFoilageBiomeColorizer(this.getTextureContents("/misc/foliagecolor.png"));
+
 	}
 
 	private BufferedImage readTextureImage(InputStream var1) throws IOException {
--- net/minecraft/src/StructureStrongholdPieceWeight2.java
+++ net/minecraft/src/StructureStrongholdPieceWeight2.java
@@ -5,6 +5,10 @@
 		super(var1, var2, var3);
 	}
 
+	StructureStrongholdPieceWeight2(Class var1, int var2, int var3, boolean var4) {
+		super(var1, var2, var3, var4);
+	}
+
 	public boolean canSpawnMoreStructuresOfType(int var1) {
 		return super.canSpawnMoreStructuresOfType(var1) && var1 > 4;
 	}
--- net/minecraft/src/WorldChunkManager.java
+++ net/minecraft/src/WorldChunkManager.java
@@ -1,25 +1,31 @@
 package net.minecraft.src;
 
-import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Random;
 
 public class WorldChunkManager {
 	private GenLayer genBiomes;
 	private GenLayer biomeIndexLayer;
+	private GenLayer temperatureIndexLayer;
+	private GenLayer rainfallIndexLayer;
 	private BiomeCache biomeCache;
 	private List biomesToSpawnIn;
 
 	protected WorldChunkManager() {
 		this.biomeCache = new BiomeCache(this);
-		this.biomesToSpawnIn = new ArrayList();
-		this.biomesToSpawnIn.add(BiomeGenBase.forest);
-		this.biomesToSpawnIn.add(BiomeGenBase.plains);
-		this.biomesToSpawnIn.add(BiomeGenBase.taiga);
-		this.biomesToSpawnIn.add(BiomeGenBase.taigaHills);
-		this.biomesToSpawnIn.add(BiomeGenBase.forestHills);
-		this.biomesToSpawnIn.add(BiomeGenBase.jungle);
-		this.biomesToSpawnIn.add(BiomeGenBase.jungleHills);
+		this.biomesToSpawnIn = Arrays.asList(
+				BiomeGenBase.plains,
+				BiomeGenBase.forest,
+				BiomeGenBase.forestHills,
+				BiomeGenBase.snowyTaiga,
+				BiomeGenBase.snowyTaigaHills,
+				BiomeGenBase.beach,
+				BiomeGenBase.taiga,
+				BiomeGenBase.taigaHills,
+				BiomeGenBase.swampland,
+				BiomeGenBase.gravelBeach
+		);
 	}
 
 	public WorldChunkManager(long var1, WorldType var3) {
@@ -27,6 +33,8 @@
 		GenLayer[] var4 = GenLayer.func_48425_a(var1, var3);
 		this.genBiomes = var4[0];
 		this.biomeIndexLayer = var4[1];
+		this.temperatureIndexLayer = var4[2];
+		this.rainfallIndexLayer = var4[3];
 	}
 
 	public WorldChunkManager(World var1) {
@@ -41,16 +49,20 @@
 		return this.biomeCache.getBiomeGenAt(var1, var2);
 	}
 
+	public float getRainfall(int var1, int var2) {
+		return this.biomeCache.getRainfall(var1, var2);
+	}
+
 	public float[] getRainfall(float[] var1, int var2, int var3, int var4, int var5) {
 		IntCache.resetIntCache();
 		if(var1 == null || var1.length < var4 * var5) {
 			var1 = new float[var4 * var5];
 		}
 
-		int[] var6 = this.biomeIndexLayer.getInts(var2, var3, var4, var5);
+		int[] var6 = this.rainfallIndexLayer.getInts(var2, var3, var4, var5);
 
 		for(int var7 = 0; var7 < var4 * var5; ++var7) {
-			float var8 = (float)BiomeGenBase.biomeList[var6[var7]].getIntRainfall() / 65536.0F;
+			float var8 = (float)var6[var7] / 65536.0F;
 			if(var8 > 1.0F) {
 				var8 = 1.0F;
 			}
@@ -65,16 +77,20 @@
 		return var1;
 	}
 
+	public float getTemperature(int var1, int var2) {
+		return this.biomeCache.getTemperature(var1, var2);
+	}
+
 	public float[] getTemperatures(float[] var1, int var2, int var3, int var4, int var5) {
 		IntCache.resetIntCache();
 		if(var1 == null || var1.length < var4 * var5) {
 			var1 = new float[var4 * var5];
 		}
 
-		int[] var6 = this.biomeIndexLayer.getInts(var2, var3, var4, var5);
+		int[] var6 = this.temperatureIndexLayer.getInts(var2, var3, var4, var5);
 
 		for(int var7 = 0; var7 < var4 * var5; ++var7) {
-			float var8 = (float)BiomeGenBase.biomeList[var6[var7]].getIntTemperature() / 65536.0F;
+			float var8 = (float)var6[var7] / 65536.0F;
 			if(var8 > 1.0F) {
 				var8 = 1.0F;
 			}
@@ -159,7 +175,7 @@
 			int var16 = var6 + var15 % var10 << 2;
 			int var17 = var7 + var15 / var10 << 2;
 			BiomeGenBase var18 = BiomeGenBase.biomeList[var12[var15]];
-			if(var4.contains(var18) && (var13 == null || var5.nextInt(var14 + 1) == 0)) {
+			if((var4 != null ? var4.contains(var18) : !var18.isOcean()) && (var13 == null || var5.nextInt(var14 + 1) == 0)) {
 				var13 = new ChunkPosition(var16, 0, var17);
 				++var14;
 			}
--- net/minecraft/src/EntityPlayerSP.java
+++ net/minecraft/src/EntityPlayerSP.java
@@ -46,13 +46,6 @@
 	}
 
 	public void onLivingUpdate() {
-		if(this.sprintingTicksLeft > 0) {
-			--this.sprintingTicksLeft;
-			if(this.sprintingTicksLeft == 0) {
-				this.setSprinting(false);
-			}
-		}
-
 		if(this.sprintToggleTimer > 0) {
 			--this.sprintToggleTimer;
 		}
@@ -124,7 +117,7 @@
 			}
 
 			var1 = this.movementInput.jump;
-			float var2 = 0.8F;
+			float var2 = this.capabilities.isFlying ? 0.3F : 0.8F;
 			boolean var3 = this.movementInput.moveForward >= var2;
 			this.movementInput.func_52013_a();
 			if(this.isUsingItem()) {
@@ -141,17 +134,30 @@
 			this.pushOutOfBlocks(this.posX - (double)this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ - (double)this.width * 0.35D);
 			this.pushOutOfBlocks(this.posX + (double)this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ - (double)this.width * 0.35D);
 			this.pushOutOfBlocks(this.posX + (double)this.width * 0.35D, this.boundingBox.minY + 0.5D, this.posZ + (double)this.width * 0.35D);
-			boolean var4 = (float)this.getFoodStats().getFoodLevel() > 6.0F;
-			if(this.onGround && !var3 && this.movementInput.moveForward >= var2 && !this.isSprinting() && var4 && !this.isUsingItem() && !this.isPotionActive(Potion.blindness)) {
-				if(this.sprintToggleTimer == 0) {
-					this.sprintToggleTimer = 7;
-				} else {
+			boolean var4 = (float)this.getFoodStats().getFoodLevel() > 0.0F;
+			if(this.sprintCooldown == 0
+					&& !this.worldObj.worldInfo.isHardcoreModeEnabled()
+					&& !this.worldObj.getWorldInfo().isClassicModeEnabled()
+					&& (this.onGround || this.capabilities.isFlying)
+					&& !this.isSprinting()
+					&& var4
+					&& !this.isUsingItem()
+					&& !this.isPotionActive(Potion.blindness)) {
+				if (this.movementInput.moveForward >= var2 && !var3) {
+					if (this.sprintToggleTimer == 0) {
+						this.sprintToggleTimer = 7;
+					} else {
+						this.setSprinting(true);
+						this.sprintToggleTimer = 0;
+					}
+				}
+
+				if (this.movementInput.sprint) {
 					this.setSprinting(true);
-					this.sprintToggleTimer = 0;
 				}
 			}
 
-			if(this.isSneaking()) {
+			if(this.isSneaking() && !this.capabilities.isFlying) {
 				this.sprintToggleTimer = 0;
 			}
 
@@ -159,7 +165,7 @@
 				this.setSprinting(false);
 			}
 
-			if(this.capabilities.allowFlying && !var1 && this.movementInput.jump) {
+			if(this.capabilities.allowFlying && !var1 && this.movementInput.jump && !this.noClip) {
 				if(this.flyToggleTimer == 0) {
 					this.flyToggleTimer = 7;
 				} else {
@@ -170,13 +176,25 @@
 			}
 
 			if(this.capabilities.isFlying) {
+				double move = 0.0D;
+
 				if(this.movementInput.sneak) {
-					this.motionY -= 0.15D;
+					move -= 0.15D;
 				}
 
 				if(this.movementInput.jump) {
-					this.motionY += 0.15D;
-				}
+					move += 0.15D;
+				}
+
+				if(this.isSprinting()) {
+					move *= 1.5D;
+				}
+
+				if(this.noClip) {
+					move *= 1.5D;
+				}
+
+				this.motionY += move;
 			}
 
 			super.onLivingUpdate();
--- net/minecraft/src/EntityXPOrb.java
+++ net/minecraft/src/EntityXPOrb.java
@@ -145,8 +145,9 @@
 	public void onCollideWithPlayer(EntityPlayer var1) {
 		if(!this.worldObj.isRemote) {
 			if(this.field_35126_c == 0 && var1.xpCooldown == 0) {
-				var1.xpCooldown = 2;
-				this.worldObj.playSoundAtEntity(this, "random.orb", 0.1F, 0.5F * ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.8F));
+				var1.xpCooldown = 1;
+//				this.worldObj.playSoundAtEntity(this, "random.orb", 0.1F, 0.5F * ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.8F));
+				this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, 0.5F * ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F));
 				var1.onItemPickup(this, 1);
 				var1.addExperience(this.xpValue);
 				this.setDead();
--- net/minecraft/src/WorldInfo.java
+++ net/minecraft/src/WorldInfo.java
@@ -21,7 +21,8 @@
 	private int thunderTime;
 	private int gameType;
 	private boolean mapFeaturesEnabled;
-	private boolean hardcore = false;
+	private boolean hardcore;
+	private boolean classic;
 
 	public WorldInfo(NBTTagCompound var1) {
 		this.randomSeed = var1.getLong("RandomSeed");
@@ -30,7 +31,8 @@
 			this.terrainType = WorldType.parseWorldType(var2);
 			if(this.terrainType == null) {
 				this.terrainType = WorldType.DEFAULT;
-			} else if(this.terrainType.func_48626_e()) {
+			}
+            if(this.terrainType.func_48626_e()) {
 				int var3 = 0;
 				if(var1.hasKey("generatorVersion")) {
 					var3 = var1.getInteger("generatorVersion");
@@ -38,6 +40,7 @@
 
 				this.terrainType = this.terrainType.func_48629_a(var3);
 			}
+			this.terrainType = this.terrainType.readData(var1.getCompoundTag("generatorSettings"));
 		}
 
 		this.gameType = var1.getInteger("GameType");
@@ -60,6 +63,7 @@
 		this.thunderTime = var1.getInteger("thunderTime");
 		this.thundering = var1.getBoolean("thundering");
 		this.hardcore = var1.getBoolean("hardcore");
+		this.classic = var1.getBoolean("classic");
 		if(var1.hasKey("Player")) {
 			this.playerTag = var1.getCompoundTag("Player");
 			this.dimension = this.playerTag.getInteger("Dimension");
@@ -73,6 +77,7 @@
 		this.mapFeaturesEnabled = var1.isMapFeaturesEnabled();
 		this.levelName = var2;
 		this.hardcore = var1.getHardcoreEnabled();
+		this.classic = var1.getClassicEnabled();
 		this.terrainType = var1.getTerrainType();
 	}
 
@@ -96,6 +101,7 @@
 		this.thunderTime = var1.thunderTime;
 		this.thundering = var1.thundering;
 		this.hardcore = var1.hardcore;
+		this.classic = var1.classic;
 	}
 
 	public NBTTagCompound getNBTTagCompound() {
@@ -140,10 +146,14 @@
 		var1.setInteger("thunderTime", this.thunderTime);
 		var1.setBoolean("thundering", this.thundering);
 		var1.setBoolean("hardcore", this.hardcore);
+		var1.setBoolean("classic", this.classic);
 		if(var2 != null) {
 			var1.setCompoundTag("Player", var2);
 		}
 
+		NBTTagCompound generatorSettings = new NBTTagCompound();
+		this.terrainType.writeData(generatorSettings);
+		var1.setCompoundTag("generatorSettings", generatorSettings);
 	}
 
 	public long getSeed() {
@@ -266,6 +276,10 @@
 
 	public boolean isHardcoreModeEnabled() {
 		return this.hardcore;
+	}
+
+	public boolean isClassicModeEnabled() {
+		return this.classic;
 	}
 
 	public WorldType getTerrainType() {
--- net/minecraft/src/BlockFluid.java
+++ net/minecraft/src/BlockFluid.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import net.minecraft.client.Minecraft;
+
 import java.util.Random;
 
 public abstract class BlockFluid extends Block {
@@ -20,23 +22,10 @@
 	}
 
 	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
-		if(this.blockMaterial != Material.water) {
+		if(this.blockMaterial != Material.water || !Minecraft.isColoredWaterEnabled()) {
 			return 16777215;
 		} else {
-			int var5 = 0;
-			int var6 = 0;
-			int var7 = 0;
-
-			for(int var8 = -1; var8 <= 1; ++var8) {
-				for(int var9 = -1; var9 <= 1; ++var9) {
-					int var10 = var1.getBiomeGenForCoords(var2 + var9, var4 + var8).waterColorMultiplier;
-					var5 += (var10 & 16711680) >> 16;
-					var6 += (var10 & '\uff00') >> 8;
-					var7 += var10 & 255;
-				}
-			}
-
-			return (var5 / 9 & 255) << 16 | (var6 / 9 & 255) << 8 | var7 / 9 & 255;
+			return ColorizerWater.getWaterColor(var1.getTemperature(var2, var4), var1.getRainfall(var2, var4));
 		}
 	}
 
--- net/minecraft/src/ItemCoal.java
+++ net/minecraft/src/ItemCoal.java
@@ -10,4 +10,11 @@
 	public String getItemNameIS(ItemStack var1) {
 		return var1.getItemDamage() == 1 ? "item.charcoal" : "item.coal";
 	}
+
+	public int getIconFromDamage(int var1) {
+		if (var1 == 1) {
+			return 118;
+		}
+		return this.iconIndex;
+	}
 }
--- /dev/null
+++ net/minecraft/src/BiomeGenRainforest.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenRainforest extends BiomeGenBase {
+	public BiomeGenRainforest(int var1) {
+		super(var1);
+		this.biomeDecorator.treesPerChunk = 10;
+		this.biomeDecorator.grassPerChunk = 10;
+		this.biomeDecorator.flowersPerChunk = 4;
+		this.biomeDecorator.bigMushroomsPerChunk = 10;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(5) == 0 ? this.worldGenForest : var1.nextInt(3) == 0 ? this.worldGenBigTree : this.worldGenTrees;
+	}
+
+	public WorldGenerator func_48410_b(Random var1) {
+		return var1.nextInt(4) == 0 ? new WorldGenTallGrass(Block.tallGrass.blockID, 2) : new WorldGenTallGrass(Block.tallGrass.blockID, 1);
+	}
+}
--- net/minecraft/src/EntitySkeleton.java
+++ net/minecraft/src/EntitySkeleton.java
@@ -23,7 +23,7 @@
 	}
 
 	public int getMaxHealth() {
-		return 20;
+		return this.worldObj != null && this.worldObj.getWorldInfo().isHardcoreModeEnabled() ? 30 : 20;
 	}
 
 	protected String getLivingSound() {
@@ -93,7 +93,7 @@
 	protected void dropRareDrop(int var1) {
 		if(var1 > 0) {
 			ItemStack var2 = new ItemStack(Item.bow);
-			EnchantmentHelper.func_48441_a(this.rand, var2, 5);
+			EnchantmentHelper.func_48441_a(this.rand, var2, 5, this.worldObj.getWorldInfo().isHardcoreModeEnabled());
 			this.entityDropItem(var2, 0.0F);
 		} else {
 			this.dropItem(Item.bow.shiftedIndex, 1);
--- /dev/null
+++ net/minecraft/src/BiomeGenCrags.java
@@ -1,0 +1,16 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenCrags extends BiomeGenBase {
+	protected BiomeGenCrags(int var1) {
+		super(var1);
+		this.spawnableCreatureList.clear();
+		this.biomeDecorator.cragsPerChunk = 4;
+	}
+
+	public void decorate(World var1, Random var2, int var3, int var4) {
+		this.biomeDecorator.cragsPerChunk = 2 + var2.nextInt(7);
+		super.decorate(var1, var2, var3, var4);
+	}
+}
--- net/minecraft/src/WorldGenMinable.java
+++ net/minecraft/src/WorldGenMinable.java
@@ -12,21 +12,26 @@
 	}
 
 	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		float numberOfBlocks = (float)this.numberOfBlocks;
+		if (var1.getWorldInfo().isHardcoreModeEnabled()) {
+			numberOfBlocks *= 0.75F;
+		}
+
 		float var6 = var2.nextFloat() * (float)Math.PI;
-		double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-		double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * numberOfBlocks / 8.0F);
+		double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * numberOfBlocks / 8.0F);
+		double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * numberOfBlocks / 8.0F);
+		double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * numberOfBlocks / 8.0F);
 		double var15 = (double)(var4 + var2.nextInt(3) - 2);
 		double var17 = (double)(var4 + var2.nextInt(3) - 2);
 
 		for(int var19 = 0; var19 <= this.numberOfBlocks; ++var19) {
-			double var20 = var7 + (var9 - var7) * (double)var19 / (double)this.numberOfBlocks;
-			double var22 = var15 + (var17 - var15) * (double)var19 / (double)this.numberOfBlocks;
-			double var24 = var11 + (var13 - var11) * (double)var19 / (double)this.numberOfBlocks;
-			double var26 = var2.nextDouble() * (double)this.numberOfBlocks / 16.0D;
-			double var28 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
-			double var30 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
+			double var20 = var7 + (var9 - var7) * (double)var19 / (double)numberOfBlocks;
+			double var22 = var15 + (var17 - var15) * (double)var19 / (double)numberOfBlocks;
+			double var24 = var11 + (var13 - var11) * (double)var19 / (double)numberOfBlocks;
+			double var26 = var2.nextDouble() * (double)numberOfBlocks / 16.0D;
+			double var28 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / numberOfBlocks) + 1.0F) * var26 + 1.0D;
+			double var30 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / numberOfBlocks) + 1.0F) * var26 + 1.0D;
 			int var32 = MathHelper.floor_double(var20 - var28 / 2.0D);
 			int var33 = MathHelper.floor_double(var22 - var30 / 2.0D);
 			int var34 = MathHelper.floor_double(var24 - var28 / 2.0D);
--- net/minecraft/src/NetClientHandler.java
+++ net/minecraft/src/NetClientHandler.java
@@ -46,7 +46,7 @@
 	public void handleLogin(Packet1Login var1) {
 		this.mc.playerController = new PlayerControllerMP(this.mc, this);
 		this.mc.statFileWriter.readStat(StatList.joinMultiplayerStat, 1);
-		this.worldClient = new WorldClient(this, new WorldSettings(0L, var1.serverMode, false, false, var1.terrainType), var1.field_48170_e, var1.difficultySetting);
+		this.worldClient = new WorldClient(this, new WorldSettings(var1.seed, var1.serverMode, false, false, false, var1.terrainType), var1.field_48170_e, var1.difficultySetting);
 		this.worldClient.isRemote = true;
 		this.mc.changeWorld1(this.worldClient);
 		this.mc.thePlayer.dimension = var1.field_48170_e;
@@ -457,7 +457,7 @@
 		if(!var2) {
 			this.netManager.networkShutdown("disconnect.genericReason", new Object[]{"The server responded with an invalid server key"});
 		} else if(var1.username.equals("-")) {
-			this.addToSendQueue(new Packet1Login(this.mc.session.username, 29));
+			this.addToSendQueue(new Packet1Login(this.mc.session.username, 4070000));
 		} else {
 			try {
 				URL var4 = new URL("http://session.minecraft.net/game/joinserver.jsp?user=" + this.mc.session.username + "&sessionId=" + this.mc.session.sessionId + "&serverId=" + var1.username);
@@ -465,7 +465,7 @@
 				String var6 = var5.readLine();
 				var5.close();
 				if(var6.equalsIgnoreCase("ok")) {
-					this.addToSendQueue(new Packet1Login(this.mc.session.username, 29));
+					this.addToSendQueue(new Packet1Login(this.mc.session.username, 4070000));
 				} else {
 					this.netManager.networkShutdown("disconnect.loginFailedInfo", new Object[]{var6});
 				}
@@ -559,7 +559,7 @@
 	public void handleRespawn(Packet9Respawn var1) {
 		if(var1.respawnDimension != this.mc.thePlayer.dimension) {
 			this.field_1210_g = false;
-			this.worldClient = new WorldClient(this, new WorldSettings(0L, var1.creativeMode, false, false, var1.terrainType), var1.respawnDimension, var1.difficulty);
+			this.worldClient = new WorldClient(this, new WorldSettings(0L, var1.creativeMode, false, false, false, var1.terrainType), var1.respawnDimension, var1.difficulty);
 			this.worldClient.isRemote = true;
 			this.mc.changeWorld1(this.worldClient);
 			this.mc.thePlayer.dimension = var1.respawnDimension;
--- /dev/null
+++ net/minecraft/src/GenLayerSmoothZoom.java
@@ -1,0 +1,51 @@
+package net.minecraft.src;
+
+public class GenLayerSmoothZoom extends GenLayer {
+    public GenLayerSmoothZoom(long l, GenLayer genLayer) {
+        super(l);
+        this.parent = genLayer;
+    }
+
+    public int[] getInts(int n, int n2, int n3, int n4) {
+        int n5;
+        int n6 = n >> 1;
+        int n7 = n2 >> 1;
+        int n8 = (n3 >> 1) + 3;
+        int n9 = (n4 >> 1) + 3;
+        int[] nArray = this.parent.getInts(n6, n7, n8, n9);
+        int[] nArray2 = IntCache.getIntCache(n8 * 2 * (n9 * 2));
+        int n10 = n8 << 1;
+        for (int i = 0; i < n9 - 1; ++i) {
+            n5 = i << 1;
+            int n11 = n5 * n10;
+            int n12 = nArray[0 + (i + 0) * n8];
+            int n13 = nArray[0 + (i + 1) * n8];
+            for (int j = 0; j < n8 - 1; ++j) {
+                this.initChunkSeed(j + n6 << 1, i + n7 << 1);
+                int n14 = nArray[j + 1 + (i + 0) * n8];
+                int n15 = nArray[j + 1 + (i + 1) * n8];
+                nArray2[n11] = n12;
+                nArray2[n11++ + n10] = n12 + (n13 - n12) * this.nextInt(256) / 256;
+                nArray2[n11] = n12 + (n14 - n12) * this.nextInt(256) / 256;
+                int n16 = n12 + (n14 - n12) * this.nextInt(256) / 256;
+                int n17 = n13 + (n15 - n13) * this.nextInt(256) / 256;
+                nArray2[n11++ + n10] = n16 + (n17 - n16) * this.nextInt(256) / 256;
+                n12 = n14;
+                n13 = n15;
+            }
+        }
+        int[] nArray3 = IntCache.getIntCache(n3 * n4);
+        for (n5 = 0; n5 < n4; ++n5) {
+            System.arraycopy(nArray2, (n5 + (n2 & 1)) * (n8 << 1) + (n & 1), nArray3, n5 * n3, n3);
+        }
+        return nArray3;
+    }
+
+    public static GenLayer octaves(long l, GenLayer genLayer, int n) {
+        GenLayer genLayer2 = genLayer;
+        for (int i = 0; i < n; ++i) {
+            genLayer2 = new GenLayerSmoothZoom(l + (long)i, genLayer2);
+        }
+        return genLayer2;
+    }
+}
--- net/minecraft/src/ItemSlab.java
+++ net/minecraft/src/ItemSlab.java
@@ -1,14 +1,25 @@
 package net.minecraft.src;
 
 public class ItemSlab extends ItemBlock {
-	public ItemSlab(int var1) {
-		super(var1);
+	private final Block stairSingle;
+	private final Block stairDouble;
+	private final String[] blockStepTypes;
+
+	public ItemSlab(Block stairSingle, Block stairDouble) {
+		this(stairSingle, stairDouble, null);
+	}
+
+	public ItemSlab(Block stairSingle, Block stairDouble, String[] blockStepTypes) {
+		super(stairSingle.blockID - 256);
+		this.stairSingle = stairSingle;
+		this.stairDouble = stairDouble;
+		this.blockStepTypes = blockStepTypes;
 		this.setMaxDamage(0);
 		this.setHasSubtypes(true);
 	}
 
 	public int getIconFromDamage(int var1) {
-		return Block.stairSingle.getBlockTextureFromSideAndMetadata(2, var1);
+		return this.stairSingle.getBlockTextureFromSideAndMetadata(2, var1);
 	}
 
 	public int getMetadata(int var1) {
@@ -16,12 +27,16 @@
 	}
 
 	public String getItemNameIS(ItemStack var1) {
+		if (this.blockStepTypes == null) {
+			return super.getItemName();
+		}
+
 		int var2 = var1.getItemDamage();
-		if(var2 < 0 || var2 >= BlockStep.blockStepTypes.length) {
+		if(var2 < 0 || var2 >= this.blockStepTypes.length) {
 			var2 = 0;
 		}
 
-		return super.getItemName() + "." + BlockStep.blockStepTypes[var2];
+		return super.getItemName() + "." + this.blockStepTypes[var2];
 	}
 
 	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
@@ -34,20 +49,20 @@
 			int var9 = var3.getBlockMetadata(var4, var5, var6);
 			int var10 = var9 & 7;
 			boolean var11 = (var9 & 8) != 0;
-			if((var7 == 1 && !var11 || var7 == 0 && var11) && var8 == Block.stairSingle.blockID && var10 == var1.getItemDamage()) {
-				if(var3.checkIfAABBIsClear(Block.stairDouble.getCollisionBoundingBoxFromPool(var3, var4, var5, var6)) && var3.setBlockAndMetadataWithNotify(var4, var5, var6, Block.stairDouble.blockID, var10)) {
-					var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), Block.stairDouble.stepSound.getStepSound(), (Block.stairDouble.stepSound.getVolume() + 1.0F) / 2.0F, Block.stairDouble.stepSound.getPitch() * 0.8F);
+			if((var7 == 1 && !var11 || var7 == 0 && var11) && var8 == this.shiftedIndex && var10 == var1.getItemDamage()) {
+				if(var3.checkIfAABBIsClear(this.stairDouble.getCollisionBoundingBoxFromPool(var3, var4, var5, var6)) && var3.setBlockAndMetadataWithNotify(var4, var5, var6, this.stairDouble.blockID, var10)) {
+					var3.playSoundEffect((double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), this.stairDouble.stepSound.getStepSound(), (this.stairDouble.stepSound.getVolume() + 1.0F) / 2.0F, this.stairDouble.stepSound.getPitch() * 0.8F);
 					--var1.stackSize;
 				}
 
 				return true;
 			} else {
-				return func_50087_b(var1, var2, var3, var4, var5, var6, var7) ? true : super.onItemUse(var1, var2, var3, var4, var5, var6, var7);
+				return this.func_50087_b(var1, var2, var3, var4, var5, var6, var7) ? true : super.onItemUse(var1, var2, var3, var4, var5, var6, var7);
 			}
 		}
 	}
 
-	private static boolean func_50087_b(ItemStack var0, EntityPlayer var1, World var2, int var3, int var4, int var5, int var6) {
+	private boolean func_50087_b(ItemStack var0, EntityPlayer var1, World var2, int var3, int var4, int var5, int var6) {
 		if(var6 == 0) {
 			--var4;
 		}
@@ -75,9 +90,9 @@
 		int var7 = var2.getBlockId(var3, var4, var5);
 		int var8 = var2.getBlockMetadata(var3, var4, var5);
 		int var9 = var8 & 7;
-		if(var7 == Block.stairSingle.blockID && var9 == var0.getItemDamage()) {
-			if(var2.checkIfAABBIsClear(Block.stairDouble.getCollisionBoundingBoxFromPool(var2, var3, var4, var5)) && var2.setBlockAndMetadataWithNotify(var3, var4, var5, Block.stairDouble.blockID, var9)) {
-				var2.playSoundEffect((double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), Block.stairDouble.stepSound.getStepSound(), (Block.stairDouble.stepSound.getVolume() + 1.0F) / 2.0F, Block.stairDouble.stepSound.getPitch() * 0.8F);
+		if(var7 == this.stairSingle.blockID && var9 == var0.getItemDamage()) {
+			if(var2.checkIfAABBIsClear(this.stairDouble.getCollisionBoundingBoxFromPool(var2, var3, var4, var5)) && var2.setBlockAndMetadataWithNotify(var3, var4, var5, this.stairDouble.blockID, var9)) {
+				var2.playSoundEffect((double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), this.stairDouble.stepSound.getStepSound(), (this.stairDouble.stepSound.getVolume() + 1.0F) / 2.0F, this.stairDouble.stepSound.getPitch() * 0.8F);
 				--var0.stackSize;
 			}
 
--- net/minecraft/src/PlayerControllerMP.java
+++ net/minecraft/src/PlayerControllerMP.java
@@ -61,7 +61,6 @@
 		if(this.creativeMode) {
 			this.netClientHandler.addToSendQueue(new Packet14BlockDig(0, var1, var2, var3, var4));
 			PlayerControllerCreative.clickBlockCreative(this.mc, this, var1, var2, var3, var4);
-			this.blockHitDelay = 5;
 		} else if(!this.isHittingBlock || var1 != this.currentBlockX || var2 != this.currentBlockY || var3 != this.currentblockZ) {
 			this.netClientHandler.addToSendQueue(new Packet14BlockDig(0, var1, var2, var3, var4));
 			int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
@@ -119,7 +118,6 @@
 					this.curBlockDamageMP = 0.0F;
 					this.prevBlockDamageMP = 0.0F;
 					this.stepSoundTickCounter = 0.0F;
-					this.blockHitDelay = 5;
 				}
 			} else {
 				this.clickBlock(var1, var2, var3, var4);
--- net/minecraft/src/GuiContainerCreative.java
+++ net/minecraft/src/GuiContainerCreative.java
@@ -88,8 +88,8 @@
 		} else {
 			super.initGui();
 			this.controlList.clear();
+			this.controlList.add(new GuiButton(2, this.guiLeft + this.xSize, this.guiTop + 184, 18, 18, "S"));
 		}
-
 	}
 
 	protected void drawGuiContainerForegroundLayer() {
@@ -178,6 +178,10 @@
 
 		if(var1.id == 1) {
 			this.mc.displayGuiScreen(new GuiStats(this, this.mc.statFileWriter));
+		}
+
+		if(var1.id == 2) {
+			this.mc.displayGuiScreen(new GuiInventory(this.mc.thePlayer));
 		}
 
 	}
--- net/minecraft/src/EntityClientPlayerMP.java
+++ net/minecraft/src/EntityClientPlayerMP.java
@@ -117,6 +117,11 @@
 		return null;
 	}
 
+    public EntityItem dropItemStack() {
+		this.sendQueue.addToSendQueue(new Packet14BlockDig(6, 0, 0, 0, 0));
+		return null;
+	}
+
 	protected void joinEntityItemWithWorld(EntityItem var1) {
 	}
 
--- net/minecraft/src/MapGenCavesHell.java
+++ net/minecraft/src/MapGenCavesHell.java
@@ -8,6 +8,7 @@
 	}
 
 	protected void generateCaveNode(int var1, int var2, byte[] var3, double var4, double var6, double var8, float var10, float var11, float var12, int var13, int var14, double var15) {
+		int height = var3.length / 256;
 		double var17 = (double)(var1 * 16 + 8);
 		double var19 = (double)(var2 * 16 + 8);
 		float var21 = 0.0F;
@@ -99,7 +100,7 @@
 					for(var40 = var52; !var55 && var40 < var34; ++var40) {
 						for(int var41 = var54; !var55 && var41 < var38; ++var41) {
 							for(int var42 = var36 + 1; !var55 && var42 >= var53 - 1; --var42) {
-								var43 = (var40 * 16 + var41) * 128 + var42;
+								var43 = (var40 * 16 + var41) * height + var42;
 								if(var42 >= 0 && var42 < 128) {
 									if(var3[var43] == Block.lavaMoving.blockID || var3[var43] == Block.lavaStill.blockID) {
 										var55 = true;
@@ -119,7 +120,7 @@
 
 							for(var43 = var54; var43 < var38; ++var43) {
 								double var44 = ((double)(var43 + var2 * 16) + 0.5D - var8) / var27;
-								int var46 = (var40 * 16 + var43) * 128 + var36;
+								int var46 = (var40 * 16 + var43) * height + var36;
 
 								for(int var47 = var36 - 1; var47 >= var53; --var47) {
 									double var48 = ((double)var47 + 0.5D - var6) / var29;
--- net/minecraft/src/EnchantmentHelper.java
+++ net/minecraft/src/EnchantmentHelper.java
@@ -49,6 +49,19 @@
 		return var2;
 	}
 
+	private static int getTotalEnchantmentLevel(int var0, ItemStack[] var1) {
+		int var2 = 0;
+		ItemStack[] var3 = var1;
+		int var4 = var1.length;
+
+		for(int var5 = 0; var5 < var4; ++var5) {
+			ItemStack var6 = var3[var5];
+			var2 += getEnchantmentLevel(var0, var6);
+		}
+
+		return var2;
+	}
+
 	private static void applyEnchantmentModifier(IEnchantmentModifier var0, ItemStack var1) {
 		if(var1 != null) {
 			NBTTagList var2 = var1.getEnchantmentTagList();
@@ -130,24 +143,32 @@
 		return getMaxEnchantmentLevel(Enchantment.aquaAffinity.effectId, var0.armorInventory) > 0;
 	}
 
-	public static int calcItemStackEnchantability(Random var0, int var1, int var2, ItemStack var3) {
-		Item var4 = var3.getItem();
-		int var5 = var4.getItemEnchantability();
-		if(var5 <= 0) {
-			return 0;
-		} else {
-			if(var2 > 30) {
-				var2 = 30;
-			}
-
-			var2 = 1 + (var2 >> 1) + var0.nextInt(var2 + 1);
-			int var6 = var0.nextInt(5) + var2;
-			return var1 == 0 ? (var6 >> 1) + 1 : (var1 == 1 ? var6 * 2 / 3 + 1 : var6);
-		}
-	}
-
-	public static void func_48441_a(Random var0, ItemStack var1, int var2) {
-		List var3 = buildEnchantmentList(var0, var1, var2);
+	public static float getSpeedModifier(InventoryPlayer var0) {
+		return getTotalEnchantmentLevel(Enchantment.velocity.effectId, var0.armorInventory) * 0.08F + 1.0F;
+	}
+
+	public static float getExhaustionModifier(InventoryPlayer var0) {
+		return 1.0F - getTotalEnchantmentLevel(Enchantment.stamina.effectId, var0.armorInventory) * 0.1F;
+	}
+
+    public static int calcItemStackEnchantability(Random var0, int var1, int var2, ItemStack var3) {
+        Item var4 = var3.getItem();
+        int var5 = var4.getItemEnchantability();
+
+        if (var5 <= 0) {
+            return 0;
+        } else {
+            if (var2 > 15) {
+                var2 = 15;
+            }
+
+            int var6 = var0.nextInt(8) + 1 + (var2 >> 1) + var0.nextInt(var2 + 1);
+            return var1 == 0 ? Math.max(var6 / 3, 1) : (var1 == 1 ? var6 * 2 / 3 + 1 : Math.max(var6, var2 * 2));
+        }
+    }
+
+	public static void func_48441_a(Random var0, ItemStack var1, int var2, boolean hc) {
+		List var3 = buildEnchantmentList(var0, var1, var2, hc);
 		if(var3 != null) {
 			Iterator var4 = var3.iterator();
 
@@ -159,7 +180,7 @@
 
 	}
 
-	public static List buildEnchantmentList(Random var0, ItemStack var1, int var2) {
+	public static List buildEnchantmentList(Random var0, ItemStack var1, int var2, boolean hc) {
 		Item var3 = var1.getItem();
 		int var4 = var3.getItemEnchantability();
 		if(var4 <= 0) {
@@ -168,7 +189,10 @@
 			var4 = 1 + var0.nextInt((var4 >> 1) + 1) + var0.nextInt((var4 >> 1) + 1);
 			int var5 = var4 + var2;
 			float var6 = (var0.nextFloat() + var0.nextFloat() - 1.0F) * 0.25F;
-			int var7 = (int)((float)var5 * (1.0F + var6) + 0.5F);
+			int var7 = (int)((float)var5 / 0.6F * (1.0F + var6) + 0.5F);
+			if (var7 < 1) {
+				var7 = 1;
+			}
 			ArrayList var8 = null;
 			Map var9 = mapEnchantmentData(var7, var1);
 			if(var9 != null && !var9.isEmpty()) {
@@ -177,7 +201,7 @@
 					var8 = new ArrayList();
 					var8.add(var10);
 
-					for(int var11 = var7 >> 1; var0.nextInt(50) <= var11; var11 >>= 1) {
+					for(int var11 = var7 >> (hc ? 0 : 1); var0.nextInt(hc ? 20 : 50) <= var11; var11 >>= 1) {
 						Iterator var12 = var9.keySet().iterator();
 
 						while(var12.hasNext()) {
@@ -220,7 +244,7 @@
 			Enchantment var7 = var4[var6];
 			if(var7 != null && var7.type.canEnchantItem(var2)) {
 				for(int var8 = var7.getMinLevel(); var8 <= var7.getMaxLevel(); ++var8) {
-					if(var0 >= var7.getMinEnchantability(var8) && var0 <= var7.getMaxEnchantability(var8)) {
+					if(var0 >= var7.getMinEnchantability(var8) && (var8 == var7.getMaxLevel() || var0 <= var7.getMaxEnchantability(var8))) {
 						if(var3 == null) {
 							var3 = new HashMap();
 						}
--- net/minecraft/src/FoodStats.java
+++ net/minecraft/src/FoodStats.java
@@ -2,14 +2,14 @@
 
 public class FoodStats {
 	private int foodLevel = 20;
-	private float foodSaturationLevel = 5.0F;
+	private float foodSaturationLevel = 0.0F;
 	private float foodExhaustionLevel;
 	private int foodTimer = 0;
 	private int prevFoodLevel = 20;
 
 	public void addStats(int var1, float var2) {
 		this.foodLevel = Math.min(var1 + this.foodLevel, 20);
-		this.foodSaturationLevel = Math.min(this.foodSaturationLevel + (float)var1 * var2 * 2.0F, (float)this.foodLevel);
+		this.foodSaturationLevel = 0.0F;
 	}
 
 	public void addStats(ItemFood var1) {
@@ -27,26 +27,6 @@
 				this.foodLevel = Math.max(this.foodLevel - 1, 0);
 			}
 		}
-
-		if(this.foodLevel >= 18 && var1.shouldHeal()) {
-			++this.foodTimer;
-			if(this.foodTimer >= 80) {
-				var1.heal(1);
-				this.foodTimer = 0;
-			}
-		} else if(this.foodLevel <= 0) {
-			++this.foodTimer;
-			if(this.foodTimer >= 80) {
-				if(var1.getHealth() > 10 || var2 >= 3 || var1.getHealth() > 1 && var2 >= 2) {
-					var1.attackEntityFrom(DamageSource.starve, 1);
-				}
-
-				this.foodTimer = 0;
-			}
-		} else {
-			this.foodTimer = 0;
-		}
-
 	}
 
 	public void readNBT(NBTTagCompound var1) {
--- net/minecraft/src/BiomeDecorator.java
+++ net/minecraft/src/BiomeDecorator.java
@@ -27,6 +27,7 @@
 	protected WorldGenerator reedGen = new WorldGenReed();
 	protected WorldGenerator cactusGen = new WorldGenCactus();
 	protected WorldGenerator waterlilyGen = new WorldGenWaterlily();
+	protected WorldGenerator cragGen = new WorldGenCrags();
 	protected int waterlilyPerChunk = 0;
 	protected int treesPerChunk = 0;
 	protected int flowersPerChunk = 2;
@@ -39,6 +40,7 @@
 	protected int sandPerChunk2 = 3;
 	protected int clayPerChunk = 1;
 	protected int bigMushroomsPerChunk = 0;
+	protected int cragsPerChunk = 0;
 	public boolean generateLakes = true;
 
 	public BiomeDecorator(BiomeGenBase var1) {
@@ -65,12 +67,24 @@
 		int var1;
 		int var2;
 		int var3;
+		for(var1 = 0; var1 < this.cragsPerChunk; ++var1) {
+			var2 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
+			var3 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			this.cragGen.generate(this.currentWorld, this.randomGenerator, var2, 0, var3);
+		}
+
 		for(var1 = 0; var1 < this.sandPerChunk2; ++var1) {
 			var2 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
 			var3 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
 			this.sandGen.generate(this.currentWorld, this.randomGenerator, var2, this.currentWorld.getTopSolidOrLiquidBlock(var2, var3), var3);
 		}
 
+		for(var1 = 0; var1 < this.sandPerChunk; ++var1) {
+			var2 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
+			var3 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			this.gravelAsSandGen.generate(this.currentWorld, this.randomGenerator, var2, this.currentWorld.getTopSolidOrLiquidBlock(var2, var3), var3);
+		}
+
 		for(var1 = 0; var1 < this.clayPerChunk; ++var1) {
 			var2 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
 			var3 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
@@ -83,12 +97,18 @@
 			this.sandGen.generate(this.currentWorld, this.randomGenerator, var2, this.currentWorld.getTopSolidOrLiquidBlock(var2, var3), var3);
 		}
 
+		int var4;
+		for(var2 = 0; var2 < this.bigMushroomsPerChunk * 4; ++var2) {
+			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
+			var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			this.bigMushroomGen.generate(this.currentWorld, this.randomGenerator, var3, this.randomGenerator.nextInt(256), var4);
+		}
+
 		var1 = this.treesPerChunk;
 		if(this.randomGenerator.nextInt(10) == 0) {
 			++var1;
 		}
 
-		int var4;
 		for(var2 = 0; var2 < var1; ++var2) {
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
 			var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
@@ -97,38 +117,32 @@
 			var5.generate(this.currentWorld, this.randomGenerator, var3, this.currentWorld.getHeightValue(var3, var4), var4);
 		}
 
-		for(var2 = 0; var2 < this.bigMushroomsPerChunk; ++var2) {
-			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-			this.bigMushroomGen.generate(this.currentWorld, this.randomGenerator, var3, this.currentWorld.getHeightValue(var3, var4), var4);
-		}
-
 		int var7;
 		for(var2 = 0; var2 < this.flowersPerChunk; ++var2) {
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var4 = this.randomGenerator.nextInt(128);
 			var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var4 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var7) + 32);
 			this.plantYellowGen.generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 			if(this.randomGenerator.nextInt(4) == 0) {
 				var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-				var4 = this.randomGenerator.nextInt(128);
 				var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+				var4 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var7) + 32);
 				this.plantRedGen.generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 			}
 		}
 
 		for(var2 = 0; var2 < this.grassPerChunk; ++var2) {
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var4 = this.randomGenerator.nextInt(128);
 			var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var4 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var7) * 2);
 			WorldGenerator var6 = this.biome.func_48410_b(this.randomGenerator);
 			var6.generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 		}
 
 		for(var2 = 0; var2 < this.deadBushPerChunk; ++var2) {
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var4 = this.randomGenerator.nextInt(128);
 			var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var4 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var7) * 2);
 			(new WorldGenDeadBush(Block.deadBush.blockID)).generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 		}
 
@@ -136,7 +150,7 @@
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
 			var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
 
-			for(var7 = this.randomGenerator.nextInt(128); var7 > 0 && this.currentWorld.getBlockId(var3, var7 - 1, var4) == 0; --var7) {
+			for(var7 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var4) * 2); var7 > 0 && this.currentWorld.getBlockId(var3, var7 - 1, var4) == 0; --var7) {
 			}
 
 			this.waterlilyGen.generate(this.currentWorld, this.randomGenerator, var3, var7, var4);
@@ -153,64 +167,64 @@
 			if(this.randomGenerator.nextInt(8) == 0) {
 				var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
 				var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-				var7 = this.randomGenerator.nextInt(128);
+				var7 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var4) * 2);
 				this.mushroomRedGen.generate(this.currentWorld, this.randomGenerator, var3, var7, var4);
 			}
 		}
 
 		if(this.randomGenerator.nextInt(4) == 0) {
 			var2 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var3 = this.randomGenerator.nextInt(128);
 			var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var3 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var2, var4) * 2);
 			this.mushroomBrownGen.generate(this.currentWorld, this.randomGenerator, var2, var3, var4);
 		}
 
 		if(this.randomGenerator.nextInt(8) == 0) {
 			var2 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var3 = this.randomGenerator.nextInt(128);
 			var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var3 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var2, var4) * 2);
 			this.mushroomRedGen.generate(this.currentWorld, this.randomGenerator, var2, var3, var4);
 		}
 
 		for(var2 = 0; var2 < this.reedsPerChunk; ++var2) {
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
 			var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
-			var7 = this.randomGenerator.nextInt(128);
+			var7 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var4) * 2);
 			this.reedGen.generate(this.currentWorld, this.randomGenerator, var3, var7, var4);
 		}
 
 		for(var2 = 0; var2 < 10; ++var2) {
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var4 = this.randomGenerator.nextInt(128);
 			var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var4 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var7) * 2);
 			this.reedGen.generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 		}
 
 		if(this.randomGenerator.nextInt(32) == 0) {
 			var2 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var3 = this.randomGenerator.nextInt(128);
 			var4 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var3 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var2, var4) * 2);
 			(new WorldGenPumpkin()).generate(this.currentWorld, this.randomGenerator, var2, var3, var4);
 		}
 
 		for(var2 = 0; var2 < this.cactiPerChunk; ++var2) {
 			var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-			var4 = this.randomGenerator.nextInt(128);
 			var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
+			var4 = this.randomGenerator.nextInt(this.currentWorld.getHeightValue(var3, var7) * 2);
 			this.cactusGen.generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 		}
 
 		if(this.generateLakes) {
 			for(var2 = 0; var2 < 50; ++var2) {
 				var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-				var4 = this.randomGenerator.nextInt(this.randomGenerator.nextInt(120) + 8);
+				var4 = this.randomGenerator.nextInt(this.randomGenerator.nextInt(248) + 8);
 				var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
 				(new WorldGenLiquids(Block.waterMoving.blockID)).generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 			}
 
 			for(var2 = 0; var2 < 20; ++var2) {
 				var3 = this.chunk_X + this.randomGenerator.nextInt(16) + 8;
-				var4 = this.randomGenerator.nextInt(this.randomGenerator.nextInt(this.randomGenerator.nextInt(112) + 8) + 8);
+				var4 = this.randomGenerator.nextInt(this.randomGenerator.nextInt(this.randomGenerator.nextInt(240   ) + 8) + 8);
 				var7 = this.chunk_Z + this.randomGenerator.nextInt(16) + 8;
 				(new WorldGenLiquids(Block.lavaMoving.blockID)).generate(this.currentWorld, this.randomGenerator, var3, var4, var7);
 			}
--- net/minecraft/src/Block.java
+++ net/minecraft/src/Block.java
@@ -13,6 +13,7 @@
 	public static final StepSound soundGlassFootstep = new StepSoundStone("stone", 1.0F, 1.0F);
 	public static final StepSound soundClothFootstep = new StepSound("cloth", 1.0F, 1.0F);
 	public static final StepSound soundSandFootstep = new StepSoundSand("sand", 1.0F, 1.0F);
+	public static final StepSound soundMudFootstep = new StepSound("gravel", 1.0F, 0.5F);
 	public static final Block[] blocksList = new Block[4096];
 	public static final boolean[] opaqueCubeLookup = new boolean[4096];
 	public static final int[] lightOpacity = new int[4096];
@@ -20,8 +21,8 @@
 	public static final int[] lightValue = new int[4096];
 	public static final boolean[] requiresSelfNotify = new boolean[4096];
 	public static boolean[] useNeighborBrightness = new boolean[4096];
-	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stone");
-	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("grass");
+	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stone").setCreativePickDirect();
+	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("grass").setCreativePickDirect();
 	public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep).setBlockName("dirt");
 	public static final Block cobblestone = (new Block(4, 16, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stonebrick");
 	public static final Block planks = (new BlockWood(5)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("wood").setRequiresSelfNotify();
@@ -33,14 +34,14 @@
 	public static final Block lavaStill = (new BlockStationary(11, Material.lava)).setHardness(100.0F).setLightValue(1.0F).setLightOpacity(255).setBlockName("lava").disableStats().setRequiresSelfNotify();
 	public static final Block sand = (new BlockSand(12, 18)).setHardness(0.5F).setStepSound(soundSandFootstep).setBlockName("sand");
 	public static final Block gravel = (new BlockGravel(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("gravel");
-	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreGold");
-	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreIron");
-	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreCoal");
+	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreGold").setCreativePickDirect();
+	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreIron").setCreativePickDirect();
+	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreCoal").setCreativePickDirect();
 	public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep).setBlockName("log").setRequiresSelfNotify();
-	public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep).setBlockName("leaves").setRequiresSelfNotify();
+	public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep).setBlockName("leaves").setRequiresSelfNotify().setCreativePickDirect();
 	public static final Block sponge = (new BlockSponge(19)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("sponge");
 	public static final Block glass = (new BlockGlass(20, 49, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep).setBlockName("glass");
-	public static final Block oreLapis = (new BlockOre(21, 160)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreLapis");
+	public static final Block oreLapis = (new BlockOre(21, 160)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreLapis").setCreativePickDirect();
 	public static final Block blockLapis = (new Block(22, 144, Material.rock)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("blockLapis");
 	public static final Block dispenser = (new BlockDispenser(23)).setHardness(3.5F).setStepSound(soundStoneFootstep).setBlockName("dispenser").setRequiresSelfNotify();
 	public static final Block sandStone = (new BlockSandStone(24)).setStepSound(soundStoneFootstep).setHardness(0.8F).setBlockName("sandStone").setRequiresSelfNotify();
@@ -62,8 +63,8 @@
 	public static final BlockFlower mushroomRed = (BlockFlower)(new BlockMushroom(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("mushroom");
 	public static final Block blockGold = (new BlockOreStorage(41, 23)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockGold");
 	public static final Block blockSteel = (new BlockOreStorage(42, 22)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockIron");
-	public static final Block stairDouble = (new BlockStep(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab");
-	public static final Block stairSingle = (new BlockStep(44, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab");
+	public static final Block stairDouble = (new BlockStepStone(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab");
+	public static final Block stairSingle = (new BlockStepStone(44, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stoneSlab");
 	public static final Block brick = (new Block(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("brick");
 	public static final Block tnt = (new BlockTNT(46, 8)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("tnt");
 	public static final Block bookShelf = (new BlockBookshelf(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep).setBlockName("bookshelf");
@@ -75,7 +76,7 @@
 	public static final Block stairCompactPlanks = (new BlockStairs(53, planks)).setBlockName("stairsWood").setRequiresSelfNotify();
 	public static final Block chest = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep).setBlockName("chest").setRequiresSelfNotify();
 	public static final Block redstoneWire = (new BlockRedstoneWire(55, 164)).setHardness(0.0F).setStepSound(soundPowderFootstep).setBlockName("redstoneDust").disableStats().setRequiresSelfNotify();
-	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreDiamond");
+	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreDiamond").setCreativePickDirect();
 	public static final Block blockDiamond = (new BlockOreStorage(57, 24)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("blockDiamond");
 	public static final Block workbench = (new BlockWorkbench(58)).setHardness(2.5F).setStepSound(soundWoodFootstep).setBlockName("workbench");
 	public static final Block crops = (new BlockCrops(59, 88)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("crops").disableStats().setRequiresSelfNotify();
@@ -92,7 +93,7 @@
 	public static final Block pressurePlateStone = (new BlockPressurePlate(70, stone.blockIndexInTexture, EnumMobType.mobs, Material.rock)).setHardness(0.5F).setStepSound(soundStoneFootstep).setBlockName("pressurePlate").setRequiresSelfNotify();
 	public static final Block doorSteel = (new BlockDoor(71, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep).setBlockName("doorIron").disableStats().setRequiresSelfNotify();
 	public static final Block pressurePlatePlanks = (new BlockPressurePlate(72, planks.blockIndexInTexture, EnumMobType.everything, Material.wood)).setHardness(0.5F).setStepSound(soundWoodFootstep).setBlockName("pressurePlate").setRequiresSelfNotify();
-	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreRedstone").setRequiresSelfNotify();
+	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreRedstone").setRequiresSelfNotify().setCreativePickDirect();
 	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, true)).setLightValue(10.0F / 16.0F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setBlockName("oreRedstone").setRequiresSelfNotify();
 	public static final Block torchRedstoneIdle = (new BlockRedstoneTorch(75, 115, false)).setHardness(0.0F).setStepSound(soundWoodFootstep).setBlockName("notGate").setRequiresSelfNotify();
 	public static final Block torchRedstoneActive = (new BlockRedstoneTorch(76, 99, true)).setHardness(0.0F).setLightValue(0.5F).setStepSound(soundWoodFootstep).setBlockName("notGate").setRequiresSelfNotify();
@@ -101,7 +102,7 @@
 	public static final Block ice = (new BlockIce(79, 67)).setHardness(0.5F).setLightOpacity(3).setStepSound(soundGlassFootstep).setBlockName("ice");
 	public static final Block blockSnow = (new BlockSnowBlock(80, 66)).setHardness(0.2F).setStepSound(soundClothFootstep).setBlockName("snow");
 	public static final Block cactus = (new BlockCactus(81, 70)).setHardness(0.4F).setStepSound(soundClothFootstep).setBlockName("cactus");
-	public static final Block blockClay = (new BlockClay(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("clay");
+	public static final Block blockClay = (new BlockClay(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep).setBlockName("clay").setCreativePickDirect();
 	public static final Block reed = (new BlockReed(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("reeds").disableStats();
 	public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("jukebox").setRequiresSelfNotify();
 	public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("fence");
@@ -118,8 +119,8 @@
 	public static final Block trapdoor = (new BlockTrapDoor(96, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setBlockName("trapdoor").disableStats().setRequiresSelfNotify();
 	public static final Block silverfish = (new BlockSilverfish(97)).setHardness(12.0F / 16.0F);
 	public static final Block stoneBrick = (new BlockStoneBrick(98)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("stonebricksmooth");
-	public static final Block mushroomCapBrown = (new BlockMushroomCap(99, Material.wood, 142, 0)).setHardness(0.2F).setStepSound(soundWoodFootstep).setBlockName("mushroom").setRequiresSelfNotify();
-	public static final Block mushroomCapRed = (new BlockMushroomCap(100, Material.wood, 142, 1)).setHardness(0.2F).setStepSound(soundWoodFootstep).setBlockName("mushroom").setRequiresSelfNotify();
+	public static final Block mushroomCapBrown = (new BlockMushroomCap(99, Material.wood, 142, 0)).setHardness(0.2F).setStepSound(soundWoodFootstep).setBlockName("mushroom").setRequiresSelfNotify().setCreativePickDirect();
+	public static final Block mushroomCapRed = (new BlockMushroomCap(100, Material.wood, 142, 1)).setHardness(0.2F).setStepSound(soundWoodFootstep).setBlockName("mushroom").setRequiresSelfNotify().setCreativePickDirect();
 	public static final Block fenceIron = (new BlockPane(101, 85, 85, Material.iron, true)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setBlockName("fenceIron");
 	public static final Block thinGlass = (new BlockPane(102, 49, 148, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep).setBlockName("thinGlass");
 	public static final Block melon = (new BlockMelon(103)).setHardness(1.0F).setStepSound(soundWoodFootstep).setBlockName("melon");
@@ -129,7 +130,7 @@
 	public static final Block fenceGate = (new BlockFenceGate(107, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("fenceGate").setRequiresSelfNotify();
 	public static final Block stairsBrick = (new BlockStairs(108, brick)).setBlockName("stairsBrick").setRequiresSelfNotify();
 	public static final Block stairsStoneBrickSmooth = (new BlockStairs(109, stoneBrick)).setBlockName("stairsStoneBrickSmooth").setRequiresSelfNotify();
-	public static final BlockMycelium mycelium = (BlockMycelium)(new BlockMycelium(110)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("mycel");
+	public static final BlockMycelium mycelium = (BlockMycelium)(new BlockMycelium(110)).setHardness(0.6F).setStepSound(soundGrassFootstep).setBlockName("mycel").setCreativePickDirect();
 	public static final Block waterlily = (new BlockLilyPad(111, 76)).setHardness(0.0F).setStepSound(soundGrassFootstep).setBlockName("waterlily");
 	public static final Block netherBrick = (new Block(112, 224, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("netherBrick");
 	public static final Block netherFence = (new BlockFence(113, 224, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setBlockName("netherFence");
@@ -144,6 +145,12 @@
 	public static final Block dragonEgg = (new BlockDragonEgg(122, 167)).setHardness(3.0F).setResistance(15.0F).setStepSound(soundStoneFootstep).setLightValue(2.0F / 16.0F).setBlockName("dragonEgg");
 	public static final Block redstoneLampIdle = (new BlockRedstoneLight(123, false)).setHardness(0.3F).setStepSound(soundGlassFootstep).setBlockName("redstoneLight");
 	public static final Block redstoneLampActive = (new BlockRedstoneLight(124, true)).setHardness(0.3F).setStepSound(soundGlassFootstep).setBlockName("redstoneLight");
+	public static final Block woodStairDouble = (new BlockStepWood(125, true)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("woodSlab");
+	public static final Block woodStairSingle = (new BlockStepWood(126, false)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setBlockName("woodSlab");
+	public static final Block stairsSandstone = (new BlockStairs(127, sandStone)).setBlockName("stairsSandstone").setRequiresSelfNotify();
+	public static final Block stairsSpruce = (new BlockStairs(128, planks, 1)).setBlockName("stairsWood").setRequiresSelfNotify();
+	public static final Block stairsBirch = (new BlockStairs(129, planks, 2)).setBlockName("stairsWood").setRequiresSelfNotify();
+	public static final Block stairsJungle = (new BlockStairs(130, planks, 3)).setBlockName("stairsWood").setRequiresSelfNotify();
 	public int blockIndexInTexture;
 	public final int blockID;
 	protected float blockHardness;
@@ -162,6 +169,7 @@
 	public float blockParticleGravity;
 	public final Material blockMaterial;
 	public float slipperiness;
+	public boolean creativePickDirect;
 	private String blockName;
 
 	protected Block(int var1, Material var2) {
@@ -573,7 +581,6 @@
 
 	public void harvestBlock(World var1, EntityPlayer var2, int var3, int var4, int var5, int var6) {
 		var2.addStat(StatList.mineBlockStatArray[this.blockID], 1);
-		var2.addExhaustion(0.025F);
 		if(this.func_50074_q() && EnchantmentHelper.getSilkTouchModifier(var2.inventory)) {
 			ItemStack var8 = this.createStackedBlock(var6);
 			if(var8 != null) {
@@ -646,13 +653,19 @@
 	public void onFallenUpon(World var1, int var2, int var3, int var4, Entity var5, float var6) {
 	}
 
+	public Block setCreativePickDirect() {
+		this.creativePickDirect = true;
+		return this;
+	}
+
 	static {
 		Item.itemsList[cloth.blockID] = (new ItemCloth(cloth.blockID - 256)).setItemName("cloth");
 		Item.itemsList[wood.blockID] = (new ItemMetadata(wood.blockID - 256, wood)).setItemName("log");
 		Item.itemsList[planks.blockID] = (new ItemMetadata(planks.blockID - 256, planks)).setItemName("wood");
+		Item.itemsList[fence.blockID] = (new ItemMetadata(fence.blockID - 256, fence)).setItemName("fence");
 		Item.itemsList[stoneBrick.blockID] = (new ItemMetadata(stoneBrick.blockID - 256, stoneBrick)).setItemName("stonebricksmooth");
 		Item.itemsList[sandStone.blockID] = (new ItemMetadata(sandStone.blockID - 256, sandStone)).setItemName("sandStone");
-		Item.itemsList[stairSingle.blockID] = (new ItemSlab(stairSingle.blockID - 256)).setItemName("stoneSlab");
+		Item.itemsList[stairSingle.blockID] = (new ItemSlab(stairSingle, stairDouble, BlockStepStone.blockStepTypes)).setItemName("stoneSlab");
 		Item.itemsList[sapling.blockID] = (new ItemSapling(sapling.blockID - 256)).setItemName("sapling");
 		Item.itemsList[leaves.blockID] = (new ItemLeaves(leaves.blockID - 256)).setItemName("leaves");
 		Item.itemsList[vine.blockID] = new ItemColored(vine.blockID - 256, false);
@@ -660,6 +673,9 @@
 		Item.itemsList[waterlily.blockID] = new ItemLilyPad(waterlily.blockID - 256);
 		Item.itemsList[pistonBase.blockID] = new ItemPiston(pistonBase.blockID - 256);
 		Item.itemsList[pistonStickyBase.blockID] = new ItemPiston(pistonStickyBase.blockID - 256);
+		Item.itemsList[woodStairSingle.blockID] = (new ItemSlab(woodStairSingle, woodStairDouble)).setItemName("woodSlab");
+		Item.itemsList[mushroomCapBrown.blockID] = (new ItemMetadata(mushroomCapBrown.blockID - 256, mushroomCapBrown)).setItemName("mushroom");
+		Item.itemsList[mushroomCapRed.blockID] = (new ItemMetadata(mushroomCapRed.blockID - 256, mushroomCapRed)).setItemName("mushroom");
 
 		for(int var0 = 0; var0 < 256; ++var0) {
 			if(blocksList[var0] != null) {
--- net/minecraft/src/ComponentStronghold.java
+++ net/minecraft/src/ComponentStronghold.java
@@ -15,6 +15,10 @@
 			this.fillWithBlocks(var1, var3, var5, var6, var7, var5 + 3 - 1, var6 + 3 - 1, var7, 0, 0, false);
 			break;
 		case 2:
+			if (this.boundingBox.minY >= 60) {
+				this.fillWithBlocks(var1, var3, var5, var6, var7, var5 + 3 - 1, var6 + 3 - 1, var7, 0, 0, false);
+				return;
+			}
 			this.placeBlockAtCurrentPosition(var1, Block.stoneBrick.blockID, 0, var5, var6, var7, var3);
 			this.placeBlockAtCurrentPosition(var1, Block.stoneBrick.blockID, 0, var5, var6 + 1, var7, var3);
 			this.placeBlockAtCurrentPosition(var1, Block.stoneBrick.blockID, 0, var5, var6 + 2, var7, var3);
@@ -26,6 +30,10 @@
 			this.placeBlockAtCurrentPosition(var1, Block.doorWood.blockID, 8, var5 + 1, var6 + 1, var7, var3);
 			break;
 		case 3:
+			if (this.boundingBox.minY >= 60) {
+				this.fillWithBlocks(var1, var3, var5, var6, var7, var5 + 3 - 1, var6 + 3 - 1, var7, 0, 0, false);
+				return;
+			}
 			this.placeBlockAtCurrentPosition(var1, 0, 0, var5 + 1, var6, var7, var3);
 			this.placeBlockAtCurrentPosition(var1, 0, 0, var5 + 1, var6 + 1, var7, var3);
 			this.placeBlockAtCurrentPosition(var1, Block.fenceIron.blockID, 0, var5, var6, var7, var3);
@@ -37,6 +45,10 @@
 			this.placeBlockAtCurrentPosition(var1, Block.fenceIron.blockID, 0, var5 + 2, var6, var7, var3);
 			break;
 		case 4:
+			if (this.boundingBox.minY >= 60) {
+				this.fillWithBlocks(var1, var3, var5, var6, var7, var5 + 3 - 1, var6 + 3 - 1, var7, 0, 0, false);
+				return;
+			}
 			this.placeBlockAtCurrentPosition(var1, Block.stoneBrick.blockID, 0, var5, var6, var7, var3);
 			this.placeBlockAtCurrentPosition(var1, Block.stoneBrick.blockID, 0, var5, var6 + 1, var7, var3);
 			this.placeBlockAtCurrentPosition(var1, Block.stoneBrick.blockID, 0, var5, var6 + 2, var7, var3);
--- net/minecraft/src/RenderHelper.java
+++ net/minecraft/src/RenderHelper.java
@@ -49,8 +49,9 @@
 
 	public static void enableGUIStandardItemLighting() {
 		GL11.glPushMatrix();
-		GL11.glRotatef(-30.0F, 0.0F, 1.0F, 0.0F);
-		GL11.glRotatef(165.0F, 1.0F, 0.0F, 0.0F);
+//		GL11.glRotatef(-30.0F, 0.0F, 1.0F, 0.0F);
+//		GL11.glRotatef(165.0F, 1.0F, 0.0F, 0.0F);
+		GL11.glRotatef(120.0F, 1.0F, 0.0F, 0.0F);
 		enableStandardItemLighting();
 		GL11.glPopMatrix();
 	}
--- net/minecraft/src/ContainerEnchantment.java
+++ net/minecraft/src/ContainerEnchantment.java
@@ -59,7 +59,7 @@
 		if(var1 == this.tableInventory) {
 			ItemStack var2 = var1.getStackInSlot(0);
 			int var3;
-			if(var2 != null && var2.isItemEnchantable()) {
+			if(var2 != null && var2.isItemEnchantable() && !this.worldPointer.getWorldInfo().isClassicModeEnabled()) {
 				this.nameSeed = this.rand.nextLong();
 				if(!this.worldPointer.isRemote) {
 					var3 = 0;
@@ -99,6 +99,9 @@
 
 					for(var4 = 0; var4 < 3; ++var4) {
 						this.enchantLevels[var4] = EnchantmentHelper.calcItemStackEnchantability(this.rand, var4, var3, var2);
+						if (this.worldPointer.worldInfo.isHardcoreModeEnabled()) {
+							this.enchantLevels[var4] = Math.round(this.enchantLevels[var4] / 0.6F);
+						}
 					}
 
 					this.updateCraftingResults();
@@ -116,9 +119,9 @@
 		ItemStack var3 = this.tableInventory.getStackInSlot(0);
 		if(this.enchantLevels[var2] > 0 && var3 != null && (var1.experienceLevel >= this.enchantLevels[var2] || var1.capabilities.isCreativeMode)) {
 			if(!this.worldPointer.isRemote) {
-				List var4 = EnchantmentHelper.buildEnchantmentList(this.rand, var3, this.enchantLevels[var2]);
+				List var4 = EnchantmentHelper.buildEnchantmentList(this.rand, var3, this.enchantLevels[var2], this.worldPointer.getWorldInfo().isHardcoreModeEnabled());
 				if(var4 != null) {
-					var1.removeExperience(this.enchantLevels[var2]);
+					var1.removeExperience(Math.min(Math.max(this.enchantLevels[var2] / 4, 5), this.enchantLevels[var2]));
 					Iterator var5 = var4.iterator();
 
 					while(var5.hasNext()) {
--- net/minecraft/src/EntityZombie.java
+++ net/minecraft/src/EntityZombie.java
@@ -22,7 +22,7 @@
 	}
 
 	public int getMaxHealth() {
-		return 20;
+		return this.worldObj != null && this.worldObj.getWorldInfo().isHardcoreModeEnabled() ? 30 : 20;
 	}
 
 	public int getTotalArmorValue() {
--- net/minecraft/src/BlockLeaves.java
+++ net/minecraft/src/BlockLeaves.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import net.minecraft.client.Minecraft;
+
 import java.util.Random;
 
 public class BlockLeaves extends BlockLeavesBase {
@@ -13,7 +15,7 @@
 	}
 
 	public int getBlockColor() {
-		double var1 = 0.5D;
+		double var1 = 0.8D;
 		double var3 = 1.0D;
 		return ColorizerFoliage.getFoliageColor(var1, var3);
 	}
@@ -23,26 +25,13 @@
 	}
 
 	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		if((var5 & 3) == 1) {
+		int meta = var1.getBlockMetadata(var2, var3, var4);
+		if((meta & 3) == 1) {
 			return ColorizerFoliage.getFoliageColorPine();
-		} else if((var5 & 3) == 2) {
+		} else if((meta & 3) == 2) {
 			return ColorizerFoliage.getFoliageColorBirch();
 		} else {
-			int var6 = 0;
-			int var7 = 0;
-			int var8 = 0;
-
-			for(int var9 = -1; var9 <= 1; ++var9) {
-				for(int var10 = -1; var10 <= 1; ++var10) {
-					int var11 = var1.getBiomeGenForCoords(var2 + var10, var4 + var9).getBiomeFoliageColor();
-					var6 += (var11 & 16711680) >> 16;
-					var7 += (var11 & '\uff00') >> 8;
-					var8 += var11 & 255;
-				}
-			}
-
-			return (var6 / 9 & 255) << 16 | (var7 / 9 & 255) << 8 | var8 / 9 & 255;
+			return ColorizerFoliage.getFoliageColor(var1.getTemperature(var2, var4), var1.getRainfall(var2, var4));
 		}
 	}
 
@@ -69,7 +58,7 @@
 		if(!var1.isRemote) {
 			int var6 = var1.getBlockMetadata(var2, var3, var4);
 			if((var6 & 8) != 0 && (var6 & 4) == 0) {
-				byte var7 = 4;
+				byte var7 = 6;
 				int var8 = var7 + 1;
 				byte var9 = 32;
 				int var10 = var9 * var9;
@@ -91,7 +80,7 @@
 							var12 = 1;
 
 							while(true) {
-								if(var12 > 4) {
+								if(var12 > 6) {
 									break label112;
 								}
 
@@ -220,5 +209,9 @@
 
 	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
 		super.onEntityWalking(var1, var2, var3, var4, var5);
+	}
+
+	protected ItemStack createStackedBlock(int var1) {
+		return super.createStackedBlock(var1 & 3);
 	}
 }
--- net/minecraft/src/ColorizerWater.java
+++ net/minecraft/src/ColorizerWater.java
@@ -6,4 +6,16 @@
 	public static void setWaterBiomeColorizer(int[] var0) {
 		waterBuffer = var0;
 	}
+
+	public static int getWaterColor(double var0, double var2) {
+		var2 *= var0;
+		int var4 = (int)((1.0D - var0) * 255.0D);
+		int var5 = (int)((1.0D - var2) * 255.0D);
+		return waterBuffer[var5 << 8 | var4];
+//		return 0xFFFFFFFF;
+	}
+
+	public static int getWaterColorBasic() {
+		return 28389;
+	}
 }
--- net/minecraft/src/MapGenCaves.java
+++ net/minecraft/src/MapGenCaves.java
@@ -8,6 +8,7 @@
 	}
 
 	protected void generateCaveNode(long var1, int var3, int var4, byte[] var5, double var6, double var8, double var10, float var12, float var13, float var14, int var15, int var16, double var17) {
+		int height = var5.length / 256;
 		double var19 = (double)(var3 * 16 + 8);
 		double var21 = (double)(var4 * 16 + 8);
 		float var23 = 0.0F;
@@ -99,7 +100,7 @@
 					for(var42 = var55; !var58 && var42 < var36; ++var42) {
 						for(int var43 = var57; !var58 && var43 < var40; ++var43) {
 							for(int var44 = var38 + 1; !var58 && var44 >= var56 - 1; --var44) {
-								var45 = (var42 * 16 + var43) * 128 + var44;
+								var45 = (var42 * 16 + var43) * height + var44;
 								if(var44 >= 0 && var44 < 128) {
 									if(var5[var45] == Block.waterMoving.blockID || var5[var45] == Block.waterStill.blockID) {
 										var58 = true;
@@ -119,7 +120,7 @@
 
 							for(var45 = var57; var45 < var40; ++var45) {
 								double var46 = ((double)(var45 + var4 * 16) + 0.5D - var10) / var29;
-								int var48 = (var42 * 16 + var45) * 128 + var38;
+								int var48 = (var42 * 16 + var45) * height + var38;
 								boolean var49 = false;
 								if(var59 * var59 + var46 * var46 < 1.0D) {
 									for(int var50 = var38 - 1; var50 >= var56; --var50) {
--- net/minecraft/src/EntitySheep.java
+++ net/minecraft/src/EntitySheep.java
@@ -55,6 +55,14 @@
 			this.entityDropItem(new ItemStack(Block.cloth.blockID, 1, this.getFleeceColor()), 0.0F);
 		}
 
+		int var3 = this.rand.nextInt(3) + this.rand.nextInt(1 + var2);
+		for(int var4 = 0; var4 < var3; ++var4) {
+			if(this.isBurning()) {
+				this.dropItem(Item.muttonCooked.shiftedIndex, 1);
+			} else {
+				this.dropItem(Item.muttonRaw.shiftedIndex, 1);
+			}
+		}
 	}
 
 	protected int getDropItemId() {
--- net/minecraft/src/GuiSelectWorld.java
+++ net/minecraft/src/GuiSelectWorld.java
@@ -61,11 +61,11 @@
 
 	public void initButtons() {
 		StringTranslate var1 = StringTranslate.getInstance();
-		this.controlList.add(this.buttonSelect = new GuiButton(1, this.width / 2 - 154, this.height - 52, 150, 20, var1.translateKey("selectWorld.select")));
-		this.controlList.add(this.buttonDelete = new GuiButton(6, this.width / 2 - 154, this.height - 28, 70, 20, var1.translateKey("selectWorld.rename")));
-		this.controlList.add(this.buttonRename = new GuiButton(2, this.width / 2 - 74, this.height - 28, 70, 20, var1.translateKey("selectWorld.delete")));
-		this.controlList.add(new GuiButton(3, this.width / 2 + 4, this.height - 52, 150, 20, var1.translateKey("selectWorld.create")));
-		this.controlList.add(new GuiButton(0, this.width / 2 + 4, this.height - 28, 150, 20, var1.translateKey("gui.cancel")));
+		this.controlList.add(this.buttonSelect = new GuiButton(1, this.width / 2 - 155, this.height - 52, 150, 20, var1.translateKey("selectWorld.select")));
+		this.controlList.add(this.buttonDelete = new GuiButton(6, this.width / 2 - 155, this.height - 28, 70, 20, var1.translateKey("selectWorld.rename")));
+		this.controlList.add(this.buttonRename = new GuiButton(2, this.width / 2 - 75, this.height - 28, 70, 20, var1.translateKey("selectWorld.delete")));
+		this.controlList.add(new GuiButton(3, this.width / 2 + 5, this.height - 52, 150, 20, var1.translateKey("selectWorld.create")));
+		this.controlList.add(new GuiButton(0, this.width / 2 + 5, this.height - 28, 150, 20, var1.translateKey("gui.cancel")));
 		this.buttonSelect.enabled = false;
 		this.buttonRename.enabled = false;
 		this.buttonDelete.enabled = false;
--- /dev/null
+++ net/minecraft/src/BiomeGenHighlands.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenHighlands extends BiomeGenBase {
+	protected BiomeGenHighlands(int var1) {
+		super(var1);
+		this.biomeDecorator.treesPerChunk = 6;
+		this.biomeDecorator.grassPerChunk = 2;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(2) == 0
+				? (var1.nextInt(3) == 0 ? new WorldGenTaiga1() : new WorldGenTaiga2(false))
+				: (var1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
+	}
+}
--- net/minecraft/src/TextureWaterFlowFX.java
+++ net/minecraft/src/TextureWaterFlowFX.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import net.minecraft.client.Minecraft;
+
 public class TextureWaterFlowFX extends TextureFX {
 	protected float[] field_1138_g = new float[256];
 	protected float[] field_1137_h = new float[256];
@@ -76,9 +78,18 @@
 				var7 = var11;
 			}
 
-			this.imageData[var2 * 4 + 0] = (byte)var5;
-			this.imageData[var2 * 4 + 1] = (byte)var6;
-			this.imageData[var2 * 4 + 2] = (byte)var7;
+			if (Minecraft.isColoredWaterEnabled()) {
+				int red = MathHelper.clamp_int(var5 + var6 * var6 / 255 + var7 / 3, 0, 255);
+				int green = MathHelper.clamp_int(var6 * 3 / 2 + var7 / 4, 0, 255);
+				int blue = MathHelper.clamp_int(var5 / 2 + var6 * var6 / 255 + var7, 0, 255);
+				this.imageData[var2 * 4 + 0] = (byte)red;
+				this.imageData[var2 * 4 + 1] = (byte)green;
+				this.imageData[var2 * 4 + 2] = (byte)blue;
+			} else {
+				this.imageData[var2 * 4 + 0] = (byte)var5;
+				this.imageData[var2 * 4 + 1] = (byte)var6;
+				this.imageData[var2 * 4 + 2] = (byte)var7;
+			}
 			this.imageData[var2 * 4 + 3] = (byte)var8;
 		}
 
--- net/minecraft/src/ItemSword.java
+++ net/minecraft/src/ItemSword.java
@@ -43,7 +43,9 @@
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		var3.setItemInUse(var1, this.getMaxItemUseDuration(var1));
+		if (!var2.getWorldInfo().isClassicModeEnabled()) {
+			var3.setItemInUse(var1, this.getMaxItemUseDuration(var1));
+		}
 		return var1;
 	}
 
@@ -53,5 +55,13 @@
 
 	public int getItemEnchantability() {
 		return this.toolMaterial.getEnchantability();
+	}
+
+	protected void setClassicTweaks() {
+		this.weaponDamage = 4 + this.toolMaterial.getDamageVsEntity() * 2;
+	}
+
+	protected void unsetClassicTweaks() {
+		this.weaponDamage = 4 + this.toolMaterial.getDamageVsEntity();
 	}
 }
--- net/minecraft/src/EntityAIPanic.java
+++ net/minecraft/src/EntityAIPanic.java
@@ -14,7 +14,7 @@
 	}
 
 	public boolean shouldExecute() {
-		if(this.field_48316_a.getAITarget() == null) {
+		if(this.field_48316_a.getAITarget() == null || this.field_48316_a.worldObj.getWorldInfo().isClassicModeEnabled()) {
 			return false;
 		} else {
 			Vec3D var1 = RandomPositionGenerator.func_48622_a(this.field_48316_a, 5, 4);
--- net/minecraft/src/EntitySlime.java
+++ net/minecraft/src/EntitySlime.java
@@ -30,7 +30,11 @@
 
 	public int getMaxHealth() {
 		int var1 = this.getSlimeSize();
-		return var1 * var1;
+		var1 *= var1;
+		if (this.worldObj.getWorldInfo().isHardcoreModeEnabled()) {
+			var1 += var1 / 2;
+		}
+		return var1;
 	}
 
 	public int getSlimeSize() {
@@ -177,7 +181,12 @@
 
 	public boolean getCanSpawnHere() {
 		Chunk var1 = this.worldObj.getChunkFromBlockCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posZ));
-		return (this.getSlimeSize() == 1 || this.worldObj.difficultySetting > 0) && this.rand.nextInt(10) == 0 && var1.getRandomWithSeed(987234911L).nextInt(10) == 0 && this.posY < 40.0D ? super.getCanSpawnHere() : false;
+		return this.worldObj.getWorldInfo().getTerrainType() != WorldType.FLAT
+				&& (this.getSlimeSize() == 1 || this.worldObj.difficultySetting > 0)
+				&& this.rand.nextInt(10) == 0
+				&& var1.getRandomWithSeed(987234911L).nextInt(10) == 0
+				&& this.posY < 40.0D
+				&& super.getCanSpawnHere();
 	}
 
 	protected float getSoundVolume() {
--- net/minecraft/src/BlockGrass.java
+++ net/minecraft/src/BlockGrass.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import net.minecraft.client.Minecraft;
+
 import java.util.Random;
 
 public class BlockGrass extends Block {
@@ -25,9 +27,7 @@
 	}
 
 	public int getBlockColor() {
-		double var1 = 0.5D;
-		double var3 = 1.0D;
-		return ColorizerGrass.getGrassColor(var1, var3);
+		return ColorizerGrass.getGrassColorBasic();
 	}
 
 	public int getRenderColor(int var1) {
@@ -35,20 +35,7 @@
 	}
 
 	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = 0;
-		int var6 = 0;
-		int var7 = 0;
-
-		for(int var8 = -1; var8 <= 1; ++var8) {
-			for(int var9 = -1; var9 <= 1; ++var9) {
-				int var10 = var1.getBiomeGenForCoords(var2 + var9, var4 + var8).getBiomeGrassColor();
-				var5 += (var10 & 16711680) >> 16;
-				var6 += (var10 & '\uff00') >> 8;
-				var7 += var10 & 255;
-			}
-		}
-
-		return (var5 / 9 & 255) << 16 | (var6 / 9 & 255) << 8 | var7 / 9 & 255;
+		return ColorizerGrass.getGrassColor(var1.getTemperature(var2, var4), var1.getRainfall(var2, var4));
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
--- net/minecraft/src/EntityBlaze.java
+++ net/minecraft/src/EntityBlaze.java
@@ -14,7 +14,7 @@
 	}
 
 	public int getMaxHealth() {
-		return 20;
+		return this.worldObj != null && this.worldObj.getWorldInfo().isHardcoreModeEnabled() ? 30 : 20;
 	}
 
 	protected void entityInit() {
--- net/minecraft/src/MapGenStronghold.java
+++ net/minecraft/src/MapGenStronghold.java
@@ -1,80 +1,14 @@
 package net.minecraft.src;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Random;
-
 public class MapGenStronghold extends MapGenStructure {
-	private BiomeGenBase[] allowedBiomeGenBases = new BiomeGenBase[]{BiomeGenBase.desert, BiomeGenBase.forest, BiomeGenBase.extremeHills, BiomeGenBase.swampland, BiomeGenBase.taiga, BiomeGenBase.icePlains, BiomeGenBase.iceMountains, BiomeGenBase.desertHills, BiomeGenBase.forestHills, BiomeGenBase.extremeHillsEdge, BiomeGenBase.jungle, BiomeGenBase.jungleHills};
-	private boolean ranBiomeCheck;
-	private ChunkCoordIntPair[] structureCoords = new ChunkCoordIntPair[3];
-
 	protected boolean canSpawnStructureAtCoords(int var1, int var2) {
-		if(!this.ranBiomeCheck) {
-			Random var3 = new Random();
-			var3.setSeed(this.worldObj.getSeed());
-			double var4 = var3.nextDouble() * Math.PI * 2.0D;
-
-			for(int var6 = 0; var6 < this.structureCoords.length; ++var6) {
-				double var7 = (1.25D + var3.nextDouble()) * 32.0D;
-				int var9 = (int)Math.round(Math.cos(var4) * var7);
-				int var10 = (int)Math.round(Math.sin(var4) * var7);
-				ArrayList var11 = new ArrayList();
-				BiomeGenBase[] var12 = this.allowedBiomeGenBases;
-				int var13 = var12.length;
-
-				for(int var14 = 0; var14 < var13; ++var14) {
-					BiomeGenBase var15 = var12[var14];
-					var11.add(var15);
-				}
-
-				ChunkPosition var19 = this.worldObj.getWorldChunkManager().findBiomePosition((var9 << 4) + 8, (var10 << 4) + 8, 112, var11, var3);
-				if(var19 != null) {
-					var9 = var19.x >> 4;
-					var10 = var19.z >> 4;
-				} else {
-					System.out.println("Placed stronghold in INVALID biome at (" + var9 + ", " + var10 + ")");
-				}
-
-				this.structureCoords[var6] = new ChunkCoordIntPair(var9, var10);
-				var4 += Math.PI * 2.0D / (double)this.structureCoords.length;
-			}
-
-			this.ranBiomeCheck = true;
-		}
-
-		ChunkCoordIntPair[] var16 = this.structureCoords;
-		int var17 = var16.length;
-
-		for(int var5 = 0; var5 < var17; ++var5) {
-			ChunkCoordIntPair var18 = var16[var5];
-			if(var1 == var18.chunkXPos && var2 == var18.chunkZPos) {
-				System.out.println(var1 + ", " + var2);
-				return true;
-			}
-		}
-
-		return false;
-	}
-
-	protected List func_40482_a() {
-		ArrayList var1 = new ArrayList();
-		ChunkCoordIntPair[] var2 = this.structureCoords;
-		int var3 = var2.length;
-
-		for(int var4 = 0; var4 < var3; ++var4) {
-			ChunkCoordIntPair var5 = var2[var4];
-			if(var5 != null) {
-				var1.add(var5.getChunkPosition(64));
-			}
-		}
-
-		return var1;
+		return this.rand.nextInt(150) == 0 && this.rand.nextInt(100) < Math.max(Math.abs(var1), Math.abs(var2))
+				&& !this.worldObj.getBiomeGenForCoords(var1 << 4, var2 << 4).isOcean();
 	}
 
 	protected StructureStart getStructureStart(int var1, int var2) {
 		StructureStrongholdStart var3;
-		for(var3 = new StructureStrongholdStart(this.worldObj, this.rand, var1, var2); var3.getComponents().isEmpty() || ((ComponentStrongholdStairs2)var3.getComponents().get(0)).portalRoom == null; var3 = new StructureStrongholdStart(this.worldObj, this.rand, var1, var2)) {
+		for(var3 = new StructureStrongholdStart(this.worldObj, this.rand, var1, var2); var3.getComponents().isEmpty(); var3 = new StructureStrongholdStart(this.worldObj, this.rand, var1, var2)) {
 		}
 
 		return var3;
--- net/minecraft/src/StructureStart.java
+++ net/minecraft/src/StructureStart.java
@@ -81,4 +81,8 @@
 	public boolean isSizeableStructure() {
 		return true;
 	}
+
+	public boolean isFindable() {
+		return true;
+	}
 }
--- /dev/null
+++ net/minecraft/src/BlockStepWood.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockStepWood extends BlockStep {
+	public BlockStepWood(int var1, boolean var2) {
+		super(var1, var2, Material.wood);
+	}
+
+	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
+		return Block.planks.getBlockTextureFromSideAndMetadata(var1, var2 & 7);
+	}
+
+	public int idDropped(int var1, Random var2, int var3) {
+		return Block.woodStairSingle.blockID;
+	}
+
+	protected ItemStack createStackedBlock(int var1) {
+		return new ItemStack(Block.woodStairSingle.blockID, 1, var1 & 7);
+	}
+}
--- net/minecraft/src/WorldSettings.java
+++ net/minecraft/src/WorldSettings.java
@@ -5,14 +5,16 @@
 	private final int gameType;
 	private final boolean mapFeaturesEnabled;
 	private final boolean hardcoreEnabled;
+	private final boolean classicEnabled;
 	private final WorldType terrainType;
 
-	public WorldSettings(long var1, int var3, boolean var4, boolean var5, WorldType var6) {
+	public WorldSettings(long var1, int var3, boolean var4, boolean var5, boolean var6, WorldType var7) {
 		this.seed = var1;
 		this.gameType = var3;
 		this.mapFeaturesEnabled = var4;
 		this.hardcoreEnabled = var5;
-		this.terrainType = var6;
+		this.classicEnabled = var6;
+		this.terrainType = var7;
 	}
 
 	public long getSeed() {
@@ -25,6 +27,10 @@
 
 	public boolean getHardcoreEnabled() {
 		return this.hardcoreEnabled;
+	}
+
+	public boolean getClassicEnabled() {
+		return this.classicEnabled;
 	}
 
 	public boolean isMapFeaturesEnabled() {
--- net/minecraft/src/EntityLiving.java
+++ net/minecraft/src/EntityLiving.java
@@ -338,8 +338,11 @@
 		++this.deathTime;
 		if(this.deathTime == 20) {
 			int var1;
-			if(!this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && !this.isChild()) {
+			if(!this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && !this.isChild() && !this.worldObj.getWorldInfo().isClassicModeEnabled()) {
 				var1 = this.getExperiencePoints(this.attackingPlayer);
+				if (this.worldObj.worldInfo.isHardcoreModeEnabled()) {
+					var1 *= 2;
+				}
 
 				while(var1 > 0) {
 					int var2 = EntityXPOrb.getXPSplit(var1);
@@ -860,7 +863,7 @@
 			}
 
 			this.moveEntity(this.motionX, this.motionY, this.motionZ);
-			if(this.isCollidedHorizontally && this.isOnLadder()) {
+			if((this.isCollidedHorizontally || this.isJumping) && this.isOnLadder()) {
 				this.motionY = 0.2D;
 			}
 
@@ -1034,9 +1037,12 @@
 		this.moveForward *= 0.98F;
 		this.randomYawVelocity *= 0.9F;
 		float var15 = this.landMovementFactor;
+		float var15x = this.jumpMovementFactor;
 		this.landMovementFactor *= this.getSpeedModifier();
+		this.jumpMovementFactor *= this.getSpeedModifier();
 		this.moveEntityWithHeading(this.moveStrafing, this.moveForward);
 		this.landMovementFactor = var15;
+		this.jumpMovementFactor = var15x;
 		Profiler.startSection("push");
 		List var4 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
 		if(var4 != null && var4.size() > 0) {
--- /dev/null
+++ net/minecraft/src/EnchantmentVelocity.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+public class EnchantmentVelocity extends Enchantment {
+	protected EnchantmentVelocity(int var1, int var2) {
+		super(var1, var2, EnumEnchantmentType.armor_legs);
+		this.setName("velocity");
+	}
+
+	public int getMinEnchantability(int var1) {
+		return 5 + 18 * (var1 - 1);
+	}
+
+	public int getMaxEnchantability(int var1) {
+		return super.getMinEnchantability(var1) + 50;
+	}
+
+	public int getMaxLevel() {
+		return 3;
+	}
+
+	public boolean canApplyTogether(Enchantment var1) {
+		return super.canApplyTogether(var1) && !(var1 instanceof EnchantmentStamina);
+	}
+}
--- net/minecraft/src/MapGenRavine.java
+++ net/minecraft/src/MapGenRavine.java
@@ -6,6 +6,7 @@
 	private float[] field_35627_a = new float[1024];
 
 	protected void generateRavine(long var1, int var3, int var4, byte[] var5, double var6, double var8, double var10, float var12, float var13, float var14, int var15, int var16, double var17) {
+		int height = var5.length / 256;
 		Random var19 = new Random(var1);
 		double var20 = (double)(var3 * 16 + 8);
 		double var22 = (double)(var4 * 16 + 8);
@@ -96,7 +97,7 @@
 					for(var41 = var55; !var58 && var41 < var35; ++var41) {
 						for(int var42 = var57; !var58 && var42 < var39; ++var42) {
 							for(int var43 = var37 + 1; !var58 && var43 >= var56 - 1; --var43) {
-								var44 = (var41 * 16 + var42) * 128 + var43;
+								var44 = (var41 * 16 + var42) * height + var43;
 								if(var43 >= 0 && var43 < 128) {
 									if(var5[var44] == Block.waterMoving.blockID || var5[var44] == Block.waterStill.blockID) {
 										var58 = true;
@@ -116,7 +117,7 @@
 
 							for(var44 = var57; var44 < var39; ++var44) {
 								double var45 = ((double)(var44 + var4 * 16) + 0.5D - var10) / var54;
-								int var47 = (var41 * 16 + var44) * 128 + var37;
+								int var47 = (var41 * 16 + var44) * height + var37;
 								boolean var48 = false;
 								if(var59 * var59 + var45 * var45 < 1.0D) {
 									for(int var49 = var37 - 1; var49 >= var56; --var49) {
--- /dev/null
+++ net/minecraft/src/GenLayerSingleBiome.java
@@ -1,0 +1,18 @@
+package net.minecraft.src;
+
+import java.util.Arrays;
+
+public class GenLayerSingleBiome extends GenLayer {
+	private final int biome;
+
+	public GenLayerSingleBiome(int biome) {
+		super(0L);
+		this.biome = biome;
+	}
+
+	public int[] getInts(int var1, int var2, int var3, int var4) {
+		int[] ints = IntCache.getIntCache(var3 * var4);
+		Arrays.fill(ints, this.biome);
+		return ints;
+	}
+}
--- net/minecraft/src/BlockVine.java
+++ net/minecraft/src/BlockVine.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import net.minecraft.client.Minecraft;
+
 import java.util.Random;
 
 public class BlockVine extends Block {
@@ -147,7 +149,7 @@
 	}
 
 	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
-		return var1.getBiomeGenForCoords(var2, var4).getBiomeFoliageColor();
+		return ColorizerFoliage.getFoliageColor(var1.getTemperature(var2, var4), var1.getRainfall(var2, var4));
 	}
 
 	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
--- /dev/null
+++ net/minecraft/src/GuiCustomizeSingleBiome.java
@@ -1,0 +1,134 @@
+package net.minecraft.src;
+
+public class GuiCustomizeSingleBiome extends GuiScreen {
+	protected GuiCreateWorld parentScreen;
+	protected String screenTitle = "Single Biome";
+	private GuiBiomeSlot biomeSlotContainer;
+
+	public int selectedBiome = BiomeGenBase.plains.biomeID;
+	public boolean oceans = true;
+	public boolean oceanBiomes = true;
+	public boolean beaches = true;
+	public boolean rivers = true;
+	public boolean hills = true;
+	public boolean amplified = false;
+	private boolean moreOptions = false;
+
+	private GuiButton buttonDone;
+	private GuiButton buttonMoreOptions;
+	private GuiButton buttonOceans;
+	private GuiButton buttonOceanBiomes;
+	private GuiButton buttonBeaches;
+	private GuiButton buttonRivers;
+	private GuiButton buttonHills;
+	private GuiButton buttonAmplified;
+
+	public GuiCustomizeSingleBiome(GuiCreateWorld var1) {
+		this.parentScreen = var1;
+	}
+
+	public void initGui() {
+		StringTranslate var1 = StringTranslate.getInstance();
+		this.screenTitle = var1.translateKey("singleBiome.title");
+		this.biomeSlotContainer = new GuiBiomeSlot(this);
+		this.controlList.add(this.buttonDone = new GuiButton(1, this.width / 2 + 5, this.height - 28, 150, 20, var1.translateKey("gui.done")));
+		this.controlList.add(this.buttonMoreOptions = new GuiButton(2, this.width / 2 - 155, this.height - 28, 150, 20, var1.translateKey("singleBiome.moreOptions")));
+		this.controlList.add(this.buttonOceans = new GuiButton(3, this.width / 2 - 155, this.height / 6, 150, 20, var1.translateKey("singleBiome.oceans")));
+		this.controlList.add(this.buttonOceanBiomes = new GuiButton(4, this.width / 2 + 5, this.height / 6, 150, 20, var1.translateKey("singleBiome.oceanBiomes")));
+		this.controlList.add(this.buttonBeaches = new GuiButton(5, this.width / 2 - 155, this.height / 6 + 24, 150, 20, var1.translateKey("singleBiome.beaches")));
+		this.controlList.add(this.buttonRivers = new GuiButton(6, this.width / 2 + 5, this.height / 6 + 24, 150, 20, var1.translateKey("singleBiome.rivers")));
+		this.controlList.add(this.buttonHills = new GuiButton(7, this.width / 2 - 155, this.height / 6 + 48, 150, 20, var1.translateKey("singleBiome.hills")));
+		this.controlList.add(this.buttonAmplified = new GuiButton(8, this.width / 2 + 5, this.height / 6 + 48, 150, 20, var1.translateKey("singleBiome.amplified")));
+		this.updateText();
+	}
+
+	private static String transBool(StringTranslate var1, boolean var2) {
+		return ": " + var1.translateKey(var2 ? "options.on" : "options.off");
+	}
+
+	private void updateText() {
+		StringTranslate var1 = StringTranslate.getInstance();
+
+		this.buttonOceans.displayString = var1.translateKey("singleBiome.oceans") + transBool(var1, this.oceans);
+		this.buttonOceanBiomes.displayString = var1.translateKey("singleBiome.oceanBiomes") + transBool(var1, this.oceanBiomes);
+		this.buttonBeaches.displayString = var1.translateKey("singleBiome.beaches") + transBool(var1, this.beaches);
+		this.buttonRivers.displayString = var1.translateKey("singleBiome.rivers") + transBool(var1, this.rivers);
+		this.buttonHills.displayString = var1.translateKey("singleBiome.hills") + transBool(var1, this.hills);
+		this.buttonAmplified.displayString = var1.translateKey("singleBiome.amplified") + transBool(var1, this.amplified);
+
+		this.buttonOceans.drawButton =
+		this.buttonOceanBiomes.drawButton =
+		this.buttonBeaches.drawButton =
+		this.buttonRivers.drawButton =
+		this.buttonHills.drawButton =
+		this.buttonAmplified.drawButton =
+				this.moreOptions;
+
+		this.buttonDone.drawButton = !this.moreOptions;
+
+		this.buttonMoreOptions.displayString = var1.translateKey(this.moreOptions ? "gui.done" : "singleBiome.moreOptions");
+		this.buttonMoreOptions.xPosition = this.moreOptions ? this.width / 2 - 75 : this.width / 2 - 155;
+		this.buttonMoreOptions.yPosition = this.moreOptions ? this.height / 6 + 168 : this.height - 28;
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		switch (var1.id) {
+			case 1:
+				this.parentScreen.customWorldType = WorldType.SINGLE_BIOME
+						.withBiome(this.selectedBiome)
+						.withOceans(this.oceans)
+						.withOceanBiomes(this.oceanBiomes)
+						.withBeaches(this.beaches)
+						.withRivers(this.rivers)
+						.withHills(this.hills)
+						.withAmplified(this.amplified);
+				this.mc.displayGuiScreen(this.parentScreen);
+				break;
+
+			case 2:
+				this.moreOptions = !this.moreOptions;
+				this.updateText();
+				break;
+
+			case 3:
+				this.oceans = !this.oceans;
+				this.updateText();
+				break;
+
+			case 4:
+				this.oceanBiomes = !this.oceanBiomes;
+				this.updateText();
+				break;
+
+			case 5:
+				this.beaches = !this.beaches;
+				this.updateText();
+				break;
+
+			case 6:
+				this.rivers = !this.rivers;
+				this.updateText();
+				break;
+
+			case 7:
+				this.hills = !this.hills;
+				this.updateText();
+				break;
+
+			case 8:
+				this.amplified = !this.amplified;
+				this.updateText();
+				break;
+		}
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		if (this.moreOptions) {
+			this.drawDefaultBackground();
+		} else {
+			this.biomeSlotContainer.drawScreen(var1, var2, var3);
+		}
+		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
+		super.drawScreen(var1, var2, var3);
+	}
+}
--- net/minecraft/src/EntityGhast.java
+++ net/minecraft/src/EntityGhast.java
@@ -34,7 +34,7 @@
 	}
 
 	public int getMaxHealth() {
-		return 10;
+		return this.worldObj != null && this.worldObj.getWorldInfo().isHardcoreModeEnabled() ? 15 : 10;
 	}
 
 	public void onUpdate() {
--- net/minecraft/src/StructureStrongholdStones.java
+++ net/minecraft/src/StructureStrongholdStones.java
@@ -6,7 +6,7 @@
 	private StructureStrongholdStones() {
 	}
 
-	public void selectBlocks(Random var1, int var2, int var3, int var4, boolean var5) {
+	public void selectBlocks(World var0, Random var1, int var2, int var3, int var4, boolean var5) {
 		if(!var5) {
 			this.selectedBlockId = 0;
 			this.selectedBlockMetaData = 0;
--- net/minecraft/src/BlockTallGrass.java
+++ net/minecraft/src/BlockTallGrass.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import net.minecraft.client.Minecraft;
+
 import java.util.Random;
 
 public class BlockTallGrass extends BlockFlower {
@@ -14,18 +16,22 @@
 	}
 
 	public int getBlockColor() {
-		double var1 = 0.5D;
+		double var1 = 0.8D;
 		double var3 = 1.0D;
 		return ColorizerGrass.getGrassColor(var1, var3);
 	}
 
 	public int getRenderColor(int var1) {
-		return var1 == 0 ? 16777215 : ColorizerFoliage.getFoliageColorBasic();
+		return var1 == 0 ? 16777215 : ColorizerGrass.getGrassColorBasic();
 	}
 
 	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		return var5 == 0 ? 16777215 : var1.getBiomeGenForCoords(var2, var4).getBiomeGrassColor();
+		int meta = var1.getBlockMetadata(var2, var3, var4);
+		if (meta == 0) {
+			return 16777215;
+		}
+
+		return ColorizerGrass.getGrassColor(var1.getTemperature(var2, var4), var1.getRainfall(var2, var4));
 	}
 
 	public int idDropped(int var1, Random var2, int var3) {
--- net/minecraft/src/ItemFood.java
+++ net/minecraft/src/ItemFood.java
@@ -13,10 +13,11 @@
 
 	public ItemFood(int var1, int var2, float var3, boolean var4) {
 		super(var1);
-		this.field_35430_a = 32;
+		this.field_35430_a = 48;
 		this.healAmount = var2;
 		this.isWolfsFavoriteMeat = var4;
 		this.saturationModifier = var3;
+		this.maxStackSize = 64;
 	}
 
 	public ItemFood(int var1, int var2, boolean var3) {
@@ -25,8 +26,11 @@
 
 	public ItemStack onFoodEaten(ItemStack var1, World var2, EntityPlayer var3) {
 		--var1.stackSize;
-		var3.getFoodStats().addStats(this);
-		var2.playSoundAtEntity(var3, "random.burp", 0.5F, var2.rand.nextFloat() * 0.1F + 0.9F);
+		int healLeftover = var3.getHealth() + this.getHealAmount() - var3.getMaxHealth();
+		if (healLeftover < 0) healLeftover = 0;
+		var3.heal(this.getHealAmount() - healLeftover);
+		var3.getFoodStats().addStats(healLeftover, this.getSaturationModifier());
+		var2.playSoundAtEntity(var3, var2.getWorldInfo().isClassicModeEnabled() ? "random.eat" : "random.burp", 0.5F, var2.rand.nextFloat() * 0.1F + 0.9F);
 		if(!var2.isRemote && this.potionId > 0 && var2.rand.nextFloat() < this.potionEffectProbability) {
 			var3.addPotionEffect(new PotionEffect(this.potionId, this.potionDuration * 20, this.potionAmplifier));
 		}
@@ -35,7 +39,7 @@
 	}
 
 	public int getMaxItemUseDuration(ItemStack var1) {
-		return 32;
+		return 48;
 	}
 
 	public EnumAction getItemUseAction(ItemStack var1) {
@@ -43,8 +47,12 @@
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		if(var3.canEat(this.alwaysEdible)) {
-			var3.setItemInUse(var1, this.getMaxItemUseDuration(var1));
+		if (var3.canEat(this.alwaysEdible)) {
+			if (var2.getWorldInfo().isClassicModeEnabled()) {
+				this.onFoodEaten(var1, var2, var3);
+			} else {
+				var3.setItemInUse(var1, this.getMaxItemUseDuration(var1));
+			}
 		}
 
 		return var1;
@@ -77,5 +85,13 @@
 
 	public Item setItemName(String var1) {
 		return super.setItemName(var1);
+	}
+
+	protected void setClassicTweaks() {
+		this.maxStackSize = 1;
+	}
+
+	protected void unsetClassicTweaks() {
+		this.maxStackSize = 64;
 	}
 }
--- net/minecraft/src/GenLayerRiverInit.java
+++ net/minecraft/src/GenLayerRiverInit.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import static net.minecraft.src.BiomeGenBase.oceanList;
+
 public class GenLayerRiverInit extends GenLayer {
 	public GenLayerRiverInit(long var1, GenLayer var3) {
 		super(var1);
@@ -13,7 +15,7 @@
 		for(int var7 = 0; var7 < var4; ++var7) {
 			for(int var8 = 0; var8 < var3; ++var8) {
 				this.initChunkSeed((long)(var8 + var1), (long)(var7 + var2));
-				var6[var8 + var7 * var3] = var5[var8 + var7 * var3] > 0 ? this.nextInt(2) + 2 : 0;
+				var6[var8 + var7 * var3] = !oceanList[var5[var8 + var7 * var3]] ? this.nextInt(2) + 2 : 0;
 			}
 		}
 
--- net/minecraft/src/BiomeGenHills.java
+++ net/minecraft/src/BiomeGenHills.java
@@ -1,7 +1,17 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class BiomeGenHills extends BiomeGenBase {
 	protected BiomeGenHills(int var1) {
 		super(var1);
+		this.biomeDecorator.treesPerChunk = 10;
+		this.biomeDecorator.grassPerChunk = 2;
+		this.biomeDecorator.bigMushroomsPerChunk = 10;
+	}
+
+	@Override
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(5) == 0 ? this.worldGenForest : (var1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
 	}
 }
--- net/minecraft/src/RenderBlocks.java
+++ net/minecraft/src/RenderBlocks.java
@@ -382,6 +382,10 @@
 				var14 = 3;
 			}
 
+			if(Minecraft.isColoredWaterEnabled()) {
+				var5.setColorOpaque_F(0.1F, 0.4F, 1.0F);
+			}
+
 			this.renderTopFace(var1, (double)var2, (double)((float)var3 - 1.0F + (6.0F + (float)var14 * 3.0F) / 16.0F), (double)var4, var15);
 		}
 
@@ -2289,7 +2293,7 @@
 			if(this.renderAllFaces || var11) {
 				var5.setBrightness(var1.getMixedBrightnessForBlock(this.blockAccess, var2, var3 - 1, var4));
 				float var64 = 1.0F;
-				var5.setColorOpaque_F(var14 * var64, var14 * var64, var14 * var64);
+				var5.setColorOpaque_F(var14 * var64 * var7, var14 * var64 * var8, var14 * var64 * var9);
 				this.renderBottomFace(var1, (double)var2, (double)var3 + var32, (double)var4, var1.getBlockTextureFromSide(0));
 				var13 = true;
 			}
@@ -3616,38 +3620,22 @@
 		return var5;
 	}
 
-	public boolean renderBlockStairs(Block var1, int var2, int var3, int var4) {
-		int var5 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-		int var6 = var5 & 3;
-		float var7 = 0.0F;
-		float var8 = 0.5F;
-		float var9 = 0.5F;
-		float var10 = 1.0F;
-		if((var5 & 4) != 0) {
-			var7 = 0.5F;
-			var8 = 1.0F;
-			var9 = 0.0F;
-			var10 = 0.5F;
-		}
-
-		var1.setBlockBounds(0.0F, var7, 0.0F, 1.0F, var8, 1.0F);
-		this.renderStandardBlock(var1, var2, var3, var4);
-		if(var6 == 0) {
-			var1.setBlockBounds(0.5F, var9, 0.0F, 1.0F, var10, 1.0F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-		} else if(var6 == 1) {
-			var1.setBlockBounds(0.0F, var9, 0.0F, 0.5F, var10, 1.0F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-		} else if(var6 == 2) {
-			var1.setBlockBounds(0.0F, var9, 0.5F, 1.0F, var10, 1.0F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-		} else if(var6 == 3) {
-			var1.setBlockBounds(0.0F, var9, 0.0F, 1.0F, var10, 0.5F);
-			this.renderStandardBlock(var1, var2, var3, var4);
-		}
-
-		var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-		return true;
+	public boolean renderBlockStairs(Block var0, int var2, int var3, int var4) {
+		if (var0 instanceof BlockStairs) {
+			BlockStairs var1 = (BlockStairs)var0;
+			var1.halfType(this.blockAccess, var2, var3, var4);
+	        this.renderStandardBlock(var1, var2, var3, var4);
+	        boolean var5 = var1.cornerTypeA(this.blockAccess, var2, var3, var4);
+	        this.renderStandardBlock(var1, var2, var3, var4);
+
+	        if (var5 && var1.cornerTypeB(this.blockAccess, var2, var3, var4)) {
+	            this.renderStandardBlock(var1, var2, var3, var4);
+	        }
+			return true;
+		}
+
+		this.renderStandardBlock(var0, var2, var3, var4);
+        return true;
 	}
 
 	public boolean renderBlockDoor(Block var1, int var2, int var3, int var4) {
@@ -4279,7 +4267,7 @@
 
 		var6 = var1.getRenderType();
 		int var14;
-		if(var6 != 0 && var6 != 16) {
+		if(var6 != 0 && var6 != 16 && var6 != 26) {
 			if(var6 == 1) {
 				var4.startDrawingQuads();
 				var4.setNormal(0.0F, -1.0F, 0.0F);
@@ -4472,27 +4460,27 @@
 					GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
 					var4.startDrawingQuads();
 					var4.setNormal(0.0F, -1.0F, 0.0F);
-					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
+					this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(0, var2));
 					var4.draw();
 					var4.startDrawingQuads();
 					var4.setNormal(0.0F, 1.0F, 0.0F);
-					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
+					this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(1, var2));
 					var4.draw();
 					var4.startDrawingQuads();
 					var4.setNormal(0.0F, 0.0F, -1.0F);
-					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
+					this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(2, var2));
 					var4.draw();
 					var4.startDrawingQuads();
 					var4.setNormal(0.0F, 0.0F, 1.0F);
-					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
+					this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(3, var2));
 					var4.draw();
 					var4.startDrawingQuads();
 					var4.setNormal(-1.0F, 0.0F, 0.0F);
-					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
+					this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(4, var2));
 					var4.draw();
 					var4.startDrawingQuads();
 					var4.setNormal(1.0F, 0.0F, 0.0F);
-					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
+					this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSideAndMetadata(5, var2));
 					var4.draw();
 					GL11.glTranslatef(0.5F, 0.5F, 0.5F);
 				}
@@ -4593,6 +4581,14 @@
 	}
 
 	public static boolean renderItemIn3d(int var0) {
-		return var0 == 0 ? true : (var0 == 13 ? true : (var0 == 10 ? true : (var0 == 11 ? true : (var0 == 27 ? true : (var0 == 22 ? true : (var0 == 21 ? true : var0 == 16))))));
+		return var0 == 0
+				|| var0 == 13
+				|| var0 == 10
+				|| var0 == 11
+				|| var0 == 27
+				|| var0 == 22
+				|| var0 == 21
+				|| var0 == 16
+				|| var0 == 26;
 	}
 }
--- net/minecraft/src/World.java
+++ net/minecraft/src/World.java
@@ -55,6 +55,7 @@
 	int[] lightUpdateBlockList;
 	private List entitiesWithinAABBExcludingEntity;
 	public boolean isRemote;
+	public boolean fastLighting;
 
 	public BiomeGenBase getBiomeGenForCoords(int var1, int var2) {
 		if(this.blockExists(var1, 0, var2)) {
@@ -90,7 +91,7 @@
 		this.lightningFlash = 0;
 		this.editingBlocks = false;
 		this.lockTimestamp = System.currentTimeMillis();
-		this.autosavePeriod = 40;
+		this.autosavePeriod = 1200;
 		this.rand = new Random();
 		this.isNewWorld = false;
 		this.worldAccesses = new ArrayList();
@@ -106,6 +107,11 @@
 		this.isRemote = false;
 		this.saveHandler = var1;
 		this.worldInfo = new WorldInfo(var4, var2);
+		if (this.getWorldInfo().isClassicModeEnabled()) {
+			Item.enableClassicTweaks();
+		} else {
+			Item.disableClassicTweaks();
+		}
 		this.worldProvider = var3;
 		this.mapStorage = new MapStorage(var1);
 		var3.registerWorld(this);
@@ -133,7 +139,7 @@
 		this.lightningFlash = 0;
 		this.editingBlocks = false;
 		this.lockTimestamp = System.currentTimeMillis();
-		this.autosavePeriod = 40;
+		this.autosavePeriod = 1200;
 		this.rand = new Random();
 		this.isNewWorld = false;
 		this.worldAccesses = new ArrayList();
@@ -150,6 +156,11 @@
 		this.lockTimestamp = var1.lockTimestamp;
 		this.saveHandler = var1.saveHandler;
 		this.worldInfo = new WorldInfo(var1.worldInfo);
+		if (this.getWorldInfo().isClassicModeEnabled()) {
+			Item.enableClassicTweaks();
+		} else {
+			Item.disableClassicTweaks();
+		}
 		this.mapStorage = new MapStorage(this.saveHandler);
 		this.worldProvider = var2;
 		var2.registerWorld(this);
@@ -181,7 +192,7 @@
 		this.lightningFlash = 0;
 		this.editingBlocks = false;
 		this.lockTimestamp = System.currentTimeMillis();
-		this.autosavePeriod = 40;
+		this.autosavePeriod = 1200;
 		this.rand = new Random();
 		this.isNewWorld = false;
 		this.worldAccesses = new ArrayList();
@@ -199,6 +210,7 @@
 		this.mapStorage = new MapStorage(var1);
 		this.worldInfo = var1.loadWorldInfo();
 		this.isNewWorld = this.worldInfo == null;
+
 		if(var4 != null) {
 			this.worldProvider = var4;
 		} else if(this.worldInfo != null && this.worldInfo.getDimension() != 0) {
@@ -215,6 +227,12 @@
 			this.worldInfo.setWorldName(var2);
 		}
 
+		if (this.getWorldInfo().isClassicModeEnabled()) {
+			Item.enableClassicTweaks();
+		} else {
+			Item.disableClassicTweaks();
+		}
+
 		this.worldProvider.registerWorld(this);
 		this.chunkProvider = this.createChunkProvider();
 		if(var5) {
@@ -236,7 +254,7 @@
 		} else {
 			this.findingSpawnPoint = true;
 			WorldChunkManager var1 = this.worldProvider.worldChunkMgr;
-			List var2 = var1.getBiomesToSpawnIn();
+			List var2 = this.getWorldInfo().isHardcoreModeEnabled() || this.getWorldInfo().getTerrainType() == WorldType.SINGLE_BIOME ? null : var1.getBiomesToSpawnIn();
 			Random var3 = new Random(this.getSeed());
 			ChunkPosition var4 = var1.findBiomePosition(0, 0, 256, var2, var3);
 			int var5 = 0;
@@ -398,7 +416,7 @@
 		}
 	}
 
-	private boolean chunkExists(int var1, int var2) {
+	public boolean chunkExists(int var1, int var2) {
 		return this.chunkProvider.chunkExists(var1, var2);
 	}
 
@@ -659,6 +677,19 @@
 		}
 	}
 
+	public int getMinHeightValue(int var1, int var2) {
+		if(var1 >= -30000000 && var2 >= -30000000 && var1 < 30000000 && var2 < 30000000) {
+			if(!this.chunkExists(var1 >> 4, var2 >> 4)) {
+				return 0;
+			} else {
+				Chunk var3 = this.getChunkFromChunkCoords(var1 >> 4, var2 >> 4);
+				return var3.heightMapMinimum;
+			}
+		} else {
+			return 0;
+		}
+	}
+
 	public int getSkyBlockTypeBrightness(EnumSkyBlock var1, int var2, int var3, int var4) {
 		if(this.worldProvider.hasNoSky && var1 == EnumSkyBlock.Sky) {
 			return 0;
@@ -1097,7 +1128,7 @@
 
 	public float func_35464_b(float var1) {
 		float var2 = this.getCelestialAngle(var1);
-		float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.2F);
+		float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F);
 		if(var3 < 0.0F) {
 			var3 = 0.0F;
 		}
@@ -1126,7 +1157,7 @@
 		int var5 = MathHelper.floor_double(var1.posX);
 		int var6 = MathHelper.floor_double(var1.posZ);
 		BiomeGenBase var7 = this.getBiomeGenForCoords(var5, var6);
-		float var8 = var7.getFloatTemperature();
+		float var8 = this.getTemperature(var5, var6);
 		int var9 = var7.getSkyColorByTemp(var8);
 		float var10 = (float)(var9 >> 16 & 255) / 255.0F;
 		float var11 = (float)(var9 >> 8 & 255) / 255.0F;
@@ -1860,6 +1891,8 @@
 	}
 
 	public void tick() {
+		Chunk.chunkLightFixes = 0;
+
 		if(this.getWorldInfo().isHardcoreModeEnabled() && this.difficultySetting < 3) {
 			this.difficultySetting = 3;
 		}
@@ -2003,13 +2036,30 @@
 			var2 = (EntityPlayer)this.playerEntities.get(var1);
 			var3 = MathHelper.floor_double(var2.posX / 16.0D);
 			var4 = MathHelper.floor_double(var2.posZ / 16.0D);
-			byte var5 = 7;
+//			byte var5 = 7;
+			byte var5 = 15;
 
-			for(int var6 = -var5; var6 <= var5; ++var6) {
-				for(int var7 = -var5; var7 <= var5; ++var7) {
-					this.activeChunkSet.add(new ChunkCoordIntPair(var6 + var3, var7 + var4));
+			int x = 0;
+			int z = 0;
+			int dx = 0;
+			int dz = -1;
+			for (int i = 0; i < var5 * var5; i++) {
+				this.activeChunkSet.add(new ChunkCoordIntPair(var3 + x, var4 + z));
+				if (x == z || (x < 0 && x == -z) || (x > 0 && x == 1 - z)) {
+					int odx = dx;
+					int odz = dz;
+					dx = -odz;
+					dz = odx;
 				}
+				x += dx;
+				z += dz;
 			}
+
+//			for(int var6 = -var5; var6 <= var5; ++var6) {
+//				for(int var7 = -var5; var7 <= var5; ++var7) {
+//					this.activeChunkSet.add(new ChunkCoordIntPair(var6 + var3, var7 + var4));
+//				}
+//			}
 		}
 
 		Profiler.endSection();
@@ -2142,7 +2192,7 @@
 	public boolean isBlockHydrated(int var1, int var2, int var3, boolean var4) {
 		BiomeGenBase var5 = this.getBiomeGenForCoords(var1, var3);
 		float var6 = var5.getFloatTemperature();
-		if(var6 > 0.15F) {
+		if(var6 >= 0.15F) {
 			return false;
 		} else {
 			if(var2 >= 0 && var2 < 256 && this.getSavedLightValue(EnumSkyBlock.Block, var1, var2, var3) < 10) {
@@ -2182,7 +2232,7 @@
 	public boolean canSnowAt(int var1, int var2, int var3) {
 		BiomeGenBase var4 = this.getBiomeGenForCoords(var1, var3);
 		float var5 = var4.getFloatTemperature();
-		if(var5 > 0.15F) {
+		if(var5 >= 0.15F) {
 			return false;
 		} else {
 			if(var2 >= 0 && var2 < 256 && this.getSavedLightValue(EnumSkyBlock.Block, var1, var2, var3) < 10) {
@@ -2197,12 +2247,15 @@
 		}
 	}
 
-	public void updateAllLightTypes(int var1, int var2, int var3) {
+	public boolean updateAllLightTypes(int var1, int var2, int var3) {
+		boolean updated = false;
+
 		if(!this.worldProvider.hasNoSky) {
-			this.updateLightByType(EnumSkyBlock.Sky, var1, var2, var3);
+			updated |= this.updateLightByType(EnumSkyBlock.Sky, var1, var2, var3);
 		}
 
-		this.updateLightByType(EnumSkyBlock.Block, var1, var2, var3);
+		updated |= this.updateLightByType(EnumSkyBlock.Block, var1, var2, var3);
+		return updated;
 	}
 
 	private int computeSkyLightValue(int var1, int var2, int var3, int var4, int var5, int var6) {
@@ -2283,167 +2336,168 @@
 		return var7;
 	}
 
-	public void updateLightByType(EnumSkyBlock var1, int var2, int var3, int var4) {
-		if(this.doChunksNearChunkExist(var2, var3, var4, 17)) {
-			int var5 = 0;
-			int var6 = 0;
-			Profiler.startSection("getBrightness");
-			int var7 = this.getSavedLightValue(var1, var2, var3, var4);
-			boolean var8 = false;
-			int var10 = this.getBlockId(var2, var3, var4);
-			int var11 = this.func_48462_d(var2, var3, var4);
-			if(var11 == 0) {
-				var11 = 1;
-			}
-
-			boolean var12 = false;
-			int var25;
-			if(var1 == EnumSkyBlock.Sky) {
-				var25 = this.computeSkyLightValue(var7, var2, var3, var4, var10, var11);
-			} else {
-				var25 = this.computeBlockLightValue(var7, var2, var3, var4, var10, var11);
-			}
-
-			int var9;
-			int var13;
-			int var14;
-			int var15;
-			int var16;
-			int var17;
-			if(var25 > var7) {
-				this.lightUpdateBlockList[var6++] = 133152;
-			} else if(var25 < var7) {
-				if(var1 != EnumSkyBlock.Block) {
-				}
-
-				this.lightUpdateBlockList[var6++] = 133152 + (var7 << 18);
-
-				label133:
-				while(true) {
-					do {
-						do {
-							do {
-								if(var5 >= var6) {
-									var5 = 0;
-									break label133;
-								}
-
-								var9 = this.lightUpdateBlockList[var5++];
-								var10 = (var9 & 63) - 32 + var2;
-								var11 = (var9 >> 6 & 63) - 32 + var3;
-								var25 = (var9 >> 12 & 63) - 32 + var4;
-								var13 = var9 >> 18 & 15;
-								var14 = this.getSavedLightValue(var1, var10, var11, var25);
-							} while(var14 != var13);
-
-							this.setLightValue(var1, var10, var11, var25, 0);
-						} while(var13 <= 0);
-
-						var15 = var10 - var2;
-						var16 = var11 - var3;
-						var17 = var25 - var4;
-						if(var15 < 0) {
-							var15 = -var15;
-						}
-
-						if(var16 < 0) {
-							var16 = -var16;
-						}
-
-						if(var17 < 0) {
-							var17 = -var17;
-						}
-					} while(var15 + var16 + var17 >= 17);
-
-					for(int var18 = 0; var18 < 6; ++var18) {
-						int var19 = var18 % 2 * 2 - 1;
-						int var20 = var10 + var18 / 2 % 3 / 2 * var19;
-						int var21 = var11 + (var18 / 2 + 1) % 3 / 2 * var19;
-						int var22 = var25 + (var18 / 2 + 2) % 3 / 2 * var19;
-						var14 = this.getSavedLightValue(var1, var20, var21, var22);
-						int var23 = Block.lightOpacity[this.getBlockId(var20, var21, var22)];
-						if(var23 == 0) {
-							var23 = 1;
-						}
-
-						if(var14 == var13 - var23 && var6 < this.lightUpdateBlockList.length) {
-							this.lightUpdateBlockList[var6++] = var20 - var2 + 32 + (var21 - var3 + 32 << 6) + (var22 - var4 + 32 << 12) + (var13 - var23 << 18);
-						}
-					}
-				}
-			}
-
-			Profiler.endSection();
-			Profiler.startSection("tcp < tcc");
+	private int getRawLight(int x, int y, int z, EnumSkyBlock lightType) {
+		if (lightType == EnumSkyBlock.Sky && this.canBlockSeeTheSky(x, y, z)) {
+			return 15;
+		}
+
+		int block = this.getBlockId(x, y, z);
+		int i = lightType == EnumSkyBlock.Sky ? 0 : Block.lightValue[block];
+		int j = Block.lightOpacity[block];
+
+		if (j >= 15) {
+			if (Block.lightValue[block] == 0) {
+				return 0;
+			}
+			j = 1;
+		}
+
+		if (j < 1) {
+			j = 1;
+		}
+
+		if (i >= 14) {
+			return i;
+		}
+
+		i = this.getRawLightNeighbor(x - 1, y, z, lightType, i, j);
+		if (i >= 14) return i;
+		i = this.getRawLightNeighbor(x + 1, y, z, lightType, i, j);
+		if (i >= 14) return i;
+		i = this.getRawLightNeighbor(x, y - 1, z, lightType, i, j);
+		if (i >= 14) return i;
+		i = this.getRawLightNeighbor(x, y + 1, z, lightType, i, j);
+		if (i >= 14) return i;
+		i = this.getRawLightNeighbor(x, y, z - 1, lightType, i, j);
+		if (i >= 14) return i;
+		i = this.getRawLightNeighbor(x, y, z + 1, lightType, i, j);
+		return i;
+	}
+
+	private int getRawLightNeighbor(int x, int y, int z, EnumSkyBlock lightType, int i, int j) {
+		int k = this.getSavedLightValue(lightType, x, y, z) - j;
+		if (k > i) {
+			i = k;
+		}
+		return i;
+	}
+
+	public boolean updateLightByType(EnumSkyBlock var1, int var2, int var3, int var4) {
+		if(!this.doChunksNearChunkExist(var2, var3, var4, 17)) {
+			return false;
+		}
+		int var5 = 0;
+		int var6 = 0;
+		Profiler.startSection("getBrightness");
+		int var7 = this.getSavedLightValue(var1, var2, var3, var4);
+		int var25 = this.getRawLight(var2, var3, var4, var1);
+
+		int var9;
+		int var10;
+		int var11;
+		int var13;
+		int var14;
+		int var15;
+		int var16;
+		int var17;
+		if(var25 > var7) {
+			this.lightUpdateBlockList[var6++] = 133152;
+		} else if(var25 < var7) {
+			this.lightUpdateBlockList[var6++] = 133152 + (var7 << 18);
 
 			while(var5 < var6) {
-				var7 = this.lightUpdateBlockList[var5++];
-				int var24 = (var7 & 63) - 32 + var2;
-				var9 = (var7 >> 6 & 63) - 32 + var3;
-				var10 = (var7 >> 12 & 63) - 32 + var4;
-				var11 = this.getSavedLightValue(var1, var24, var9, var10);
-				var25 = this.getBlockId(var24, var9, var10);
-				var13 = Block.lightOpacity[var25];
-				if(var13 == 0) {
-					var13 = 1;
-				}
-
-				boolean var26 = false;
-				if(var1 == EnumSkyBlock.Sky) {
-					var14 = this.computeSkyLightValue(var11, var24, var9, var10, var25, var13);
-				} else {
-					var14 = this.computeBlockLightValue(var11, var24, var9, var10, var25, var13);
-				}
-
-				if(var14 != var11) {
-					this.setLightValue(var1, var24, var9, var10, var14);
-					if(var14 > var11) {
-						var15 = var24 - var2;
-						var16 = var9 - var3;
-						var17 = var10 - var4;
-						if(var15 < 0) {
-							var15 = -var15;
-						}
-
-						if(var16 < 0) {
-							var16 = -var16;
-						}
-
-						if(var17 < 0) {
-							var17 = -var17;
-						}
-
-						if(var15 + var16 + var17 < 17 && var6 < this.lightUpdateBlockList.length - 6) {
-							if(this.getSavedLightValue(var1, var24 - 1, var9, var10) < var14) {
-								this.lightUpdateBlockList[var6++] = var24 - 1 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
-							}
-
-							if(this.getSavedLightValue(var1, var24 + 1, var9, var10) < var14) {
-								this.lightUpdateBlockList[var6++] = var24 + 1 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
-							}
-
-							if(this.getSavedLightValue(var1, var24, var9 - 1, var10) < var14) {
-								this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 - 1 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
-							}
-
-							if(this.getSavedLightValue(var1, var24, var9 + 1, var10) < var14) {
-								this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 + 1 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
-							}
-
-							if(this.getSavedLightValue(var1, var24, var9, var10 - 1) < var14) {
-								this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 - 1 - var4 + 32 << 12);
-							}
-
-							if(this.getSavedLightValue(var1, var24, var9, var10 + 1) < var14) {
-								this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 + 1 - var4 + 32 << 12);
-							}
+                int l1 = this.lightUpdateBlockList[var5++];
+                int i2 = (l1 & 63) - 32 + var2;
+                int j2 = (l1 >> 6 & 63) - 32 + var3;
+                int k2 = (l1 >> 12 & 63) - 32 + var4;
+                int l2 = l1 >> 18 & 15;
+                int i3 = this.getSavedLightValue(var1, i2, j2, k2);
+
+                if (i3 == l2) {
+                    this.setLightValue(var1, i2, j2, k2, 0);
+
+                    if (l2 > 0) {
+                        int j3 = Math.abs(i2 - var2);
+                        int k3 = Math.abs(j2 - var3);
+                        int l3 = Math.abs(k2 - var4);
+
+                        if (j3 + k3 + l3 < 17) {
+                            for (int var18 = 0; var18 < 6; ++var18) {
+								int var19 = var18 % 2 * 2 - 1;
+                                int i4 = i2 + var18 / 2 % 3 / 2 * var19;
+                                int j4 = j2 + (var18 / 2 + 1) % 3 / 2 * var19;
+                                int k4 = k2 + (var18 / 2 + 2) % 3 / 2 * var19;
+                                int l4 = Math.max(1, Block.lightOpacity[this.getBlockId(i4, j4, k4)]);
+                                i3 = this.getSavedLightValue(var1, i4, j4, k4);
+
+                                if (i3 == l2 - l4 && var6 < this.lightUpdateBlockList.length) {
+                                    this.lightUpdateBlockList[var6++] = i4 - var2 + 32 | j4 - var3 + 32 << 6
+                                            | k4 - var4 + 32 << 12 | l2 - l4 << 18;
+                                }
+                            }
+                        }
+                    }
+                }
+			}
+
+			var5 = 0;
+		}
+
+		Profiler.endSection();
+		Profiler.startSection("checkedPosition < toCheckCount");
+
+		while(var5 < var6) {
+			var7 = this.lightUpdateBlockList[var5++];
+			int var24 = (var7 & 63) - 32 + var2;
+			var9 = (var7 >> 6 & 63) - 32 + var3;
+			var10 = (var7 >> 12 & 63) - 32 + var4;
+			var11 = this.getSavedLightValue(var1, var24, var9, var10);
+			var25 = this.getBlockId(var24, var9, var10);
+			var13 = Block.lightOpacity[var25];
+			if(var13 == 0) {
+				var13 = 1;
+			}
+
+			var14 = this.getRawLight(var24, var9, var10, var1);
+
+			if(var14 != var11) {
+				this.setLightValue(var1, var24, var9, var10, var14);
+				if(var14 > var11) {
+					var15 = Math.abs(var24 - var2);
+					var16 = Math.abs(var9 - var3);
+					var17 = Math.abs(var10 - var4);
+
+					if(var15 + var16 + var17 < 17 && var6 < this.lightUpdateBlockList.length - 6) {
+						if(this.getSavedLightValue(var1, var24 - 1, var9, var10) < var14) {
+							this.lightUpdateBlockList[var6++] = var24 - 1 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
+						}
+
+						if(this.getSavedLightValue(var1, var24 + 1, var9, var10) < var14) {
+							this.lightUpdateBlockList[var6++] = var24 + 1 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
+						}
+
+						if(this.getSavedLightValue(var1, var24, var9 - 1, var10) < var14) {
+							this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 - 1 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
+						}
+
+						if(this.getSavedLightValue(var1, var24, var9 + 1, var10) < var14) {
+							this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 + 1 - var3 + 32 << 6) + (var10 - var4 + 32 << 12);
+						}
+
+						if(this.getSavedLightValue(var1, var24, var9, var10 - 1) < var14) {
+							this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 - 1 - var4 + 32 << 12);
+						}
+
+						if(this.getSavedLightValue(var1, var24, var9, var10 + 1) < var14) {
+							this.lightUpdateBlockList[var6++] = var24 - var2 + 32 + (var9 - var3 + 32 << 6) + (var10 + 1 - var4 + 32 << 12);
 						}
 					}
 				}
 			}
-
-			Profiler.endSection();
 		}
+
+		Profiler.endSection();
+		return true;
 	}
 
 	public boolean tickUpdates(boolean var1) {
@@ -3025,7 +3079,15 @@
 		return false;
 	}
 
-	public double getSeaLevel() {
-		return this.worldInfo.getTerrainType() == WorldType.FLAT ? 0.0D : 63.0D;
+	public int getSeaLevel() {
+		return this.worldInfo.getTerrainType() == WorldType.FLAT ? 0 : 63;
+	}
+
+	public float getTemperature(int var1, int var2) {
+		return this.getWorldChunkManager().getTemperature(var1, var2);
+	}
+
+	public float getRainfall(int var1, int var2) {
+		return this.getWorldChunkManager().getRainfall(var1, var2);
 	}
 }
--- net/minecraft/src/EntityRenderer.java
+++ net/minecraft/src/EntityRenderer.java
@@ -482,17 +482,22 @@
 		World var1 = this.mc.theWorld;
 		if(var1 != null) {
 			for(int var2 = 0; var2 < 256; ++var2) {
-				float var3 = var1.func_35464_b(1.0F) * 0.95F + 0.05F;
+				if (this.mc.thePlayer != null && this.mc.thePlayer.noClip) {
+					this.lightmapColors[var2] = 0xFFFFFFFF;
+					continue;
+				}
+
+				float var3 = var1.func_35464_b(1.0F);
 				float var4 = var1.worldProvider.lightBrightnessTable[var2 / 16] * var3;
-				float var5 = var1.worldProvider.lightBrightnessTable[var2 % 16] * (this.torchFlickerX * 0.1F + 1.5F);
+				float var5 = var1.worldProvider.lightBrightnessTable[var2 % 16] * 1.2F;
 				if(var1.lightningFlash > 0) {
 					var4 = var1.worldProvider.lightBrightnessTable[var2 / 16];
 				}
 
 				float var6 = var4 * (var1.func_35464_b(1.0F) * 0.65F + 0.35F);
 				float var7 = var4 * (var1.func_35464_b(1.0F) * 0.65F + 0.35F);
-				float var10 = var5 * ((var5 * 0.6F + 0.4F) * 0.6F + 0.4F);
-				float var11 = var5 * (var5 * var5 * 0.6F + 0.4F);
+				float var10 = var5 * (var5 * 0.1F + 0.9F);
+				float var11 = var5 * (var5 * 0.2F + 0.8F);
 				float var12 = var6 + var5;
 				float var13 = var7 + var10;
 				float var14 = var4 + var11;
@@ -903,7 +908,7 @@
 				int var19 = var3.getPrecipitationHeight(var17, var18);
 				int var20 = var3.getBlockId(var17, var19 - 1, var18);
 				BiomeGenBase var21 = var3.getBiomeGenForCoords(var17, var18);
-				if(var19 <= var5 + var7 && var19 >= var5 - var7 && var21.canSpawnLightningBolt() && var21.getFloatTemperature() > 0.2F) {
+				if(var19 <= var5 + var7 && var19 >= var5 - var7 && var21.canSpawnLightningBolt() && var21.getFloatTemperature() >= 0.15F) {
 					float var22 = this.random.nextFloat();
 					float var23 = this.random.nextFloat();
 					if(var20 > 0) {
--- net/minecraft/src/PlayerControllerCreative.java
+++ net/minecraft/src/PlayerControllerCreative.java
@@ -26,12 +26,6 @@
 	public void func_6473_b(EntityPlayer var1) {
 		enableAbilities(var1);
 
-		for(int var2 = 0; var2 < 9; ++var2) {
-			if(var1.inventory.mainInventory[var2] == null) {
-				var1.inventory.mainInventory[var2] = new ItemStack((Block)Session.registeredBlocksList.get(var2));
-			}
-		}
-
 	}
 
 	public static void clickBlockCreative(Minecraft var0, PlayerController var1, int var2, int var3, int var4, int var5) {
--- /dev/null
+++ net/minecraft/src/BiomeGenShrubland.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenShrubland extends BiomeGenBase {
+	protected BiomeGenShrubland(int var1) {
+		super(var1);
+		this.biomeDecorator.treesPerChunk = 10;
+		this.biomeDecorator.grassPerChunk = 5;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return var1.nextInt(5) == 0 ? this.worldGenSwamp : new WorldGenShrub(0, 0);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BiomeGenWindsweptCrags.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+public class BiomeGenWindsweptCrags extends BiomeGenBase {
+	protected BiomeGenWindsweptCrags(int var1) {
+		super(var1);
+		this.biomeDecorator.treesPerChunk = 1;
+		this.biomeDecorator.cragsPerChunk = 1;
+	}
+}
--- net/minecraft/src/Packet1Login.java
+++ net/minecraft/src/Packet1Login.java
@@ -13,6 +13,7 @@
 	public byte difficultySetting;
 	public byte worldHeight;
 	public byte maxPlayers;
+    public long seed;
 
 	public Packet1Login() {
 	}
@@ -36,6 +37,7 @@
 		this.difficultySetting = var1.readByte();
 		this.worldHeight = var1.readByte();
 		this.maxPlayers = var1.readByte();
+        this.seed = var1.readLong();
 	}
 
 	public void writePacketData(DataOutputStream var1) throws IOException {
@@ -52,6 +54,7 @@
 		var1.writeByte(this.difficultySetting);
 		var1.writeByte(this.worldHeight);
 		var1.writeByte(this.maxPlayers);
+        var1.writeLong(this.seed);
 	}
 
 	public void processPacket(NetHandler var1) {
@@ -64,6 +67,6 @@
 			var1 = this.terrainType.func_48628_a().length();
 		}
 
-		return 4 + this.username.length() + 4 + 7 + 7 + var1;
+		return 4 + this.username.length() + 4 + 7 + 7 + 8 + var1;
 	}
 }
--- net/minecraft/src/WorldRenderer.java
+++ net/minecraft/src/WorldRenderer.java
@@ -92,7 +92,9 @@
 			var21.addAll(this.tileEntityRenderers);
 			this.tileEntityRenderers.clear();
 			byte var8 = 1;
+			Profiler.startSection("cacheChunks");
 			ChunkCache var9 = new ChunkCache(this.worldObj, var1 - var8, var2 - var8, var3 - var8, var4 + var8, var5 + var8, var6 + var8);
+			Profiler.endSection();
 			if(!var9.func_48452_a()) {
 				++chunksUpdated;
 				RenderBlocks var10 = new RenderBlocks(var9);
@@ -103,6 +105,7 @@
 					boolean var13 = false;
 					boolean var14 = false;
 
+					Profiler.startSection("render");
 					for(int var15 = var2; var15 < var5; ++var15) {
 						for(int var16 = var3; var16 < var6; ++var16) {
 							for(int var17 = var1; var17 < var4; ++var17) {
@@ -139,12 +142,15 @@
 							}
 						}
 					}
+					Profiler.endSection();
 
 					if(var14) {
+						Profiler.startSection("draw");
 						this.bytesDrawn += tessellator.draw();
 						GL11.glPopMatrix();
 						GL11.glEndList();
 						tessellator.setTranslation(0.0D, 0.0D, 0.0D);
+						Profiler.endSection();
 					} else {
 						var13 = false;
 					}
--- net/minecraft/src/SaveFormatOld.java
+++ net/minecraft/src/SaveFormatOld.java
@@ -28,7 +28,7 @@
 			String var3 = "World" + (var2 + 1);
 			WorldInfo var4 = this.getWorldInfo(var3);
 			if(var4 != null) {
-				var1.add(new SaveFormatComparator(var3, "", var4.getLastTimePlayed(), var4.getSizeOnDisk(), var4.getGameType(), false, var4.isHardcoreModeEnabled()));
+				var1.add(new SaveFormatComparator(var3, "", var4.getLastTimePlayed(), var4.getSizeOnDisk(), var4.getGameType(), false, var4.isHardcoreModeEnabled(), var4.isClassicModeEnabled()));
 			}
 		}
 
--- /dev/null
+++ net/minecraft/src/GenLayerBlur.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+public class GenLayerBlur extends GenLayer {
+	public GenLayerBlur(GenLayer genLayer) {
+        super(0L);
+        this.parent = genLayer;
+    }
+
+	public int[] getInts(int var1, int var2, int var3, int var4) {
+		int[] source = this.parent.getInts(var1 - 1, var2 - 1, var3 + 2, var4 + 2);
+		int[] dest = IntCache.getIntCache(var3 * var4);
+
+		for (int z = 0; z < var4; z++) {
+			for (int x = 0; x < var3; x++) {
+				int points = 0;
+				int sum = 0;
+				for (int zz = z - 1; zz <= z + 1; zz++) {
+					for (int xx = x - 1; xx <= x + 1; xx++) {
+						if (zz < -1 || zz > var3 || xx < -1 || xx > var4) {
+							continue;
+						}
+
+						sum += source[(zz + 1) * (var3 + 2) + (xx + 1)];
+						points++;
+					}
+				}
+
+				if (points > 0) {
+					dest[z * var3 + x] = sum / points;
+				} else {
+					dest[z * var3 + x] = source[(z + 1) * (var3 + 2) + (x + 1)];
+				}
+			}
+		}
+
+		return dest;
+	}
+}
--- net/minecraft/src/EntityCreature.java
+++ net/minecraft/src/EntityCreature.java
@@ -195,7 +195,7 @@
 			return 1.0F;
 		} else {
 			float var1 = super.getSpeedModifier();
-			if(this.fleeingTick > 0) {
+			if(this.fleeingTick > 0 && this.onGround) {
 				var1 *= 2.0F;
 			}
 
--- /dev/null
+++ net/minecraft/src/EnchantmentStamina.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+public class EnchantmentStamina extends Enchantment {
+	protected EnchantmentStamina(int var1, int var2) {
+		super(var1, var2, EnumEnchantmentType.armor_legs);
+		this.setName("stamina");
+	}
+
+	public int getMinEnchantability(int var1) {
+		return 5 + 18 * (var1 - 1);
+	}
+
+	public int getMaxEnchantability(int var1) {
+		return super.getMinEnchantability(var1) + 50;
+	}
+
+	public int getMaxLevel() {
+		return 3;
+	}
+
+	public boolean canApplyTogether(Enchantment var1) {
+		return super.canApplyTogether(var1) && !(var1 instanceof EnchantmentVelocity);
+	}
+}
--- net/minecraft/src/EntityDragon.java
+++ net/minecraft/src/EntityDragon.java
@@ -259,7 +259,7 @@
 				this.func_41007_az();
 			}
 
-			if(!this.worldObj.isRemote && this.maxHurtTime == 0) {
+			if(!this.worldObj.isRemote) {
 				this.collideWithEntities(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartWing1.boundingBox.expand(4.0D, 2.0D, 4.0D).offset(0.0D, -2.0D, 0.0D)));
 				this.collideWithEntities(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartWing2.boundingBox.expand(4.0D, 2.0D, 4.0D).offset(0.0D, -2.0D, 0.0D)));
 				this.attackEntitiesInList(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.dragonPartHead.boundingBox.expand(1.0D, 1.0D, 1.0D)));
@@ -469,7 +469,7 @@
 
 		int var4;
 		int var5;
-		if(!this.worldObj.isRemote && this.field_40178_aA > 150 && this.field_40178_aA % 5 == 0) {
+		if(!this.worldObj.isRemote && this.field_40178_aA > 150 && this.field_40178_aA % 5 == 0 && !this.worldObj.getWorldInfo().isClassicModeEnabled()) {
 			var4 = 1000;
 
 			while(var4 > 0) {
@@ -481,7 +481,7 @@
 
 		this.moveEntity(0.0D, (double)0.1F, 0.0D);
 		this.renderYawOffset = this.rotationYaw += 20.0F;
-		if(this.field_40178_aA == 200) {
+		if(this.field_40178_aA == 200 && !this.worldObj.getWorldInfo().isClassicModeEnabled()) {
 			var4 = 10000;
 
 			while(var4 > 0) {
--- net/minecraft/src/GuiIngame.java
+++ net/minecraft/src/GuiIngame.java
@@ -36,7 +36,7 @@
 		this.mc.entityRenderer.setupOverlayRendering();
 		GL11.glEnable(GL11.GL_BLEND);
 		if(Minecraft.isFancyGraphicsEnabled()) {
-			this.renderVignette(this.mc.thePlayer.getBrightness(var1), var6, var7);
+			this.renderVignette(this.getVignetteStrength(var1), var6, var7);
 		} else {
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 		}
@@ -53,6 +53,9 @@
 			}
 		}
 
+		boolean classic = this.mc.theWorld.getWorldInfo().isClassicModeEnabled();
+		boolean hardcore = this.mc.theWorld.getWorldInfo().isHardcoreModeEnabled();
+
 		boolean var11;
 		int var12;
 		int var13;
@@ -93,7 +96,8 @@
 				var18 = var6 / 2 - 91;
 				var19 = var6 / 2 + 91;
 				var20 = this.mc.thePlayer.xpBarCap();
-				if(var20 > 0) {
+				boolean xpBar = var20 > 0 && !classic;
+				if(xpBar) {
 					short var21 = 182;
 					var22 = (int)(this.mc.thePlayer.experience * (float)(var21 + 1));
 					var23 = var7 - 32 + 3;
@@ -104,7 +108,10 @@
 				}
 
 				var45 = var7 - 39;
-				var22 = var45 - 10;
+				if (!xpBar) {
+					var45 += 7;
+				}
+				var22 = classic ? var45 : var45 - 10;
 				var23 = this.mc.thePlayer.getTotalArmorValue();
 				int var24 = -1;
 				if(this.mc.thePlayer.isPotionActive(Potion.regeneration)) {
@@ -117,13 +124,13 @@
 				int var29;
 				for(var25 = 0; var25 < 10; ++var25) {
 					if(var23 > 0) {
-						var26 = var18 + var25 * 8;
+						var26 = classic ? var19 - var25 * 8 - 9 : var18 + var25 * 8;
 						if(var25 * 2 + 1 < var23) {
 							this.drawTexturedModalRect(var26, var22, 34, 9, 9, 9);
 						}
 
 						if(var25 * 2 + 1 == var23) {
-							this.drawTexturedModalRect(var26, var22, 25, 9, 9, 9);
+							this.drawTexturedModalRect(var26, var22, classic ? 43 : 25, 9, 9, 9);
 						}
 
 						if(var25 * 2 + 1 > var23) {
@@ -152,7 +159,7 @@
 					}
 
 					byte var30 = 0;
-					if(this.mc.theWorld.getWorldInfo().isHardcoreModeEnabled()) {
+					if(hardcore) {
 						var30 = 5;
 					}
 
@@ -177,41 +184,47 @@
 				}
 
 				int var51;
-				for(var25 = 0; var25 < 10; ++var25) {
-					var26 = var45;
-					var51 = 16;
-					byte var52 = 0;
-					if(this.mc.thePlayer.isPotionActive(Potion.hunger)) {
-						var51 += 36;
-						var52 = 13;
-					}
-
-					if(this.mc.thePlayer.getFoodStats().getSaturationLevel() <= 0.0F && this.updateCounter % (var16 * 3 + 1) == 0) {
-						var26 = var45 + (this.rand.nextInt(3) - 1);
-					}
-
-					if(var14) {
-						var52 = 1;
-					}
-
-					var29 = var19 - var25 * 8 - 9;
-					this.drawTexturedModalRect(var29, var26, 16 + var52 * 9, 27, 9, 9);
-					if(var14) {
-						if(var25 * 2 + 1 < var17) {
-							this.drawTexturedModalRect(var29, var26, var51 + 54, 27, 9, 9);
-						}
-
-						if(var25 * 2 + 1 == var17) {
-							this.drawTexturedModalRect(var29, var26, var51 + 63, 27, 9, 9);
-						}
-					}
-
-					if(var25 * 2 + 1 < var16) {
-						this.drawTexturedModalRect(var29, var26, var51 + 36, 27, 9, 9);
-					}
-
-					if(var25 * 2 + 1 == var16) {
-						this.drawTexturedModalRect(var29, var26, var51 + 45, 27, 9, 9);
+				if(!hardcore && !classic) {
+					for(var25 = 0; var25 < 10; ++var25) {
+						var26 = var45;
+						var51 = 16;
+						byte var52 = 0;
+						if(this.mc.thePlayer.isPotionActive(Potion.hunger)) {
+							var51 += 36;
+							var52 = 13;
+						}
+
+						if(this.mc.thePlayer.getFoodStats().getFoodLevel() <= 0) {
+							var26 = var45 + (this.rand.nextInt(2) - 1);
+						}
+
+						if(var14) {
+							var52 = 1;
+						}
+
+						if(!xpBar) {
+							var26 += 7;
+						}
+
+						var29 = var19 - var25 * 8 - 9;
+						this.drawTexturedModalRect(var29, var26, 16 + var52 * 9, 27, 9, 9);
+						if(var14) {
+							if(var25 * 2 + 1 < var17) {
+								this.drawTexturedModalRect(var29, var26, var51 + 54, 27, 9, 9);
+							}
+
+							if(var25 * 2 + 1 == var17) {
+								this.drawTexturedModalRect(var29, var26, var51 + 63, 27, 9, 9);
+							}
+						}
+
+						if(var25 * 2 + 1 < var16) {
+							this.drawTexturedModalRect(var29, var26, var51 + 36, 27, 9, 9);
+						}
+
+						if(var25 * 2 + 1 == var16) {
+							this.drawTexturedModalRect(var29, var26, var51 + 45, 27, 9, 9);
+						}
 					}
 				}
 
@@ -220,11 +233,16 @@
 					var26 = (int)Math.ceil((double)(var25 - 2) * 10.0D / 300.0D);
 					var51 = (int)Math.ceil((double)var25 * 10.0D / 300.0D) - var26;
 
+					if (classic) {
+						var22 -= 9;
+					}
+
 					for(var28 = 0; var28 < var26 + var51; ++var28) {
+						int pos = classic ? var18 + var28 * 8 : var19 - var28 * 8 - 9;
 						if(var28 < var26) {
-							this.drawTexturedModalRect(var19 - var28 * 8 - 9, var22, 16, 18, 9, 9);
+							this.drawTexturedModalRect(pos, var22, 16, 18, 9, 9);
 						} else {
-							this.drawTexturedModalRect(var19 - var28 * 8 - 9, var22, 25, 18, 9, 9);
+							this.drawTexturedModalRect(pos, var22, 25, 18, 9, 9);
 						}
 					}
 				}
@@ -262,10 +280,11 @@
 
 		int var39;
 		int var40;
-		if(this.mc.playerController.func_35642_f() && this.mc.thePlayer.experienceLevel > 0) {
-			var11 = false;
-			var12 = var11 ? 16777215 : 8453920;
-			String var34 = "" + this.mc.thePlayer.experienceLevel;
+		if(this.mc.playerController.func_35642_f() && (this.mc.thePlayer.experienceLevel > 0 || this.mc.thePlayer.isSneaking()) && !classic) {
+			var12 = 8453920;
+			String var34 = this.mc.thePlayer.isSneaking()
+					? (int) (this.mc.thePlayer.experience * this.mc.thePlayer.xpBarCap()) + "/" + this.mc.thePlayer.xpBarCap()
+					: String.valueOf(this.mc.thePlayer.experienceLevel);
 			var39 = (var6 - var8.getStringWidth(var34)) / 2;
 			var40 = var7 - 31 - 4;
 			var8.drawString(var34, var39 + 1, var40, 0);
@@ -281,7 +300,7 @@
 				GL11.glTranslatef(0.0F, 32.0F, 0.0F);
 			}
 
-			var8.drawStringWithShadow("Minecraft 1.2.5 (" + this.mc.debug + ")", 2, 2, 16777215);
+			var8.drawStringWithShadow("Minecraft AuthAdv 1.1 (" + this.mc.debug + ")", 2, 2, 16777215);
 			var8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 12, 16777215);
 			var8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 22, 16777215);
 			var8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 32, 16777215);
@@ -294,9 +313,9 @@
 			this.drawString(var8, var44, var6 - var8.getStringWidth(var44) - 2, 2, 14737632);
 			var44 = "Allocated memory: " + var36 * 100L / var35 + "% (" + var36 / 1024L / 1024L + "MB)";
 			this.drawString(var8, var44, var6 - var8.getStringWidth(var44) - 2, 12, 14737632);
-			this.drawString(var8, "x: " + this.mc.thePlayer.posX, 2, 64, 14737632);
-			this.drawString(var8, "y: " + this.mc.thePlayer.posY, 2, 72, 14737632);
-			this.drawString(var8, "z: " + this.mc.thePlayer.posZ, 2, 80, 14737632);
+			this.drawString(var8, "x: " + Math.round(this.mc.thePlayer.posX * 100.0D) / 100.0D, 2, 64, 14737632);
+			this.drawString(var8, "y: " + Math.round(this.mc.thePlayer.boundingBox.minY * 100.0D) / 100.0D, 2, 72, 14737632);
+			this.drawString(var8, "z: " + Math.round(this.mc.thePlayer.posZ * 100.0D) / 100.0D, 2, 80, 14737632);
 			this.drawString(var8, "f: " + (MathHelper.floor_double((double)(this.mc.thePlayer.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3), 2, 88, 14737632);
 			var45 = MathHelper.floor_double(this.mc.thePlayer.posX);
 			var22 = MathHelper.floor_double(this.mc.thePlayer.posY);
@@ -306,9 +325,7 @@
 				this.drawString(var8, "lc: " + (var48.getTopFilledSegment() + 15) + " b: " + var48.func_48490_a(var45 & 15, var23 & 15, this.mc.theWorld.getWorldChunkManager()).biomeName + " bl: " + var48.getSavedLightValue(EnumSkyBlock.Block, var45 & 15, var22, var23 & 15) + " sl: " + var48.getSavedLightValue(EnumSkyBlock.Sky, var45 & 15, var22, var23 & 15) + " rl: " + var48.getBlockLightValue(var45 & 15, var22, var23 & 15, 0), 2, 96, 14737632);
 			}
 
-			if(!this.mc.theWorld.isRemote) {
-				this.drawString(var8, "Seed: " + this.mc.theWorld.getSeed(), 2, 112, 14737632);
-			}
+            this.drawString(var8, "Seed: " + this.mc.theWorld.getSeed(), 2, 112, 14737632);
 
 			GL11.glPopMatrix();
 		}
@@ -689,5 +706,14 @@
 		StringTranslate var2 = StringTranslate.getInstance();
 		String var3 = var2.translateKey(var1);
 		this.addChatMessage(var3);
+	}
+
+	public float getVignetteStrength(float var1) {
+		if (this.mc.thePlayer.sprintCooldown > 0
+				&& !this.mc.theWorld.getWorldInfo().isHardcoreModeEnabled()
+				&& !this.mc.theWorld.getWorldInfo().isClassicModeEnabled()) {
+			return 0.0F;
+		}
+		return this.mc.thePlayer.getBrightness(var1);
 	}
 }
--- net/minecraft/src/ComponentStrongholdPrison.java
+++ net/minecraft/src/ComponentStrongholdPrison.java
@@ -4,6 +4,8 @@
 import java.util.Random;
 
 public class ComponentStrongholdPrison extends ComponentStronghold {
+	private boolean hasSpawner1;
+	private boolean hasSpawner2;
 	protected final EnumDoor doorType;
 
 	public ComponentStrongholdPrison(int var1, Random var2, StructureBoundingBox var3, int var4) {
@@ -11,6 +13,8 @@
 		this.coordBaseMode = var4;
 		this.doorType = this.getRandomDoor(var2);
 		this.boundingBox = var3;
+		this.hasSpawner1 = var2.nextInt(2) == 0;
+		this.hasSpawner2 = var2.nextInt(2) == 0;
 	}
 
 	public void buildComponent(StructureComponent var1, List var2, Random var3) {
@@ -41,6 +45,35 @@
 			this.placeBlockAtCurrentPosition(var1, Block.doorSteel.blockID, this.getMetadataWithOffset(Block.doorSteel.blockID, 3) + 8, 4, 2, 2, var3);
 			this.placeBlockAtCurrentPosition(var1, Block.doorSteel.blockID, this.getMetadataWithOffset(Block.doorSteel.blockID, 3), 4, 1, 8, var3);
 			this.placeBlockAtCurrentPosition(var1, Block.doorSteel.blockID, this.getMetadataWithOffset(Block.doorSteel.blockID, 3) + 8, 4, 2, 8, var3);
+
+			if (!this.hasSpawner1) {
+				int sx = this.getXWithOffset(6, 3);
+				int sy = this.getYWithOffset(1);
+				int sz = this.getZWithOffset(6, 3);
+				if (var3.isVecInside(sx, sy, sz)) {
+					this.hasSpawner1 = true;
+					var1.setBlockWithNotify(sx, sy, sz, Block.mobSpawner.blockID);
+					TileEntityMobSpawner spawner = (TileEntityMobSpawner) var1.getBlockTileEntity(sx, sy, sz);
+					if (spawner != null) {
+						spawner.setMobID("Zombie");
+					}
+				}
+			}
+
+			if (!this.hasSpawner2) {
+				int sx = this.getXWithOffset(6, 7);
+				int sy = this.getYWithOffset(1);
+				int sz = this.getZWithOffset(6, 7);
+				if (var3.isVecInside(sx, sy, sz)) {
+					this.hasSpawner2 = true;
+					var1.setBlockWithNotify(sx, sy, sz, Block.mobSpawner.blockID);
+					TileEntityMobSpawner spawner = (TileEntityMobSpawner) var1.getBlockTileEntity(sx, sy, sz);
+					if (spawner != null) {
+						spawner.setMobID("Skeleton");
+					}
+				}
+			}
+
 			return true;
 		}
 	}
--- net/minecraft/src/EntitySpider.java
+++ net/minecraft/src/EntitySpider.java
@@ -26,7 +26,7 @@
 	}
 
 	public int getMaxHealth() {
-		return 16;
+		return this.worldObj != null && this.worldObj.getWorldInfo().isHardcoreModeEnabled() ? 24 : 16;
 	}
 
 	public double getMountedYOffset() {
--- net/minecraft/src/CraftingManager.java
+++ net/minecraft/src/CraftingManager.java
@@ -23,7 +23,10 @@
 		(new RecipesDyes()).addRecipes(this);
 		this.addRecipe(new ItemStack(Item.paper, 3), new Object[]{"###", Character.valueOf('#'), Item.reed});
 		this.addRecipe(new ItemStack(Item.book, 1), new Object[]{"#", "#", "#", Character.valueOf('#'), Item.paper});
-		this.addRecipe(new ItemStack(Block.fence, 2), new Object[]{"###", "###", Character.valueOf('#'), Item.stick});
+		this.addRecipe(new ItemStack(Block.fence, 3, 0), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 0)});
+		this.addRecipe(new ItemStack(Block.fence, 3, 1), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 1)});
+		this.addRecipe(new ItemStack(Block.fence, 3, 2), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 2)});
+		this.addRecipe(new ItemStack(Block.fence, 3, 3), new Object[]{"W#W", "W#W", Character.valueOf('#'), Item.stick, Character.valueOf('W'), new ItemStack(Block.planks, 1, 3)});
 		this.addRecipe(new ItemStack(Block.netherFence, 6), new Object[]{"###", "###", Character.valueOf('#'), Block.netherBrick});
 		this.addRecipe(new ItemStack(Block.fenceGate, 1), new Object[]{"#W#", "#W#", Character.valueOf('#'), Item.stick, Character.valueOf('W'), Block.planks});
 		this.addRecipe(new ItemStack(Block.jukebox, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.diamond});
@@ -38,9 +41,13 @@
 		this.addRecipe(new ItemStack(Block.stairSingle, 6, 3), new Object[]{"###", Character.valueOf('#'), Block.cobblestone});
 		this.addRecipe(new ItemStack(Block.stairSingle, 6, 0), new Object[]{"###", Character.valueOf('#'), Block.stone});
 		this.addRecipe(new ItemStack(Block.stairSingle, 6, 1), new Object[]{"###", Character.valueOf('#'), Block.sandStone});
-		this.addRecipe(new ItemStack(Block.stairSingle, 6, 2), new Object[]{"###", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Block.stairSingle, 6, 4), new Object[]{"###", Character.valueOf('#'), Block.brick});
 		this.addRecipe(new ItemStack(Block.stairSingle, 6, 5), new Object[]{"###", Character.valueOf('#'), Block.stoneBrick});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6, 6), new Object[]{"###", Character.valueOf('#'), Block.netherBrick});
+		this.addRecipe(new ItemStack(Block.woodStairSingle, 6, 0), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 0)});
+		this.addRecipe(new ItemStack(Block.woodStairSingle, 6, 1), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 1)});
+		this.addRecipe(new ItemStack(Block.woodStairSingle, 6, 2), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 2)});
+		this.addRecipe(new ItemStack(Block.woodStairSingle, 6, 3), new Object[]{"###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 3)});
 		this.addRecipe(new ItemStack(Block.ladder, 3), new Object[]{"# #", "###", "# #", Character.valueOf('#'), Item.stick});
 		this.addRecipe(new ItemStack(Item.doorWood, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Block.trapdoor, 2), new Object[]{"###", "###", Character.valueOf('#'), Block.planks});
@@ -70,12 +77,16 @@
 		this.addRecipe(new ItemStack(Item.bucketEmpty, 1), new Object[]{"# #", " # ", Character.valueOf('#'), Item.ingotIron});
 		this.addRecipe(new ItemStack(Item.flintAndSteel, 1), new Object[]{"A ", " B", Character.valueOf('A'), Item.ingotIron, Character.valueOf('B'), Item.flint});
 		this.addRecipe(new ItemStack(Item.bread, 1), new Object[]{"###", Character.valueOf('#'), Item.wheat});
-		this.addRecipe(new ItemStack(Block.stairCompactPlanks, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planks});
+		this.addRecipe(new ItemStack(Block.stairCompactPlanks, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 0)});
+		this.addRecipe(new ItemStack(Block.stairsSpruce, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 1)});
+		this.addRecipe(new ItemStack(Block.stairsBirch, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 2)});
+		this.addRecipe(new ItemStack(Block.stairsJungle, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), new ItemStack(Block.planks, 1, 3)});
 		this.addRecipe(new ItemStack(Item.fishingRod, 1), new Object[]{"  #", " #X", "# X", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.silk});
-		this.addRecipe(new ItemStack(Block.stairCompactCobblestone, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.cobblestone});
-		this.addRecipe(new ItemStack(Block.stairsBrick, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.brick});
-		this.addRecipe(new ItemStack(Block.stairsStoneBrickSmooth, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.stoneBrick});
-		this.addRecipe(new ItemStack(Block.stairsNetherBrick, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.netherBrick});
+		this.addRecipe(new ItemStack(Block.stairCompactCobblestone, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.cobblestone});
+		this.addRecipe(new ItemStack(Block.stairsBrick, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.brick});
+		this.addRecipe(new ItemStack(Block.stairsStoneBrickSmooth, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.stoneBrick});
+		this.addRecipe(new ItemStack(Block.stairsNetherBrick, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.netherBrick});
+		this.addRecipe(new ItemStack(Block.stairsSandstone, 8), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.sandStone});
 		this.addRecipe(new ItemStack(Item.painting, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Block.cloth});
 		this.addRecipe(new ItemStack(Item.appleGold, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.goldNugget, Character.valueOf('X'), Item.appleRed});
 		this.addRecipe(new ItemStack(Block.lever, 1), new Object[]{"X", "#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.stick});
@@ -84,7 +95,7 @@
 		this.addRecipe(new ItemStack(Item.pocketSundial, 1), new Object[]{" # ", "#X#", " # ", Character.valueOf('#'), Item.ingotGold, Character.valueOf('X'), Item.redstone});
 		this.addRecipe(new ItemStack(Item.compass, 1), new Object[]{" # ", "#X#", " # ", Character.valueOf('#'), Item.ingotIron, Character.valueOf('X'), Item.redstone});
 		this.addRecipe(new ItemStack(Item.map, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.paper, Character.valueOf('X'), Item.compass});
-		this.addRecipe(new ItemStack(Block.button, 1), new Object[]{"#", "#", Character.valueOf('#'), Block.stone});
+		this.addRecipe(new ItemStack(Block.button, 1), new Object[]{"#", Character.valueOf('#'), Block.stone});
 		this.addRecipe(new ItemStack(Block.pressurePlateStone, 1), new Object[]{"##", Character.valueOf('#'), Block.stone});
 		this.addRecipe(new ItemStack(Block.pressurePlatePlanks, 1), new Object[]{"##", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Block.dispenser, 1), new Object[]{"###", "#X#", "#R#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.bow, Character.valueOf('R'), Item.redstone});
--- /dev/null
+++ net/minecraft/src/GenLayerDownfallMix.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+public class GenLayerDownfallMix extends GenLayer {
+    private GenLayer otherParent;
+    private int strength;
+
+    public GenLayerDownfallMix(GenLayer genLayer, GenLayer genLayer2, int strength) {
+        super(0L);
+        this.parent = genLayer2;
+        this.otherParent = genLayer;
+        this.strength = strength;
+    }
+
+    public int[] getInts(int n, int n2, int n3, int n4) {
+        int[] nArray = this.parent.getInts(n, n2, n3, n4);
+        int[] nArray2 = this.otherParent.getInts(n, n2, n3, n4);
+        int[] nArray3 = IntCache.getIntCache(n3 * n4);
+        for (int i = 0; i < n3 * n4; ++i) {
+            nArray3[i] = nArray2[i] + (BiomeGenBase.biomeList[nArray[i]].getIntRainfall() - nArray2[i]) / (this.strength + 1);
+        }
+        return nArray3;
+    }
+}
--- net/minecraft/src/IBlockAccess.java
+++ net/minecraft/src/IBlockAccess.java
@@ -26,4 +26,8 @@
 	int getHeight();
 
 	boolean func_48452_a();
+
+	float getTemperature(int var1, int var2);
+
+	float getRainfall(int var1, int var2);
 }
--- net/minecraft/src/StructureComponent.java
+++ net/minecraft/src/StructureComponent.java
@@ -330,7 +330,7 @@
 			for(int var13 = var3; var13 <= var6; ++var13) {
 				for(int var14 = var5; var14 <= var8; ++var14) {
 					if(!var9 || this.getBlockIdAtCurrentPosition(var1, var13, var12, var14, var2) != 0) {
-						var11.selectBlocks(var10, var13, var12, var14, var12 == var4 || var12 == var7 || var13 == var3 || var13 == var6 || var14 == var5 || var14 == var8);
+						var11.selectBlocks(var1, var10, this.getXWithOffset(var13, var14), this.getYWithOffset(var12), this.getZWithOffset(var13, var14), var12 == var4 || var12 == var7 || var13 == var3 || var13 == var6 || var14 == var5 || var14 == var8);
 						this.placeBlockAtCurrentPosition(var1, var11.getSelectedBlockId(), var11.getSelectedBlockMetaData(), var13, var12, var14, var2);
 					}
 				}
--- net/minecraft/src/StructurePieceBlockSelector.java
+++ net/minecraft/src/StructurePieceBlockSelector.java
@@ -6,7 +6,7 @@
 	protected int selectedBlockId;
 	protected int selectedBlockMetaData;
 
-	public abstract void selectBlocks(Random var1, int var2, int var3, int var4, boolean var5);
+	public abstract void selectBlocks(World var0, Random var1, int var2, int var3, int var4, boolean var5);
 
 	public int getSelectedBlockId() {
 		return this.selectedBlockId;
--- net/minecraft/src/PanelCrashReport.java
+++ net/minecraft/src/PanelCrashReport.java
@@ -25,7 +25,7 @@
 		try {
 			var5 = var5 + "Generated " + (new SimpleDateFormat()).format(new Date()) + "\n";
 			var5 = var5 + "\n";
-			var5 = var5 + "Minecraft: Minecraft 1.2.5\n";
+			var5 = var5 + "Minecraft: Minecraft AuthAdv 1.1\n";
 			var5 = var5 + "OS: " + System.getProperty("os.name") + " (" + System.getProperty("os.arch") + ") version " + System.getProperty("os.version") + "\n";
 			var5 = var5 + "Java: " + System.getProperty("java.version") + ", " + System.getProperty("java.vendor") + "\n";
 			var5 = var5 + "VM: " + System.getProperty("java.vm.name") + " (" + System.getProperty("java.vm.info") + "), " + System.getProperty("java.vm.vendor") + "\n";
--- net/minecraft/src/Chunk.java
+++ net/minecraft/src/Chunk.java
@@ -10,6 +10,9 @@
 
 public class Chunk {
 	public static boolean isLit;
+	public static int chunkLightFixesMax = Integer.MAX_VALUE;
+	public static int chunkLightFixes = 0;
+	public static int chunkLightFixesTotal = 0;
 	private ExtendedBlockStorage[] storageArrays;
 	private byte[] blockBiomeArray;
 	public int[] precipitationHeightMap;
@@ -23,11 +26,13 @@
 	public Map chunkTileEntityMap;
 	public List[] entityLists;
 	public boolean isTerrainPopulated;
+	public boolean isLightPopulated;
 	public boolean isModified;
 	public boolean hasEntities;
 	public long lastSaveTime;
 	public boolean field_50120_o;
 	private int queuedLightChecks;
+	public int heightMapMinimum;
 	boolean field_35846_u;
 
 	public Chunk(World var1, int var2, int var3) {
@@ -65,7 +70,7 @@
 		for(int var6 = 0; var6 < 16; ++var6) {
 			for(int var7 = 0; var7 < 16; ++var7) {
 				for(int var8 = 0; var8 < var5; ++var8) {
-					byte var9 = var2[var6 << 11 | var7 << 7 | var8];
+					byte var9 = var2[var6 * var5 * 16 + var7 * var5 + var8];
 					if(var9 != 0) {
 						int var10 = var8 >> 4;
 						if(this.storageArrays[var10] == null) {
@@ -102,72 +107,88 @@
 		return this.storageArrays;
 	}
 
-	public void generateHeightMap() {
-		int var1 = this.getTopFilledSegment();
-
-		for(int var2 = 0; var2 < 16; ++var2) {
-			for(int var3 = 0; var3 < 16; ++var3) {
-				this.precipitationHeightMap[var2 + (var3 << 4)] = -999;
-
-				for(int var4 = var1 + 16 - 1; var4 > 0; --var4) {
-					int var5 = this.getBlockID(var2, var4 - 1, var3);
-					if(Block.lightOpacity[var5] != 0) {
-						this.heightMap[var3 << 4 | var2] = var4;
-						break;
-					}
-				}
-			}
-		}
-
-		this.isModified = true;
-	}
-
-	public void generateSkylightMap() {
-		int var1 = this.getTopFilledSegment();
-
-		int var2;
-		int var3;
-		for(var2 = 0; var2 < 16; ++var2) {
-			for(var3 = 0; var3 < 16; ++var3) {
-				this.precipitationHeightMap[var2 + (var3 << 4)] = -999;
-
-				int var4;
-				for(var4 = var1 + 16 - 1; var4 > 0; --var4) {
-					if(this.getBlockLightOpacity(var2, var4 - 1, var3) != 0) {
-						this.heightMap[var3 << 4 | var2] = var4;
-						break;
-					}
-				}
-
-				if(!this.worldObj.worldProvider.hasNoSky) {
-					var4 = 15;
-					int var5 = var1 + 16 - 1;
-
-					do {
-						var4 -= this.getBlockLightOpacity(var2, var5, var3);
-						if(var4 > 0) {
-							ExtendedBlockStorage var6 = this.storageArrays[var5 >> 4];
-							if(var6 != null) {
-								var6.setExtSkylightValue(var2, var5 & 15, var3, var4);
-								this.worldObj.func_48464_p((this.xPosition << 4) + var2, var5, (this.zPosition << 4) + var3);
-							}
-						}
-
-						--var5;
-					} while(var5 > 0 && var4 > 0);
-				}
-			}
-		}
-
-		this.isModified = true;
-
-		for(var2 = 0; var2 < 16; ++var2) {
-			for(var3 = 0; var3 < 16; ++var3) {
-				this.propagateSkylightOcclusion(var2, var3);
-			}
-		}
-
-	}
+    public void generateHeightMap() {
+        int i = this.getTopFilledSegment();
+        this.heightMapMinimum = Integer.MAX_VALUE;
+
+        for (int j = 0; j < 16; ++j) {
+            for (int k = 0; k < 16; ++k) {
+                this.precipitationHeightMap[j + (k << 4)] = -999;
+
+                for (int l = i + 16; l > 0; --l) {
+                    int block = this.getBlockID(j, l - 1, k);
+
+                    if (Block.lightOpacity[block] != 0) {
+                        this.heightMap[k << 4 | j] = l;
+
+                        if (l < this.heightMapMinimum) {
+                            this.heightMapMinimum = l;
+                        }
+
+                        break;
+                    }
+                }
+            }
+        }
+
+        this.isModified = true;
+    }
+
+    public void generateSkylightMap() {
+        int i = this.getTopFilledSegment();
+        this.heightMapMinimum = Integer.MAX_VALUE;
+
+        for (int j = 0; j < 16; ++j) {
+            for (int k = 0; k < 16; ++k) {
+                this.precipitationHeightMap[j + (k << 4)] = -999;
+
+                for (int l = i + 16; l > 0; --l) {
+                    if (this.getBlockLightOpacity(j, l - 1, k) != 0) {
+                        this.heightMap[k << 4 | j] = l;
+
+                        if (l < this.heightMapMinimum) {
+                            this.heightMapMinimum = l;
+                        }
+
+                        break;
+                    }
+                }
+
+                if (!this.worldObj.worldProvider.hasNoSky) {
+                    int k1 = 15;
+                    int i1 = i + 16 - 1;
+
+                    while (true) {
+                        int j1 = this.getBlockLightOpacity(j, i1, k);
+
+                        if (j1 == 0 && k1 != 15) {
+                            j1 = 1;
+                        }
+
+                        k1 -= j1;
+
+                        if (k1 > 0) {
+                            ExtendedBlockStorage extendedblockstorage = this.storageArrays[i1 >> 4];
+
+                            if (extendedblockstorage != null) {
+                                extendedblockstorage.setExtSkylightValue(j, i1 & 15, k, k1);
+                                this.worldObj.markBlockAsNeedsUpdate(
+                                        (this.xPosition << 4) + j, i1, (this.zPosition << 4) + k);
+                            }
+                        }
+
+                        --i1;
+
+                        if (i1 <= 0 || k1 <= 0) {
+                            break;
+                        }
+                    }
+                }
+            }
+        }
+
+        this.isModified = true;
+    }
 
 	public void func_4143_d() {
 	}
@@ -177,7 +198,7 @@
 		this.isGapLightingUpdated = true;
 	}
 
-	private void updateSkylight_do() {
+	private void recheckGaps(boolean var0) {
 		Profiler.startSection("recheckGaps");
 		if(this.worldObj.doChunksNearChunkExist(this.xPosition * 16 + 8, 0, this.zPosition * 16 + 8, 16)) {
 			for(int var1 = 0; var1 < 16; ++var1) {
@@ -187,27 +208,22 @@
 						int var3 = this.getHeightValue(var1, var2);
 						int var4 = this.xPosition * 16 + var1;
 						int var5 = this.zPosition * 16 + var2;
-						int var6 = this.worldObj.getHeightValue(var4 - 1, var5);
-						int var7 = this.worldObj.getHeightValue(var4 + 1, var5);
-						int var8 = this.worldObj.getHeightValue(var4, var5 - 1);
-						int var9 = this.worldObj.getHeightValue(var4, var5 + 1);
-						if(var7 < var6) {
-							var6 = var7;
-						}
-
-						if(var8 < var6) {
-							var6 = var8;
-						}
-
-						if(var9 < var6) {
-							var6 = var9;
-						}
+						int var6 = Integer.MAX_VALUE;
+						var6 = Math.min(var6, this.worldObj.getMinHeightValue(var4 - 1, var5));
+						var6 = Math.min(var6, this.worldObj.getMinHeightValue(var4 + 1, var5));
+						var6 = Math.min(var6, this.worldObj.getMinHeightValue(var4, var5 - 1));
+						var6 = Math.min(var6, this.worldObj.getMinHeightValue(var4, var5 + 1));
 
 						this.checkSkylightNeighborHeight(var4, var5, var6);
 						this.checkSkylightNeighborHeight(var4 - 1, var5, var3);
 						this.checkSkylightNeighborHeight(var4 + 1, var5, var3);
 						this.checkSkylightNeighborHeight(var4, var5 - 1, var3);
 						this.checkSkylightNeighborHeight(var4, var5 + 1, var3);
+
+						if (var0) {
+							Profiler.endSection();
+							return;
+						}
 					}
 				}
 			}
@@ -306,6 +322,10 @@
 				var13 = var4;
 			}
 
+			if (var8 < this.heightMapMinimum) {
+				this.heightMapMinimum = var8;
+			}
+
 			if(!this.worldObj.worldProvider.hasNoSky) {
 				this.updateSkylightNeighborHeight(var6 - 1, var7, var12, var13);
 				this.updateSkylightNeighborHeight(var6 + 1, var7, var12, var13);
@@ -392,7 +412,11 @@
 						this.relightBlock(var1, var2, var3);
 					}
 
-					this.propagateSkylightOcclusion(var1, var3);
+					if(Block.lightOpacity[var8 & 4095] != Block.lightOpacity[var4 & 4095]
+							|| this.getSavedLightValue(EnumSkyBlock.Sky, var1, var2, var3) > 0
+							|| this.getSavedLightValue(EnumSkyBlock.Block, var1, var2, var3) > 0) {
+						this.propagateSkylightOcclusion(var1, var3);
+					}
 				}
 
 				TileEntity var13;
@@ -771,9 +795,14 @@
 
 	public void updateSkylight() {
 		if(this.isGapLightingUpdated && !this.worldObj.worldProvider.hasNoSky) {
-			this.updateSkylight_do();
+			this.recheckGaps(this.worldObj.isRemote);
 		}
 
+		if(chunkLightFixes < chunkLightFixesMax && !this.worldObj.fastLighting && !this.isLightPopulated && this.isTerrainPopulated) {
+			chunkLightFixes++;
+			chunkLightFixesTotal++;
+            this.populateLighting();
+        }
 	}
 
 	public ChunkCoordIntPair getChunkCoordIntPair() {
@@ -954,4 +983,95 @@
 		}
 
 	}
+
+	public void populateLighting() {
+		Profiler.startSection("populateLighting");
+        this.isTerrainPopulated = true;
+        this.isLightPopulated = true;
+
+        if (!this.worldObj.worldProvider.hasNoSky) {
+            if (this.worldObj.checkChunksExist(this.xPosition * 16 - 1, 0, this.zPosition * 16 - 1,
+                    this.xPosition * 16 + 1, this.worldObj.getSeaLevel(), this.zPosition * 16 + 1)) {
+                for (int var1 = 0; var1 < 16; ++var1) {
+                    for (int var2 = 0; var2 < 16; ++var2) {
+                        if (!this.populateLight(var1, var2)) {
+                            this.isLightPopulated = false;
+                            break;
+                        }
+                    }
+                }
+
+                if (this.isLightPopulated) {
+                    Chunk var3 = this.worldObj.getChunkFromBlockCoords(this.xPosition * 16 - 1, this.zPosition * 16);
+                    var3.populateLightNeighbor(3);
+                    var3 = this.worldObj.getChunkFromBlockCoords(this.xPosition * 16 + 16, this.zPosition * 16);
+                    var3.populateLightNeighbor(1);
+                    var3 = this.worldObj.getChunkFromBlockCoords(this.xPosition * 16, this.zPosition * 16 - 1);
+                    var3.populateLightNeighbor(0);
+                    var3 = this.worldObj.getChunkFromBlockCoords(this.xPosition * 16, this.zPosition * 16 + 16);
+                    var3.populateLightNeighbor(2);
+
+	                Arrays.fill(this.updateSkylightColumns, true);
+			        this.recheckGaps(false);
+                }
+            } else {
+                this.isLightPopulated = false;
+            }
+        }
+		Profiler.endSection();
+    }
+
+    private void populateLightNeighbor(int var1) {
+        if (this.isTerrainPopulated) {
+            int var2;
+
+            if (var1 == 3) {
+                for (var2 = 0; var2 < 16; ++var2) {
+                    this.populateLight(15, var2);
+                }
+            } else if (var1 == 1) {
+                for (var2 = 0; var2 < 16; ++var2) {
+                    this.populateLight(0, var2);
+                }
+            } else if (var1 == 0) {
+                for (var2 = 0; var2 < 16; ++var2) {
+                    this.populateLight(var2, 15);
+                }
+            } else if (var1 == 2) {
+                for (var2 = 0; var2 < 16; ++var2) {
+                    this.populateLight(var2, 0);
+                }
+            }
+        }
+    }
+
+    private boolean populateLight(int x, int y) {
+        int var3 = this.getTopFilledSegment();
+        boolean var4 = false;
+        boolean var5 = false;
+        int var6;
+
+        for (var6 = var3 + 16 - 1; var6 > this.worldObj.getSeaLevel() || var6 > 0 && !var5; --var6) {
+            int var7 = this.getBlockLightOpacity(x, var6, y);
+
+            if (var7 == 255 && var6 < this.worldObj.getSeaLevel()) {
+                var5 = true;
+            }
+
+            if (!var4 && var7 > 0) {
+                var4 = true;
+            } else if (var4 && var7 == 0 && !this.worldObj.updateAllLightTypes(this.xPosition * 16 + x, var6,
+                    this.zPosition * 16 + y)) {
+                return false;
+            }
+        }
+
+        for (; var6 > 0; --var6) {
+            if (Block.lightValue[this.getBlockID(x, var6, y)] > 0) {
+                this.worldObj.updateAllLightTypes(this.xPosition * 16 + x, var6, this.zPosition * 16 + y);
+            }
+        }
+
+        return true;
+    }
 }
--- /dev/null
+++ net/minecraft/src/GenLayerTemperature.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class GenLayerTemperature extends GenLayer {
+    public GenLayerTemperature(GenLayer genLayer) {
+        super(0L);
+        this.parent = genLayer;
+    }
+
+    public int[] getInts(int n, int n2, int n3, int n4) {
+        int[] nArray = this.parent.getInts(n, n2, n3, n4);
+        int[] nArray2 = IntCache.getIntCache(n3 * n4);
+        for (int i = 0; i < n3 * n4; ++i) {
+            nArray2[i] = BiomeGenBase.biomeList[nArray[i]].getIntTemperature();
+        }
+        return nArray2;
+    }
+}
--- net/minecraft/src/AnvilSaveConverter.java
+++ net/minecraft/src/AnvilSaveConverter.java
@@ -38,7 +38,7 @@
 					}
 
 					long var11 = 0L;
-					var1.add(new SaveFormatComparator(var7, var10, var8.getLastTimePlayed(), var11, var8.getGameType(), var9, var8.isHardcoreModeEnabled()));
+					var1.add(new SaveFormatComparator(var7, var10, var8.getLastTimePlayed(), var11, var8.getGameType(), var9, var8.isHardcoreModeEnabled(), var8.isClassicModeEnabled()));
 				}
 			}
 		}
@@ -88,7 +88,7 @@
 		if(var10.getTerrainType() == WorldType.FLAT) {
 			var11 = new WorldChunkManagerHell(BiomeGenBase.plains, 0.5F, 0.5F);
 		} else {
-			var11 = new WorldChunkManager(var10.getSeed(), var10.getTerrainType());
+			var11 = new WorldChunkManager(var10.getSeed(), WorldType.DEFAULT_1_1);
 		}
 
 		this.func_48428_a(new File(var6, "region"), var3, (WorldChunkManager)var11, 0, var9, var2);
--- net/minecraft/client/Minecraft.java
+++ net/minecraft/client/Minecraft.java
@@ -10,102 +10,8 @@
 import java.io.File;
 import java.text.DecimalFormat;
 import java.util.List;
-import net.minecraft.src.AchievementList;
-import net.minecraft.src.AnvilSaveConverter;
-import net.minecraft.src.AxisAlignedBB;
-import net.minecraft.src.Block;
-import net.minecraft.src.ChunkCoordinates;
-import net.minecraft.src.ChunkProviderLoadOrGenerate;
-import net.minecraft.src.ColorizerFoliage;
-import net.minecraft.src.ColorizerGrass;
-import net.minecraft.src.ColorizerWater;
-import net.minecraft.src.EffectRenderer;
-import net.minecraft.src.EntityClientPlayerMP;
-import net.minecraft.src.EntityLiving;
-import net.minecraft.src.EntityPlayer;
-import net.minecraft.src.EntityPlayerSP;
-import net.minecraft.src.EntityRenderer;
-import net.minecraft.src.EnumMovingObjectType;
-import net.minecraft.src.EnumOS2;
-import net.minecraft.src.EnumOSMappingHelper;
-import net.minecraft.src.EnumOptions;
-import net.minecraft.src.FontRenderer;
-import net.minecraft.src.GLAllocation;
-import net.minecraft.src.GameSettings;
-import net.minecraft.src.GameWindowListener;
-import net.minecraft.src.GuiAchievement;
-import net.minecraft.src.GuiChat;
-import net.minecraft.src.GuiConflictWarning;
-import net.minecraft.src.GuiConnecting;
-import net.minecraft.src.GuiErrorScreen;
-import net.minecraft.src.GuiGameOver;
-import net.minecraft.src.GuiIngame;
-import net.minecraft.src.GuiIngameMenu;
-import net.minecraft.src.GuiInventory;
-import net.minecraft.src.GuiMainMenu;
-import net.minecraft.src.GuiMemoryErrorScreen;
-import net.minecraft.src.GuiScreen;
-import net.minecraft.src.GuiSleepMP;
-import net.minecraft.src.IChunkProvider;
-import net.minecraft.src.ISaveFormat;
-import net.minecraft.src.ISaveHandler;
-import net.minecraft.src.Item;
-import net.minecraft.src.ItemBlock;
-import net.minecraft.src.ItemRenderer;
-import net.minecraft.src.ItemStack;
-import net.minecraft.src.KeyBinding;
-import net.minecraft.src.LoadingScreenRenderer;
-import net.minecraft.src.MathHelper;
-import net.minecraft.src.MinecraftError;
-import net.minecraft.src.MinecraftException;
-import net.minecraft.src.MinecraftImpl;
-import net.minecraft.src.ModelBiped;
-import net.minecraft.src.MouseHelper;
-import net.minecraft.src.MovementInputFromOptions;
-import net.minecraft.src.MovingObjectPosition;
-import net.minecraft.src.NetClientHandler;
-import net.minecraft.src.OpenGlCapsChecker;
-import net.minecraft.src.OpenGlHelper;
-import net.minecraft.src.Packet3Chat;
-import net.minecraft.src.PlayerController;
-import net.minecraft.src.PlayerUsageSnooper;
-import net.minecraft.src.Profiler;
-import net.minecraft.src.ProfilerResult;
-import net.minecraft.src.RenderBlocks;
-import net.minecraft.src.RenderEngine;
-import net.minecraft.src.RenderGlobal;
-import net.minecraft.src.RenderManager;
-import net.minecraft.src.ScaledResolution;
-import net.minecraft.src.ScreenShotHelper;
-import net.minecraft.src.Session;
-import net.minecraft.src.SoundManager;
-import net.minecraft.src.StatCollector;
-import net.minecraft.src.StatFileWriter;
-import net.minecraft.src.StatList;
-import net.minecraft.src.StatStringFormatKeyInv;
-import net.minecraft.src.StringTranslate;
-import net.minecraft.src.Teleporter;
-import net.minecraft.src.Tessellator;
-import net.minecraft.src.TextureCompassFX;
-import net.minecraft.src.TextureFlamesFX;
-import net.minecraft.src.TextureLavaFX;
-import net.minecraft.src.TextureLavaFlowFX;
-import net.minecraft.src.TexturePackList;
-import net.minecraft.src.TexturePortalFX;
-import net.minecraft.src.TextureWatchFX;
-import net.minecraft.src.TextureWaterFX;
-import net.minecraft.src.TextureWaterFlowFX;
-import net.minecraft.src.ThreadCheckHasPaid;
-import net.minecraft.src.ThreadClientSleep;
-import net.minecraft.src.ThreadDownloadResources;
-import net.minecraft.src.Timer;
-import net.minecraft.src.UnexpectedThrowable;
-import net.minecraft.src.Vec3D;
-import net.minecraft.src.World;
-import net.minecraft.src.WorldProvider;
-import net.minecraft.src.WorldRenderer;
-import net.minecraft.src.WorldSettings;
-import net.minecraft.src.WorldType;
+
+import net.minecraft.src.*;
 import org.lwjgl.LWJGLException;
 import org.lwjgl.Sys;
 import org.lwjgl.input.Controllers;
@@ -238,7 +144,7 @@
 			Display.setDisplayMode(new DisplayMode(this.displayWidth, this.displayHeight));
 		}
 
-		Display.setTitle("Minecraft Minecraft 1.2.5");
+		Display.setTitle("Minecraft Minecraft AuthAdv 1.1");
 		System.out.println("LWJGL Version: " + Sys.getVersion());
 
 		try {
@@ -667,8 +573,9 @@
 			++this.fpsCounter;
 
 			for(this.isGamePaused = !this.isMultiplayerWorld() && this.currentScreen != null && this.currentScreen.doesGuiPauseGame(); System.currentTimeMillis() >= this.debugUpdateTime + 1000L; this.fpsCounter = 0) {
-				this.debug = this.fpsCounter + " fps, " + WorldRenderer.chunksUpdated + " chunk updates";
+				this.debug = this.fpsCounter + " fps, " + WorldRenderer.chunksUpdated + " chunk updates, " + Chunk.chunkLightFixesTotal + " lighting fixes";
 				WorldRenderer.chunksUpdated = 0;
+				Chunk.chunkLightFixesTotal = 0;
 				this.debugUpdateTime += 1000L;
 			}
 
@@ -927,6 +834,9 @@
 
 	public void displayInGameMenu() {
 		if(this.currentScreen == null) {
+//			this.thePlayer.rotationYaw = -180.0F;
+//			this.thePlayer.rotationPitch = 90.0F;
+
 			this.displayGuiScreen(new GuiIngameMenu());
 		}
 	}
@@ -1193,11 +1103,17 @@
 					do {
 						if(!Keyboard.next()) {
 							while(this.gameSettings.keyBindInventory.isPressed()) {
-								this.displayGuiScreen(new GuiInventory(this.thePlayer));
+								this.displayGuiScreen(this.thePlayer.capabilities.isCreativeMode
+										? new GuiContainerCreative(this.thePlayer)
+										: new GuiInventory(this.thePlayer));
 							}
 
 							while(this.gameSettings.keyBindDrop.isPressed()) {
-								this.thePlayer.dropOneItem();
+								if (Keyboard.isKeyDown(Keyboard.KEY_LCONTROL)) {
+									this.thePlayer.dropItemStack();
+								} else {
+									this.thePlayer.dropOneItem();
+								}
 							}
 
 							while(this.isMultiplayerWorld() && this.gameSettings.keyBindChat.isPressed()) {
@@ -1284,7 +1200,7 @@
 
 							if(Keyboard.getEventKey() == Keyboard.KEY_F3) {
 								this.gameSettings.showDebugInfo = !this.gameSettings.showDebugInfo;
-								this.gameSettings.field_50119_G = !GuiScreen.func_50049_m();
+								this.gameSettings.field_50119_G = GuiScreen.func_50049_m();
 							}
 
 							if(Keyboard.getEventKey() == Keyboard.KEY_F5) {
@@ -1297,6 +1213,14 @@
 							if(Keyboard.getEventKey() == Keyboard.KEY_F8) {
 								this.gameSettings.smoothCamera = !this.gameSettings.smoothCamera;
 							}
+
+//							if(Keyboard.getEventKey() == Keyboard.KEY_F4
+//									&& this.thePlayer.capabilities.isCreativeMode
+//									&& !this.thePlayer.isEntityInsideOpaqueBlock()) {
+//								this.thePlayer.noClip = !this.thePlayer.noClip;
+//								this.thePlayer.capabilities.isFlying = true;
+//								this.thePlayer.onGround = false;
+//							}
 						}
 
 						int var7;
@@ -1361,6 +1285,8 @@
 			}
 
 			if(!this.isGamePaused || this.isMultiplayerWorld()) {
+				Chunk.chunkLightFixesMax = (int)(15 * 15 * 16 * this.gameSettings.lightFixSpeed);
+				this.theWorld.fastLighting = this.gameSettings.lightFixSpeed == 0.0F;
 				this.theWorld.setAllowedSpawnTypes(this.theWorld.difficultySetting > 0, true);
 				this.theWorld.tick();
 			}
@@ -1577,7 +1503,7 @@
 		this.loadingScreen.printText("Converting World to " + this.saveLoader.getFormatName());
 		this.loadingScreen.displayLoadingString("This may take a while :)");
 		this.saveLoader.convertMapFormat(var1, this.loadingScreen);
-		this.startWorld(var1, var2, new WorldSettings(0L, 0, true, false, WorldType.DEFAULT));
+		this.startWorld(var1, var2, new WorldSettings(0L, 0, true, false, false, WorldType.DEFAULT));
 	}
 
 	private void preloadWorld(String var1) {
@@ -1741,9 +1667,11 @@
 		var5.setLayout(new BorderLayout());
 		var5.add(var6, "Center");
 		var6.setPreferredSize(new Dimension(854, 480));
+//		var6.setPreferredSize(new Dimension(512, 512));
 		var5.pack();
 		var5.setLocationRelativeTo((Component)null);
 		MinecraftImpl var7 = new MinecraftImpl(var5, var6, (MinecraftApplet)null, 854, 480, var3, var5);
+//		MinecraftImpl var7 = new MinecraftImpl(var5, var6, (MinecraftApplet)null, 512, 512, var3, var5);
 		Thread var8 = new Thread(var7, "Minecraft main thread");
 		var8.setPriority(10);
 		var7.minecraftUri = "www.minecraft.net";
@@ -1783,6 +1711,10 @@
 		startMainThread1(var1, var2);
 	}
 
+	public static Minecraft getInstance() {
+		return theMinecraft;
+	}
+
 	public static boolean isGuiEnabled() {
 		return theMinecraft == null || !theMinecraft.gameSettings.hideGUI;
 	}
@@ -1799,6 +1731,10 @@
 		return theMinecraft != null && theMinecraft.gameSettings.showDebugInfo;
 	}
 
+	public static boolean isColoredWaterEnabled() {
+		return theMinecraft != null && theMinecraft.gameSettings.coloredWater;
+	}
+
 	public boolean lineIsCommand(String var1) {
 		if(var1.startsWith("/")) {
 		}
@@ -1809,47 +1745,57 @@
 	private void clickMiddleMouseButton() {
 		if(this.objectMouseOver != null) {
 			boolean var1 = this.thePlayer.capabilities.isCreativeMode;
-			int var2 = this.theWorld.getBlockId(this.objectMouseOver.blockX, this.objectMouseOver.blockY, this.objectMouseOver.blockZ);
-			if(!var1) {
-				if(var2 == Block.grass.blockID) {
-					var2 = Block.dirt.blockID;
-				}
-
-				if(var2 == Block.stairDouble.blockID) {
-					var2 = Block.stairSingle.blockID;
-				}
-
-				if(var2 == Block.bedrock.blockID) {
-					var2 = Block.stone.blockID;
-				}
-			}
-
-			int var3 = 0;
-			boolean var4 = false;
-			if(Item.itemsList[var2] != null && Item.itemsList[var2].getHasSubtypes()) {
-				var3 = this.theWorld.getBlockMetadata(this.objectMouseOver.blockX, this.objectMouseOver.blockY, this.objectMouseOver.blockZ);
-				var4 = true;
-			}
-
-			if(Item.itemsList[var2] != null && Item.itemsList[var2] instanceof ItemBlock) {
-				Block var5 = Block.blocksList[var2];
-				int var6 = var5.idDropped(var3, this.thePlayer.worldObj.rand, 0);
-				if(var6 > 0) {
-					var2 = var6;
-				}
-			}
-
-			this.thePlayer.inventory.setCurrentItem(var2, var3, var4, var1);
-			if(var1) {
-				int var7 = this.thePlayer.inventorySlots.inventorySlots.size() - 9 + this.thePlayer.inventory.currentItem;
-				this.playerController.sendSlotPacket(this.thePlayer.inventory.getStackInSlot(this.thePlayer.inventory.currentItem), var7);
+			if(this.objectMouseOver.typeOfHit == EnumMovingObjectType.TILE) {
+				int var2 = this.theWorld.getBlockId(this.objectMouseOver.blockX, this.objectMouseOver.blockY, this.objectMouseOver.blockZ);
+				if(!var1) {
+					if(var2 == Block.grass.blockID) {
+						var2 = Block.dirt.blockID;
+					}
+
+					if(var2 == Block.stairDouble.blockID) {
+						var2 = Block.stairSingle.blockID;
+					}
+
+					if(var2 == Block.bedrock.blockID) {
+						var2 = Block.stone.blockID;
+					}
+				}
+
+				int var3 = 0;
+				boolean var4 = false;
+				if(Item.itemsList[var2] != null && Item.itemsList[var2].getHasSubtypes()) {
+					var3 = this.theWorld.getBlockMetadata(this.objectMouseOver.blockX, this.objectMouseOver.blockY, this.objectMouseOver.blockZ);
+					var4 = true;
+				}
+
+				if(Item.itemsList[var2] != null && Item.itemsList[var2] instanceof ItemBlock) {
+					Block var5 = Block.blocksList[var2];
+					int var6 = var1 && var5.creativePickDirect ? var2 : var5.idDropped(var3, this.thePlayer.worldObj.rand, 0);
+
+					if(var6 > 0) {
+						var2 = var6;
+					}
+				}
+
+				this.thePlayer.inventory.setCurrentItem(var2, var3, var4, var1);
+				if(var1) {
+					int var7 = this.thePlayer.inventorySlots.inventorySlots.size() - 9 + this.thePlayer.inventory.currentItem;
+					this.playerController.sendSlotPacket(this.thePlayer.inventory.getStackInSlot(this.thePlayer.inventory.currentItem), var7);
+				}
+			} else if(var1 && this.objectMouseOver.typeOfHit == EnumMovingObjectType.ENTITY) {
+				EntityEggInfo egg = EntityList.getEntityEgg(this.objectMouseOver.entityHit);
+				if (egg != null) {
+					this.thePlayer.inventory.setCurrentItem(Item.monsterPlacer.shiftedIndex, egg.spawnedID, true, true);
+					int var7 = this.thePlayer.inventorySlots.inventorySlots.size() - 9 + this.thePlayer.inventory.currentItem;
+					this.playerController.sendSlotPacket(this.thePlayer.inventory.getStackInSlot(this.thePlayer.inventory.currentItem), var7);
+				}
 			}
 		}
 
 	}
 
 	public static String func_52003_C() {
-		return "1.2.5";
+		return "AuthAdv 1.1";
 	}
 
 	public static void func_52004_D() {
--- /dev/null
+++ net/minecraft/src/BiomeGenArchipelago.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BiomeGenArchipelago extends BiomeGenBase {
+	protected BiomeGenArchipelago(int var1) {
+		super(var1);
+		this.biomeDecorator.treesPerChunk = 1;
+		this.biomeDecorator.grassPerChunk = 3;
+	}
+
+	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
+		return new WorldGenPalmtree();
+	}
+}
--- net/minecraft/src/EntitySilverfish.java
+++ net/minecraft/src/EntitySilverfish.java
@@ -12,7 +12,7 @@
 	}
 
 	public int getMaxHealth() {
-		return 8;
+		return this.worldObj != null && this.worldObj.getWorldInfo().isHardcoreModeEnabled() ? 12 : 8;
 	}
 
 	protected boolean canTriggerWalking() {
--- net/minecraft/src/BiomeGenSwamp.java
+++ net/minecraft/src/BiomeGenSwamp.java
@@ -7,27 +7,16 @@
 		super(var1);
 		this.biomeDecorator.treesPerChunk = 2;
 		this.biomeDecorator.flowersPerChunk = -999;
+		this.biomeDecorator.grassPerChunk = 4;
 		this.biomeDecorator.deadBushPerChunk = 1;
 		this.biomeDecorator.mushroomsPerChunk = 8;
 		this.biomeDecorator.reedsPerChunk = 10;
 		this.biomeDecorator.clayPerChunk = 1;
 		this.biomeDecorator.waterlilyPerChunk = 4;
-		this.waterColorMultiplier = 14745518;
+		this.biomeDecorator.bigMushroomsPerChunk = 15;
 	}
 
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
 		return this.worldGenSwamp;
-	}
-
-	public int getBiomeGrassColor() {
-		double var1 = (double)this.getFloatTemperature();
-		double var3 = (double)this.getFloatRainfall();
-		return ((ColorizerGrass.getGrassColor(var1, var3) & 16711422) + 5115470) / 2;
-	}
-
-	public int getBiomeFoliageColor() {
-		double var1 = (double)this.getFloatTemperature();
-		double var3 = (double)this.getFloatRainfall();
-		return ((ColorizerFoliage.getFoliageColor(var1, var3) & 16711422) + 5115470) / 2;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BiomeGenGravelBeach.java
@@ -1,0 +1,14 @@
+package net.minecraft.src;
+
+public class BiomeGenGravelBeach extends BiomeGenBase {
+	public BiomeGenGravelBeach(int var1) {
+		super(var1);
+		this.spawnableCreatureList.clear();
+		this.topBlock = 0;
+		this.fillerBlock = (byte)Block.gravel.blockID;
+		this.biomeDecorator.treesPerChunk = -999;
+		this.biomeDecorator.deadBushPerChunk = 0;
+		this.biomeDecorator.reedsPerChunk = 0;
+		this.biomeDecorator.cactiPerChunk = 0;
+	}
+}
--- net/minecraft/src/ComponentStrongholdLibrary.java
+++ net/minecraft/src/ComponentStrongholdLibrary.java
@@ -5,6 +5,7 @@
 
 public class ComponentStrongholdLibrary extends ComponentStronghold {
 	private static final StructurePieceTreasure[] field_35056_b = new StructurePieceTreasure[]{new StructurePieceTreasure(Item.book.shiftedIndex, 0, 1, 3, 20), new StructurePieceTreasure(Item.paper.shiftedIndex, 0, 2, 7, 20), new StructurePieceTreasure(Item.map.shiftedIndex, 0, 1, 1, 1), new StructurePieceTreasure(Item.compass.shiftedIndex, 0, 1, 1, 1)};
+	private boolean hasSpawner;
 	protected final EnumDoor doorType;
 	private final boolean isLargeRoom;
 
@@ -120,6 +121,20 @@
 			if(this.isLargeRoom) {
 				this.placeBlockAtCurrentPosition(var1, 0, 0, 12, 9, 1, var3);
 				this.createTreasureChestAtCurrentPosition(var1, var3, var2, 12, 8, 1, field_35056_b, 1 + var2.nextInt(4));
+			}
+
+			if (!this.hasSpawner) {
+				int sx = this.getXWithOffset(7, 7);
+				int sy = this.getYWithOffset(1);
+				int sz = this.getZWithOffset(7, 7);
+				if (var3.isVecInside(sx, sy, sz)) {
+					this.hasSpawner = true;
+					var1.setBlockWithNotify(sx, sy, sz, Block.mobSpawner.blockID);
+					TileEntityMobSpawner spawner = (TileEntityMobSpawner) var1.getBlockTileEntity(sx, sy, sz);
+					if (spawner != null) {
+						spawner.setMobID("CaveSpider");
+					}
+				}
 			}
 
 			return true;
--- net/minecraft/src/BiomeGenMushroomIsland.java
+++ net/minecraft/src/BiomeGenMushroomIsland.java
@@ -7,7 +7,7 @@
 		this.biomeDecorator.flowersPerChunk = -100;
 		this.biomeDecorator.grassPerChunk = -100;
 		this.biomeDecorator.mushroomsPerChunk = 1;
-		this.biomeDecorator.bigMushroomsPerChunk = 1;
+		this.biomeDecorator.bigMushroomsPerChunk = 100;
 		this.topBlock = (byte)Block.mycelium.blockID;
 		this.spawnableMonsterList.clear();
 		this.spawnableCreatureList.clear();
--- net/minecraft/src/EntityPlayer.java
+++ net/minecraft/src/EntityPlayer.java
@@ -46,6 +46,7 @@
 	protected float speedOnGround = 0.1F;
 	protected float speedInAir = 0.02F;
 	public EntityFishHook fishEntity = null;
+	public int sprintCooldown;
 
 	public EntityPlayer(World var1) {
 		super(var1);
@@ -113,7 +114,8 @@
 			if(var1 != this.itemInUse) {
 				this.clearItemInUse();
 			} else {
-				if(this.itemInUseCount <= 25 && this.itemInUseCount % 4 == 0) {
+				int dur = this.itemInUse.getMaxItemUseDuration();
+				if(this.itemInUseCount <= dur - (int)(7.0F / 35.0F * dur) && this.itemInUseCount % 4 == 0) {
 					this.updateItemUse(var1, 5);
 				}
 
@@ -306,6 +308,10 @@
 	}
 
 	public void onLivingUpdate() {
+		if(this.sprintCooldown > 0) {
+			--this.sprintCooldown;
+		}
+
 		if(this.flyToggleTimer > 0) {
 			--this.flyToggleTimer;
 		}
@@ -402,6 +408,12 @@
 		return this.dropPlayerItemWithRandomChoice(this.inventory.decrStackSize(this.inventory.currentItem, 1), false);
 	}
 
+	public EntityItem dropItemStack() {
+		ItemStack currentItem = this.inventory.getCurrentItem();
+		this.inventory.setInventorySlotContents(this.inventory.currentItem, null);
+		return this.dropPlayerItemWithRandomChoice(currentItem, false);
+	}
+
 	public EntityItem dropPlayerItem(ItemStack var1) {
 		return this.dropPlayerItemWithRandomChoice(var1, false);
 	}
@@ -575,6 +587,8 @@
 						this.alertWolves((EntityLiving)var4, false);
 					}
 
+					this.setSprinting(false);
+					this.sprintCooldown = this.worldObj.difficultySetting * 10;
 					this.addStat(StatList.damageTakenStat, var2);
 					return super.attackEntityFrom(var1, var2);
 				}
@@ -732,12 +746,23 @@
 			}
 
 			if(var2 > 0 || var4 > 0) {
-				boolean var5 = this.fallDistance > 0.0F && !this.onGround && !this.isOnLadder() && !this.isInWater() && !this.isPotionActive(Potion.blindness) && this.ridingEntity == null && var1 instanceof EntityLiving;
+				boolean var5 = !this.worldObj.getWorldInfo().isClassicModeEnabled()
+						&& this.fallDistance > 0.0F
+						&& !this.onGround
+						&& !this.isOnLadder()
+						&& !this.isInWater()
+						&& !this.isPotionActive(Potion.blindness)
+						&& this.ridingEntity == null
+						&& var1 instanceof EntityLiving;
 				if(var5) {
 					var2 += this.rand.nextInt(var2 / 2 + 2);
 				}
 
 				var2 += var4;
+				if (this.worldObj.getWorldInfo().isClassicModeEnabled()) {
+					var2 += 1;
+				}
+
 				boolean var6 = var1.attackEntityFrom(DamageSource.causePlayerDamage(this), var2);
 				if(var6) {
 					if(var3 > 0) {
@@ -745,6 +770,7 @@
 						this.motionX *= 0.6D;
 						this.motionZ *= 0.6D;
 						this.setSprinting(false);
+						this.sprintCooldown = 10;
 					}
 
 					if(var5) {
@@ -782,10 +808,7 @@
 						var1.setFire(var8 * 4);
 					}
 				}
-
-				this.addExhaustion(0.3F);
 			}
-
 		}
 	}
 
@@ -1007,11 +1030,12 @@
 		super.jump();
 		this.addStat(StatList.jumpStat, 1);
 		if(this.isSprinting()) {
-			this.addExhaustion(0.8F);
-		} else {
-			this.addExhaustion(0.2F);
+			this.addExhaustion(1.0F);
 		}
+	}
 
+	protected float getSpeedModifier() {
+		return super.getSpeedModifier() * EnchantmentHelper.getSpeedModifier(this.inventory);
 	}
 
 	public void moveEntityWithHeading(float var1, float var2) {
@@ -1022,6 +1046,12 @@
 			double var9 = this.motionY;
 			float var11 = this.jumpMovementFactor;
 			this.jumpMovementFactor = 0.05F;
+			if(this.isSprinting()) {
+				this.jumpMovementFactor *= 2.5F;
+			}
+			if(this.noClip) {
+				this.jumpMovementFactor *= 2.5F;
+			}
 			super.moveEntityWithHeading(var1, var2);
 			this.motionY = var9 * 0.6D;
 			this.jumpMovementFactor = var11;
@@ -1039,13 +1069,11 @@
 				var7 = Math.round(MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5) * 100.0F);
 				if(var7 > 0) {
 					this.addStat(StatList.distanceDoveStat, var7);
-					this.addExhaustion(0.015F * (float)var7 * 0.01F);
 				}
 			} else if(this.isInWater()) {
 				var7 = Math.round(MathHelper.sqrt_double(var1 * var1 + var5 * var5) * 100.0F);
 				if(var7 > 0) {
 					this.addStat(StatList.distanceSwumStat, var7);
-					this.addExhaustion(0.015F * (float)var7 * 0.01F);
 				}
 			} else if(this.isOnLadder()) {
 				if(var3 > 0.0D) {
@@ -1056,9 +1084,7 @@
 				if(var7 > 0) {
 					this.addStat(StatList.distanceWalkedStat, var7);
 					if(this.isSprinting()) {
-						this.addExhaustion(10.0F * 0.01F * (float)var7 * 0.01F);
-					} else {
-						this.addExhaustion(0.01F * (float)var7 * 0.01F);
+						this.addExhaustion((float)var7 * 0.002F);
 					}
 				}
 			} else {
@@ -1157,6 +1183,7 @@
 		for(this.experienceTotal += var1; this.experience >= 1.0F; this.experience /= (float)this.xpBarCap()) {
 			this.experience = (this.experience - 1.0F) * (float)this.xpBarCap();
 			this.increaseLevel();
+			this.worldObj.playSoundAtEntity(this, "random.orb", 1.0F, 0.8F + this.rand.nextFloat() * 0.4F);
 		}
 
 	}
@@ -1170,7 +1197,13 @@
 	}
 
 	public int xpBarCap() {
-		return 7 + (this.experienceLevel * 7 >> 1);
+		if (experienceLevel >= 30) {
+	        return 62 + (experienceLevel - 30) * 7;
+	    } else if (experienceLevel >= 15) {
+	        return 17 + (experienceLevel - 15) * 3;
+	    } else {
+	        return 17;
+	    }
 	}
 
 	private void increaseLevel() {
@@ -1178,11 +1211,20 @@
 	}
 
 	public void addExhaustion(float var1) {
-		if(!this.capabilities.disableDamage) {
-			if(!this.worldObj.isRemote) {
-				this.foodStats.addExhaustion(var1);
-			}
-
+		if (this.worldObj.difficultySetting == 0
+				|| this.worldObj.worldInfo.isHardcoreModeEnabled()
+				|| this.worldObj.getWorldInfo().isClassicModeEnabled()) {
+			return;
+		} else if (this.worldObj.difficultySetting == 1) {
+			var1 /= 2.0F;
+		} else if (this.worldObj.difficultySetting == 3) {
+			var1 *= 2.0F;
+		}
+
+		var1 *= EnchantmentHelper.getExhaustionModifier(this.inventory);
+
+		if(!this.capabilities.disableDamage && !this.worldObj.isRemote) {
+			this.foodStats.addExhaustion(var1);
 		}
 	}
 
@@ -1191,7 +1233,7 @@
 	}
 
 	public boolean canEat(boolean var1) {
-		return (var1 || this.foodStats.needFood()) && !this.capabilities.disableDamage;
+		return (var1 || this.foodStats.needFood() || this.shouldHeal()) && !this.capabilities.disableDamage;
 	}
 
 	public boolean shouldHeal() {
@@ -1240,5 +1282,21 @@
 	}
 
 	public void func_50009_aI() {
+	}
+
+	protected String getHurtSound() {
+		if (this.worldObj.getWorldInfo().isClassicModeEnabled()) {
+			return "random.hurt";
+		} else {
+			return "damage.hurtflesh";
+		}
+	}
+
+	protected String getDeathSound() {
+		if (this.worldObj.getWorldInfo().isClassicModeEnabled()) {
+			return "random.hurt";
+		} else {
+			return "damage.hurtflesh";
+		}
 	}
 }
--- net/minecraft/src/RenderGlobal.java
+++ net/minecraft/src/RenderGlobal.java
@@ -900,6 +900,7 @@
 		float var4 = 12.0F;
 		float var5 = 4.0F;
 		double var6 = (double)((float)this.cloudOffsetX + var1);
+//		double var6 = 0.0D;
 		double var8 = (this.mc.renderViewEntity.prevPosX + (this.mc.renderViewEntity.posX - this.mc.renderViewEntity.prevPosX) * (double)var1 + var6 * (double)0.03F) / (double)var4;
 		double var10 = (this.mc.renderViewEntity.prevPosZ + (this.mc.renderViewEntity.posZ - this.mc.renderViewEntity.prevPosZ) * (double)var1) / (double)var4 + (double)0.33F;
 		float var12 = this.worldObj.worldProvider.getCloudHeight() - var2 + 0.33F;
@@ -1581,7 +1582,7 @@
 			this.worldObj.playSoundEffect((double)var3 + 0.5D, (double)var4 + 0.5D, (double)var5 + 0.5D, "mob.ghast.fireball", 10.0F, (var7.nextFloat() - var7.nextFloat()) * 0.2F + 1.0F);
 			break;
 		case 1010:
-			this.worldObj.playSoundEffect((double)var3 + 0.5D, (double)var4 + 0.5D, (double)var5 + 0.5D, "mob.zombie.wood", 2.0F, (var7.nextFloat() - var7.nextFloat()) * 0.2F + 1.0F);
+			this.worldObj.playSoundEffect((double)var3 + 0.5D, (double)var4 + 0.5D, (double)var5 + 0.5D, "mob.zombie.wood", 1.0F, (var7.nextFloat() - var7.nextFloat()) * 0.2F + 1.0F);
 			break;
 		case 1011:
 			this.worldObj.playSoundEffect((double)var3 + 0.5D, (double)var4 + 0.5D, (double)var5 + 0.5D, "mob.zombie.metal", 2.0F, (var7.nextFloat() - var7.nextFloat()) * 0.2F + 1.0F);
--- net/minecraft/src/FurnaceRecipes.java
+++ net/minecraft/src/FurnaceRecipes.java
@@ -19,6 +19,8 @@
 		this.addSmelting(Item.porkRaw.shiftedIndex, new ItemStack(Item.porkCooked));
 		this.addSmelting(Item.beefRaw.shiftedIndex, new ItemStack(Item.beefCooked));
 		this.addSmelting(Item.chickenRaw.shiftedIndex, new ItemStack(Item.chickenCooked));
+		this.addSmelting(Item.muttonRaw.shiftedIndex, new ItemStack(Item.muttonCooked));
+		this.addSmelting(Item.pigmanFlesh.shiftedIndex, new ItemStack(Item.porkCooked));
 		this.addSmelting(Item.fishRaw.shiftedIndex, new ItemStack(Item.fishCooked));
 		this.addSmelting(Block.cobblestone.blockID, new ItemStack(Block.stone));
 		this.addSmelting(Item.clay.shiftedIndex, new ItemStack(Item.brick));
--- /dev/null
+++ net/minecraft/src/WorldGenPalmtree.java
@@ -1,0 +1,52 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenPalmtree extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int ground = var1.getBlockId(var3, var4 - 1, var5);
+		if (ground != Block.grass.blockID && ground != Block.sand.blockID) {
+			return false;
+		}
+
+		int height = var2.nextInt(3) + 3;
+		int height2 = var2.nextInt(2) + 1;
+		int height3 = var2.nextInt(2);
+		int heightTotal = height + height2 + height3;
+
+		{
+			int dir = var2.nextInt(4);
+			int dirX = dir == 0 ? 1 : dir == 2 ? -1 : 0;
+			int dirZ = dir == 1 ? 1 : dir == 3 ? -1 : 0;
+
+			for (int y = 0; y < heightTotal; y++) {
+				if (y == height || y == height + height2) {
+					var3 += dirX;
+					var5 += dirZ;
+				}
+				this.setBlockAndMetadata(var1, var3, var4 + y, var5, Block.wood.blockID, 3);
+			}
+		}
+
+		var4 += heightTotal;
+		if (var1.isAirBlock(var3, var4, var5)) {
+			this.setBlockAndMetadata(var1, var3, var4, var5, Block.leaves.blockID, 3);
+		}
+
+		for (int dir = 0; dir < 4; dir++) {
+			int dirX = dir == 0 ? 1 : dir == 2 ? -1 : 0;
+			int dirZ = dir == 1 ? 1 : dir == 3 ? -1 : 0;
+
+			for (int i = 1; i < 4; i++) {
+				if (i <= 2 && var1.isAirBlock(var3 + dirX * i, var4, var5 + dirZ * i)) {
+					this.setBlockAndMetadata(var1, var3 + dirX * i, var4, var5 + dirZ * i, Block.leaves.blockID, 3);
+				}
+				if (i >= 2 && var1.isAirBlock(var3 + dirX * i, var4 - 1, var5 + dirZ * i)) {
+					this.setBlockAndMetadata(var1, var3 + dirX * i, var4 - 1, var5 + dirZ * i, Block.leaves.blockID, 3);
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/BlockStep.java
+++ net/minecraft/src/BlockStep.java
@@ -4,11 +4,10 @@
 import java.util.Random;
 
 public class BlockStep extends Block {
-	public static final String[] blockStepTypes = new String[]{"stone", "sand", "wood", "cobble", "brick", "smoothStoneBrick"};
 	private boolean blockType;
 
-	public BlockStep(int var1, boolean var2) {
-		super(var1, 6, Material.rock);
+	public BlockStep(int var1, boolean var2, Material var3) {
+		super(var1, 6, var3);
 		this.blockType = var2;
 		if(!var2) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
@@ -47,11 +46,6 @@
 		super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
 	}
 
-	public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-		int var3 = var2 & 7;
-		return var3 == 0 ? (var1 <= 1 ? 6 : 5) : (var3 == 1 ? (var1 == 0 ? 208 : (var1 == 1 ? 176 : 192)) : (var3 == 2 ? 4 : (var3 == 3 ? 16 : (var3 == 4 ? Block.brick.blockIndexInTexture : (var3 == 5 ? Block.stoneBrick.blockIndexInTexture : 6)))));
-	}
-
 	public int getBlockTextureFromSide(int var1) {
 		return this.getBlockTextureFromSideAndMetadata(var1, 0);
 	}
@@ -68,10 +62,6 @@
 
 	}
 
-	public int idDropped(int var1, Random var2, int var3) {
-		return Block.stairSingle.blockID;
-	}
-
 	public int quantityDropped(Random var1) {
 		return this.blockType ? 2 : 1;
 	}
@@ -98,9 +88,5 @@
 			boolean var9 = (var1.getBlockMetadata(var6, var7, var8) & 8) != 0;
 			return !var9 ? (var5 == 1 ? true : (var5 == 0 && super.shouldSideBeRendered(var1, var2, var3, var4, var5) ? true : var1.getBlockId(var2, var3, var4) != this.blockID || (var1.getBlockMetadata(var2, var3, var4) & 8) != 0)) : (var5 == 0 ? true : (var5 == 1 && super.shouldSideBeRendered(var1, var2, var3, var4, var5) ? true : var1.getBlockId(var2, var3, var4) != this.blockID || (var1.getBlockMetadata(var2, var3, var4) & 8) == 0));
 		}
-	}
-
-	protected ItemStack createStackedBlock(int var1) {
-		return new ItemStack(Block.stairSingle.blockID, 1, var1 & 7);
 	}
 }
--- net/minecraft/src/ScreenShotHelper.java
+++ net/minecraft/src/ScreenShotHelper.java
@@ -24,7 +24,7 @@
 		try {
 			File var4 = new File(var0, "screenshots");
 			var4.mkdir();
-			if(buffer == null || buffer.capacity() < var2 * var3) {
+			if(buffer == null || buffer.capacity() < var2 * var3 * 3) {
 				buffer = BufferUtils.createByteBuffer(var2 * var3 * 3);
 			}
 
--- net/minecraft/src/BiomeGenBase.java
+++ net/minecraft/src/BiomeGenBase.java
@@ -7,29 +7,222 @@
 
 public abstract class BiomeGenBase {
 	public static final BiomeGenBase[] biomeList = new BiomeGenBase[256];
-	public static final BiomeGenBase ocean = (new BiomeGenOcean(0)).setColor(112).setBiomeName("Ocean").setMinMaxHeight(-1.0F, 0.4F);
-	public static final BiomeGenBase plains = (new BiomeGenPlains(1)).setColor(9286496).setBiomeName("Plains").setTemperatureRainfall(0.8F, 0.4F);
-	public static final BiomeGenBase desert = (new BiomeGenDesert(2)).setColor(16421912).setBiomeName("Desert").setDisableRain().setTemperatureRainfall(2.0F, 0.0F).setMinMaxHeight(0.1F, 0.2F);
-	public static final BiomeGenBase extremeHills = (new BiomeGenHills(3)).setColor(6316128).setBiomeName("Extreme Hills").setMinMaxHeight(0.2F, 1.3F).setTemperatureRainfall(0.2F, 0.3F);
-	public static final BiomeGenBase forest = (new BiomeGenForest(4)).setColor(353825).setBiomeName("Forest").func_4124_a(5159473).setTemperatureRainfall(0.7F, 0.8F);
-	public static final BiomeGenBase taiga = (new BiomeGenTaiga(5)).setColor(747097).setBiomeName("Taiga").func_4124_a(5159473).func_50086_b().setTemperatureRainfall(0.05F, 0.8F).setMinMaxHeight(0.1F, 0.4F);
-	public static final BiomeGenBase swampland = (new BiomeGenSwamp(6)).setColor(522674).setBiomeName("Swampland").func_4124_a(9154376).setMinMaxHeight(-0.2F, 0.1F).setTemperatureRainfall(0.8F, 0.9F);
-	public static final BiomeGenBase river = (new BiomeGenRiver(7)).setColor(255).setBiomeName("River").setMinMaxHeight(-0.5F, 0.0F);
-	public static final BiomeGenBase hell = (new BiomeGenHell(8)).setColor(16711680).setBiomeName("Hell").setDisableRain().setTemperatureRainfall(2.0F, 0.0F);
-	public static final BiomeGenBase sky = (new BiomeGenEnd(9)).setColor(8421631).setBiomeName("Sky").setDisableRain();
-	public static final BiomeGenBase frozenOcean = (new BiomeGenOcean(10)).setColor(9474208).setBiomeName("FrozenOcean").func_50086_b().setMinMaxHeight(-1.0F, 0.5F).setTemperatureRainfall(0.0F, 0.5F);
-	public static final BiomeGenBase frozenRiver = (new BiomeGenRiver(11)).setColor(10526975).setBiomeName("FrozenRiver").func_50086_b().setMinMaxHeight(-0.5F, 0.0F).setTemperatureRainfall(0.0F, 0.5F);
-	public static final BiomeGenBase icePlains = (new BiomeGenSnow(12)).setColor(16777215).setBiomeName("Ice Plains").func_50086_b().setTemperatureRainfall(0.0F, 0.5F);
-	public static final BiomeGenBase iceMountains = (new BiomeGenSnow(13)).setColor(10526880).setBiomeName("Ice Mountains").func_50086_b().setMinMaxHeight(0.2F, 1.2F).setTemperatureRainfall(0.0F, 0.5F);
-	public static final BiomeGenBase mushroomIsland = (new BiomeGenMushroomIsland(14)).setColor(16711935).setBiomeName("MushroomIsland").setTemperatureRainfall(0.9F, 1.0F).setMinMaxHeight(0.2F, 1.0F);
-	public static final BiomeGenBase mushroomIslandShore = (new BiomeGenMushroomIsland(15)).setColor(10486015).setBiomeName("MushroomIslandShore").setTemperatureRainfall(0.9F, 1.0F).setMinMaxHeight(-1.0F, 0.1F);
-	public static final BiomeGenBase beach = (new BiomeGenBeach(16)).setColor(16440917).setBiomeName("Beach").setTemperatureRainfall(0.8F, 0.4F).setMinMaxHeight(0.0F, 0.1F);
-	public static final BiomeGenBase desertHills = (new BiomeGenDesert(17)).setColor(13786898).setBiomeName("DesertHills").setDisableRain().setTemperatureRainfall(2.0F, 0.0F).setMinMaxHeight(0.2F, 0.7F);
-	public static final BiomeGenBase forestHills = (new BiomeGenForest(18)).setColor(2250012).setBiomeName("ForestHills").func_4124_a(5159473).setTemperatureRainfall(0.7F, 0.8F).setMinMaxHeight(0.2F, 0.6F);
-	public static final BiomeGenBase taigaHills = (new BiomeGenTaiga(19)).setColor(1456435).setBiomeName("TaigaHills").func_50086_b().func_4124_a(5159473).setTemperatureRainfall(0.05F, 0.8F).setMinMaxHeight(0.2F, 0.7F);
-	public static final BiomeGenBase extremeHillsEdge = (new BiomeGenHills(20)).setColor(7501978).setBiomeName("Extreme Hills Edge").setMinMaxHeight(0.2F, 0.8F).setTemperatureRainfall(0.2F, 0.3F);
-	public static final BiomeGenBase jungle = (new BiomeGenJungle(21)).setColor(5470985).setBiomeName("Jungle").func_4124_a(5470985).setTemperatureRainfall(1.2F, 0.9F).setMinMaxHeight(0.2F, 0.4F);
-	public static final BiomeGenBase jungleHills = (new BiomeGenJungle(22)).setColor(2900485).setBiomeName("JungleHills").func_4124_a(5470985).setTemperatureRainfall(1.2F, 0.9F).setMinMaxHeight(1.8F, 0.2F);
+	public static final boolean[] oceanList = new boolean[256];
+
+	// Beta 1.8
+	public static final BiomeGenBase ocean = new BiomeGenOcean(0)
+			.setBiomeName("Ocean")
+			.setTemperatureRainfall(0.5F, 0.5F)
+			.setMinMaxHeight(-1.0F, 0.4F)
+			.setOcean();
+	public static final BiomeGenBase plains = new BiomeGenPlains(1)
+			.setBiomeName("Plains")
+			.setTemperatureRainfall(0.8F, 0.5F)
+			.setMinMaxHeight(0.1F, 0.3F);
+	public static final BiomeGenBase desert = new BiomeGenDesert(2)
+			.setBiomeName("Desert")
+			.setTemperatureRainfall(2.0F, 0.0F)
+			.setMinMaxHeight(0.1F, 0.3F)
+			.setDisableRain();
+	public static final BiomeGenBase extremeHills = new BiomeGenHills(3)
+			.setBiomeName("Extreme Hills")
+			.setTemperatureRainfall(1.2F, 0.3F)
+			.setMinMaxHeight(0.3F, 1.8F);
+	public static final BiomeGenBase forest = new BiomeGenForest(4)
+			.setBiomeName("Forest")
+			.setTemperatureRainfall(0.8F, 0.8F)
+			.setMinMaxHeight(0.0F, 0.5F);
+	public static final BiomeGenBase snowyTaiga = new BiomeGenTaiga(5)
+			.setBiomeName("Snowy Taiga")
+			.setTemperatureRainfall(0.0F, 0.8F)
+			.setMinMaxHeight(0.1F, 0.5F)
+			.setEnableSnow();
+	public static final BiomeGenBase swampland = new BiomeGenSwamp(6)
+			.setBiomeName("Swampland")
+			.setTemperatureRainfall(0.8F, 0.9F)
+			.setMinMaxHeight(-0.2F, 0.2F);
+	public static final BiomeGenBase river = new BiomeGenRiver(7)
+			.setBiomeName("River")
+			.setTemperatureRainfall(0.5F, 0.5F)
+			.setMinMaxHeight(-1.0F, 0.0F);
+	public static final BiomeGenBase hell = new BiomeGenHell(8)
+			.setBiomeName("Nether")
+			.setTemperatureRainfall(2.0F, 0.0F)
+			.setDisableRain();
+	public static final BiomeGenBase sky = new BiomeGenEnd(9)
+			.setBiomeName("The End")
+			.setDisableRain();
+	// 1.0.0
+	public static final BiomeGenBase frozenOcean = new BiomeGenOcean(10)
+			.setBiomeName("Frozen Ocean")
+			.setTemperatureRainfall(0.0F, 0.5F)
+			.setMinMaxHeight(-1.0F, 0.4F)
+			.setEnableSnow()
+			.setOcean();
+	public static final BiomeGenBase frozenRiver = new BiomeGenRiver(11)
+			.setBiomeName("Frozen River")
+			.setTemperatureRainfall(0.0F, 0.5F)
+			.setMinMaxHeight(-1.0F, 0.0F)
+			.setEnableSnow();
+	public static final BiomeGenBase icePlains = new BiomeGenSnow(12)
+			.setBiomeName("Ice Plains")
+			.setTemperatureRainfall(0.0F, 0.5F)
+			.setMinMaxHeight(0.1F, 0.3F)
+			.setEnableSnow();
+	public static final BiomeGenBase iceMountains = new BiomeGenSnow(13)
+			.setBiomeName("Ice Mountains")
+			.setTemperatureRainfall(0.0F, 0.5F)
+			.setMinMaxHeight(0.2F, 1.2F)
+			.setEnableSnow();
+	public static final BiomeGenBase mushroomIsland = new BiomeGenMushroomIsland(14)
+			.setBiomeName("Mushroom Island")
+			.setTemperatureRainfall(0.9F, 1.0F)
+			.setMinMaxHeight(0.2F, 1.0F);
+	public static final BiomeGenBase mushroomIslandShore = new BiomeGenMushroomIsland(15)
+			.setBiomeName("Mushroom Island Shore")
+			.setTemperatureRainfall(0.9F, 1.0F)
+			.setMinMaxHeight(-1.0F, 0.1F)
+			.setOcean();
+	// 1.1
+	public static final BiomeGenBase beach = new BiomeGenBeach(16)
+			.setBiomeName("Beach")
+			.setTemperatureRainfall(0.8F, 0.4F)
+			.setMinMaxHeight(0.0F, 0.1F);
+	public static final BiomeGenBase desertHills = new BiomeGenDesert(17)
+			.setBiomeName("Desert Hills")
+			.setTemperatureRainfall(2.0F, 0.0F)
+			.setMinMaxHeight(0.2F, 0.8F)
+			.setDisableRain();
+	public static final BiomeGenBase forestHills = new BiomeGenForest(18)
+			.setBiomeName("Forest Hills")
+			.setTemperatureRainfall(0.8F, 0.8F)
+			.setMinMaxHeight(0.2F, 1.0F);
+	public static final BiomeGenBase snowyTaigaHills = new BiomeGenTaiga(19)
+			.setBiomeName("Snowy Taiga Hills")
+			.setTemperatureRainfall(0.0F, 0.8F)
+			.setMinMaxHeight(0.2F, 0.8F)
+			.setEnableSnow();
+	public static final BiomeGenBase extremeHillsEdge = new BiomeGenHills(20)
+			.setBiomeName("Extreme Hills Edge")
+			.setTemperatureRainfall(1.2F, 0.3F)
+			.setMinMaxHeight(0.1F, 1.0F);
+	// 1.2.1
+	public static final BiomeGenBase jungle = new BiomeGenJungle(21)
+			.setBiomeName("Jungle")
+			.setTemperatureRainfall(1.2F, 0.9F)
+			.setMinMaxHeight(0.0F, 1.0F);
+	public static final BiomeGenBase jungleHills = new BiomeGenJungle(22)
+			.setBiomeName("Jungle Hills")
+			.setTemperatureRainfall(1.2F, 0.9F)
+			.setMinMaxHeight(1.5F, 0.5F);
+	// aa1.0
+	public static final BiomeGenBase highlands = new BiomeGenHighlands(23)
+			.setBiomeName("Highlands")
+			.setTemperatureRainfall(0.5F, 0.5F)
+			.setMinMaxHeight(1.8F, 0.8F);
+	public static final BiomeGenBase highlandsEdge = new BiomeGenHighlands(24)
+			.setBiomeName("Highlands Edge")
+			.setTemperatureRainfall(0.5F, 0.5F)
+			.setMinMaxHeight(1.0F, 0.6F);
+	public static final BiomeGenBase seaCrags = new BiomeGenCrags(25)
+			.setBiomeName("Sea Crags")
+			.setTemperatureRainfall(0.5F, 0.5F)
+			.setMinMaxHeight(-1.0F, 0.4F)
+			.setOcean();
+	public static final BiomeGenBase archipelago = new BiomeGenArchipelago(26)
+			.setBiomeName("Archipelago")
+			.setTemperatureRainfall(0.8F, 0.9F)
+			.setMinMaxHeight(-0.5F, 0.3F)
+			.setOcean();
+	// aa1.1
+	public static final BiomeGenBase rainforest = new BiomeGenRainforest(27)
+			.setBiomeName("Rainforest")
+			.setTemperatureRainfall(1.2F, 0.9F)
+			.setMinMaxHeight(0.0F, 1.0F);
+	public static final BiomeGenBase taiga = new BiomeGenTaiga(28)
+			.setBiomeName("Taiga")
+			.setTemperatureRainfall(0.3F, 0.8F)
+			.setMinMaxHeight(0.1F, 0.5F);
+	public static final BiomeGenBase taigaHills = new BiomeGenTaiga(29)
+			.setBiomeName("Taiga Hills")
+			.setTemperatureRainfall(0.3F, 0.8F)
+			.setMinMaxHeight(0.2F, 0.8F);
+	public static final BiomeGenBase frozenBeach = new BiomeGenBeach(30)
+			.setBiomeName("Frozen Beach")
+			.setTemperatureRainfall(0.0F, 0.5F)
+			.setMinMaxHeight(0.0F, 0.1F)
+			.setEnableSnow();
+	public static final BiomeGenBase frostyHighlands = new BiomeGenHighlands(31)
+			.setBiomeName("Frosty Highlands")
+			.setTemperatureRainfall(0.0F, 0.1F)
+			.setMinMaxHeight(1.8F, 0.8F)
+			.setEnableSnow();
+	public static final BiomeGenBase frostyHighlandsEdge = new BiomeGenHighlands(32)
+			.setBiomeName("Frosty Highlands Edge")
+			.setTemperatureRainfall(0.0F, 0.1F)
+			.setMinMaxHeight(1.0F, 0.6F)
+			.setEnableSnow();
+	public static final BiomeGenBase gravelBeach = new BiomeGenGravelBeach(33)
+			.setBiomeName("Gravel Beach")
+			.setTemperatureRainfall(0.8F, 0.4F)
+			.setMinMaxHeight(0.0F, 0.1F);
+	public static final BiomeGenBase windsweptCrags = new BiomeGenWindsweptCrags(34)
+			.setBiomeName("Windswept Crags")
+			.setTemperatureRainfall(0.2F, 0.3F)
+			.setMinMaxHeight(0.5F, 2.5F);
+	public static final BiomeGenBase windsweptCragsEdge = new BiomeGenWindsweptCrags(35)
+			.setBiomeName("Windswept Crags Edge")
+			.setTemperatureRainfall(0.2F, 0.3F)
+			.setMinMaxHeight(0.5F, 1.0F);
+	public static final BiomeGenBase shrubland = new BiomeGenShrubland(36)
+			.setBiomeName("Shrubland")
+			.setTemperatureRainfall(0.8F, 0.6F)
+			.setMinMaxHeight(0.1F, 0.5F);
+	public static final BiomeGenBase savanna = new BiomeGenPlains(37)
+			.setBiomeName("Savanna")
+			.setTemperatureRainfall(1.2F, 0.0F)
+			.setMinMaxHeight(0.1F, 0.5F);
+	public static final BiomeGenBase savannaHills = new BiomeGenPlains(38)
+			.setBiomeName("Savanna Hills")
+			.setTemperatureRainfall(1.2F, 0.0F)
+			.setMinMaxHeight(1.5F, 0.3F);
+
+	static {
+		plains.hillsVariant = forest;
+		desert.hillsVariant = desertHills;
+		forest.hillsVariant = forestHills;
+		snowyTaiga.hillsVariant = snowyTaigaHills;
+		icePlains.hillsVariant = iceMountains;
+		jungle.hillsVariant = jungleHills;
+		taiga.hillsVariant = taigaHills;
+		savanna.hillsVariant = savannaHills;
+
+		extremeHills.edgeVariant = extremeHillsEdge;
+		highlands.edgeVariant = highlandsEdge;
+		frostyHighlands.edgeVariant = frostyHighlandsEdge;
+		windsweptCrags.edgeVariant = windsweptCragsEdge;
+
+		extremeHills.snowyVariant = iceMountains;
+		extremeHillsEdge.snowyVariant = iceMountains;
+		forest.snowyVariant = snowyTaiga;
+		forestHills.snowyVariant = snowyTaigaHills;
+		taiga.snowyVariant = snowyTaiga;
+		taigaHills.snowyVariant = snowyTaigaHills;
+		highlands.snowyVariant = frostyHighlands;
+		highlandsEdge.snowyVariant = frostyHighlandsEdge;
+
+		plains.strangeVariant = savanna;
+		extremeHills.strangeVariant = windsweptCrags;
+		extremeHillsEdge.strangeVariant = windsweptCragsEdge;
+		swampland.strangeVariant = shrubland;
+		jungle.strangeVariant = rainforest;
+		jungleHills.strangeVariant = rainforest;
+
+		swampland.hasBeach = false;
+		river.hasBeach = false;
+		frozenRiver.hasBeach = false;
+	}
+
 	public String biomeName;
 	public int color;
 	public byte topBlock = (byte)Block.grass.blockID;
@@ -41,6 +234,11 @@
 	public float rainfall = 0.5F;
 	public int waterColorMultiplier = 16777215;
 	public BiomeDecorator biomeDecorator;
+	public BiomeGenBase edgeVariant;
+	public BiomeGenBase hillsVariant;
+	public BiomeGenBase snowyVariant;
+	public BiomeGenBase strangeVariant;
+	public boolean hasBeach = true;
 	protected List spawnableMonsterList = new ArrayList();
 	protected List spawnableCreatureList = new ArrayList();
 	protected List spawnableWaterCreatureList = new ArrayList();
@@ -74,13 +272,9 @@
 	}
 
 	private BiomeGenBase setTemperatureRainfall(float var1, float var2) {
-		if(var1 > 0.1F && var1 < 0.2F) {
-			throw new IllegalArgumentException("Please avoid temperatures in the range 0.1 - 0.2 because of snow");
-		} else {
-			this.temperature = var1;
-			this.rainfall = var2;
-			return this;
-		}
+		this.temperature = var1;
+		this.rainfall = var2;
+		return this;
 	}
 
 	private BiomeGenBase setMinMaxHeight(float var1, float var2) {
@@ -94,6 +288,11 @@
 		return this;
 	}
 
+	private BiomeGenBase setOcean() {
+		oceanList[this.biomeID] = true;
+		return this;
+	}
+
 	public WorldGenerator getRandomWorldGenForTrees(Random var1) {
 		return (WorldGenerator)(var1.nextInt(10) == 0 ? this.worldGenBigTree : this.worldGenTrees);
 	}
@@ -102,7 +301,7 @@
 		return new WorldGenTallGrass(Block.tallGrass.blockID, 1);
 	}
 
-	protected BiomeGenBase func_50086_b() {
+	protected BiomeGenBase setEnableSnow() {
 		this.enableSnow = true;
 		return this;
 	}
@@ -185,5 +384,15 @@
 		double var1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
 		double var3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
 		return ColorizerFoliage.getFoliageColor(var1, var3);
+	}
+
+	public int getBiomeWaterColor() {
+		double var1 = (double)MathHelper.clamp_float(this.getFloatTemperature(), 0.0F, 1.0F);
+		double var3 = (double)MathHelper.clamp_float(this.getFloatRainfall(), 0.0F, 1.0F);
+		return ColorizerWater.getWaterColor(var1, var3);
+	}
+
+	public boolean isOcean() {
+		return oceanList[this.biomeID];
 	}
 }
--- net/minecraft/src/EnumOptions.java
+++ net/minecraft/src/EnumOptions.java
@@ -17,7 +17,9 @@
 	AMBIENT_OCCLUSION("options.ao", false, true),
 	GUI_SCALE("options.guiScale", false, false),
 	RENDER_CLOUDS("options.renderClouds", false, true),
-	PARTICLES("options.particles", false, false);
+	PARTICLES("options.particles", false, false),
+	LIGHT_FIX_SPEED("options.lightFixSpeed", true, false),
+	COLORED_WATER("options.coloredWater", false, true);
 
 	private final boolean enumFloat;
 	private final boolean enumBoolean;
--- net/minecraft/src/WorldType.java
+++ net/minecraft/src/WorldType.java
@@ -4,21 +4,27 @@
 	public static final WorldType[] worldTypes = new WorldType[16];
 	public static final WorldType DEFAULT = (new WorldType(0, "default", 1)).func_48631_f();
 	public static final WorldType FLAT = new WorldType(1, "flat");
+	public static final WorldType LARGE_BIOMES = new WorldType(2, "largeBiomes");
+	public static final WorldType SMALL_BIOMES = new WorldType(3, "smallBiomes");
+	public static final WorldType AMPLIFIED = new WorldType(4, "amplified");
+	public static final WorldTypeSingleBiome SINGLE_BIOME = new WorldTypeSingleBiome(5, "singleBiome");
 	public static final WorldType DEFAULT_1_1 = (new WorldType(8, "default_1_1", 0)).setCanBeCreated(false);
 	private final String worldType;
 	private final int generatorVersion;
 	private boolean canBeCreated;
 	private boolean field_48638_h;
 
-	private WorldType(int var1, String var2) {
+	protected WorldType(int var1, String var2) {
 		this(var1, var2, 0);
 	}
 
-	private WorldType(int var1, String var2, int var3) {
+	protected WorldType(int var1, String var2, int var3) {
 		this.worldType = var2;
 		this.generatorVersion = var3;
 		this.canBeCreated = true;
-		worldTypes[var1] = this;
+		if (var1 >= 0) {
+			worldTypes[var1] = this;
+		}
 	}
 
 	public String func_48628_a() {
@@ -53,6 +59,13 @@
 
 	public boolean func_48626_e() {
 		return this.field_48638_h;
+	}
+
+	public WorldType readData(NBTTagCompound var1) {
+		return this;
+	}
+
+	public void writeData(NBTTagCompound var1) {
 	}
 
 	public static WorldType parseWorldType(String var0) {
--- net/minecraft/src/WorldGenBigTree.java
+++ net/minecraft/src/WorldGenBigTree.java
@@ -335,9 +335,7 @@
 		this.basePos[0] = var3;
 		this.basePos[1] = var4;
 		this.basePos[2] = var5;
-		if(this.heightLimit == 0) {
-			this.heightLimit = 5 + this.rand.nextInt(this.heightLimitLimit);
-		}
+		this.heightLimit = 5 + this.rand.nextInt(this.heightLimitLimit);
 
 		if(!this.validTreeLocation()) {
 			return false;
--- net/minecraft/src/StructureStrongholdStart.java
+++ net/minecraft/src/StructureStrongholdStart.java
@@ -4,8 +4,11 @@
 import java.util.Random;
 
 class StructureStrongholdStart extends StructureStart {
+	private boolean hasPortal;
+
 	public StructureStrongholdStart(World var1, Random var2, int var3, int var4) {
-		StructureStrongholdPieces.prepareStructurePieces();
+		StructureStrongholdPieces.prepareStructurePieces(var2);
+		this.hasPortal = StructureStrongholdPieces.hasPortal();
 		ComponentStrongholdStairs2 var5 = new ComponentStrongholdStairs2(0, var2, (var3 << 4) + 2, (var4 << 4) + 2);
 		this.components.add(var5);
 		var5.buildComponent(var5, this.components, var2);
@@ -18,6 +21,14 @@
 		}
 
 		this.updateBoundingBox();
-		this.markAvailableHeight(var1, var2, 10);
+		int offset = -var2.nextInt(16);
+		this.boundingBox.offset(0, offset, 0);
+		for (Object component : this.components) {
+			((StructureComponent)component).getBoundingBox().offset(0, offset, 0);
+		}
+	}
+
+	public boolean isFindable() {
+		return this.hasPortal;
 	}
 }
--- net/minecraft/src/GuiCreateWorld.java
+++ net/minecraft/src/GuiCreateWorld.java
@@ -10,18 +10,21 @@
 	private String folderName;
 	private String gameMode = "survival";
 	private boolean field_35365_g = true;
-	private boolean field_40232_h = false;
+	private boolean hardcoreEnabled = false;
+	private boolean classicEnabled = false;
 	private boolean createClicked;
 	private boolean moreOptions;
 	private GuiButton gameModeButton;
 	private GuiButton moreWorldOptions;
 	private GuiButton generateStructuresButton;
 	private GuiButton worldTypeButton;
+	private GuiButton customizeButton;
 	private String gameModeDescriptionLine1;
 	private String gameModeDescriptionLine2;
 	private String seed;
 	private String localizedNewWorldText;
 	private int field_46030_z = 0;
+	protected WorldType customWorldType;
 
 	public GuiCreateWorld(GuiScreen var1) {
 		this.parentGuiScreen = var1;
@@ -46,6 +49,9 @@
 		this.generateStructuresButton.drawButton = false;
 		this.controlList.add(this.worldTypeButton = new GuiButton(5, this.width / 2 + 5, 100, 150, 20, var1.translateKey("selectWorld.mapType")));
 		this.worldTypeButton.drawButton = false;
+		this.controlList.add(this.customizeButton = new GuiButton(6, this.width / 2 + 5, 130, 150, 20, var1.translateKey("selectWorld.customize")));
+		this.customizeButton.drawButton = false;
+		this.customizeButton.enabled = false;
 		this.textboxWorldName = new GuiTextField(this.fontRenderer, this.width / 2 - 100, 60, 200, 20);
 		this.textboxWorldName.func_50033_b(true);
 		this.textboxWorldName.setText(this.localizedNewWorldText);
@@ -85,6 +91,13 @@
 		}
 
 		this.worldTypeButton.displayString = var1.translateKey("selectWorld.mapType") + " " + var1.translateKey(WorldType.worldTypes[this.field_46030_z].getTranslateName());
+		this.customizeButton.enabled = WorldType.worldTypes[this.field_46030_z] == WorldType.SINGLE_BIOME;
+
+		this.gameModeButton.drawButton = !this.moreOptions;
+		this.generateStructuresButton.drawButton = this.moreOptions;
+		this.worldTypeButton.drawButton = this.moreOptions;
+		this.customizeButton.drawButton = this.moreOptions;
+		this.moreWorldOptions.displayString = var1.translateKey(this.moreOptions ? "gui.done" : "selectWorld.moreWorldOptions");
 	}
 
 	public static String func_25097_a(ISaveFormat var0, String var1) {
@@ -130,36 +143,33 @@
 					this.mc.playerController = new PlayerControllerSP(this.mc);
 				}
 
-				this.mc.startWorld(this.folderName, this.textboxWorldName.getText(), new WorldSettings(var2, var9, this.field_35365_g, this.field_40232_h, WorldType.worldTypes[this.field_46030_z]));
+				WorldType worldType = this.customWorldType != null ? this.customWorldType : WorldType.worldTypes[this.field_46030_z];
+				this.mc.startWorld(this.folderName, this.textboxWorldName.getText(), new WorldSettings(var2, var9, this.field_35365_g, this.hardcoreEnabled, this.classicEnabled, worldType));
 				this.mc.displayGuiScreen((GuiScreen)null);
 			} else if(var1.id == 3) {
 				this.moreOptions = !this.moreOptions;
-				this.gameModeButton.drawButton = !this.moreOptions;
-				this.generateStructuresButton.drawButton = this.moreOptions;
-				this.worldTypeButton.drawButton = this.moreOptions;
-				StringTranslate var8;
-				if(this.moreOptions) {
-					var8 = StringTranslate.getInstance();
-					this.moreWorldOptions.displayString = var8.translateKey("gui.done");
-				} else {
-					var8 = StringTranslate.getInstance();
-					this.moreWorldOptions.displayString = var8.translateKey("selectWorld.moreWorldOptions");
-				}
+				this.func_35363_g();
 			} else if(var1.id == 2) {
 				if(this.gameMode.equals("survival")) {
-					this.field_40232_h = false;
+					this.hardcoreEnabled = true;
+					this.classicEnabled = false;
 					this.gameMode = "hardcore";
-					this.field_40232_h = true;
 					this.func_35363_g();
 				} else if(this.gameMode.equals("hardcore")) {
-					this.field_40232_h = false;
+					this.hardcoreEnabled = false;
+					this.classicEnabled = true;
+					this.gameMode = "classic";
+					this.func_35363_g();
+				} else if(this.gameMode.equals("classic")) {
+					this.hardcoreEnabled = false;
+					this.classicEnabled = false;
 					this.gameMode = "creative";
 					this.func_35363_g();
-					this.field_40232_h = false;
 				} else {
+					this.hardcoreEnabled = false;
+					this.classicEnabled = false;
 					this.gameMode = "survival";
 					this.func_35363_g();
-					this.field_40232_h = false;
 				}
 
 				this.func_35363_g();
@@ -167,6 +177,8 @@
 				this.field_35365_g = !this.field_35365_g;
 				this.func_35363_g();
 			} else if(var1.id == 5) {
+				this.customWorldType = null;
+
 				++this.field_46030_z;
 				if(this.field_46030_z >= WorldType.worldTypes.length) {
 					this.field_46030_z = 0;
@@ -180,6 +192,10 @@
 				}
 
 				this.func_35363_g();
+			} else if(var1.id == 6) {
+				if (WorldType.worldTypes[this.field_46030_z] == WorldType.SINGLE_BIOME) {
+					this.mc.displayGuiScreen(new GuiCustomizeSingleBiome(this));
+				}
 			}
 
 		}
--- /dev/null
+++ net/minecraft/src/GenLayerRemoveTooMuchOcean.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+public class GenLayerRemoveTooMuchOcean extends GenLayer {
+	public GenLayerRemoveTooMuchOcean(long var1, GenLayer var3) {
+		super(var1);
+		this.parent = var3;
+	}
+
+	public int[] getInts(int var1, int var2, int var3, int var4) {
+		int var5 = var1 - 1;
+        int var6 = var2 - 1;
+        int var7 = var3 + 2;
+        int var8 = var4 + 2;
+        int[] var9 = this.parent.getInts(var5, var6, var7, var8);
+        int[] var10 = IntCache.getIntCache(var3 * var4);
+
+        for (int var11 = 0; var11 < var4; ++var11) {
+            for (int var12 = 0; var12 < var3; ++var12) {
+                int var13 = var9[var12 + 1 + (var11 + 1 - 1) * (var3 + 2)];
+                int var14 = var9[var12 + 1 + 1 + (var11 + 1) * (var3 + 2)];
+                int var15 = var9[var12 + 1 - 1 + (var11 + 1) * (var3 + 2)];
+                int var16 = var9[var12 + 1 + (var11 + 1 + 1) * (var3 + 2)];
+                int var17 = var9[var12 + 1 + (var11 + 1) * var7];
+                var10[var12 + var11 * var3] = var17;
+                this.initChunkSeed((long) (var12 + var1), (long) (var11 + var2));
+
+                if (var17 == 0 && var13 == 0 && var14 == 0 && var15 == 0 && var16 == 0
+                        && this.nextInt(2) == 0) {
+                    var10[var12 + var11 * var3] = 1;
+                }
+            }
+        }
+
+        return var10;
+	}
+}
--- net/minecraft/src/ComponentStrongholdChestCorridor.java
+++ net/minecraft/src/ComponentStrongholdChestCorridor.java
@@ -4,7 +4,7 @@
 import java.util.Random;
 
 public class ComponentStrongholdChestCorridor extends ComponentStronghold {
-	private static final StructurePieceTreasure[] chestLoot = new StructurePieceTreasure[]{new StructurePieceTreasure(Item.enderPearl.shiftedIndex, 0, 1, 1, 10), new StructurePieceTreasure(Item.diamond.shiftedIndex, 0, 1, 3, 3), new StructurePieceTreasure(Item.ingotIron.shiftedIndex, 0, 1, 5, 10), new StructurePieceTreasure(Item.ingotGold.shiftedIndex, 0, 1, 3, 5), new StructurePieceTreasure(Item.redstone.shiftedIndex, 0, 4, 9, 5), new StructurePieceTreasure(Item.bread.shiftedIndex, 0, 1, 3, 15), new StructurePieceTreasure(Item.appleRed.shiftedIndex, 0, 1, 3, 15), new StructurePieceTreasure(Item.pickaxeSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.swordSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.plateSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.helmetSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.legsSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.bootsSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.appleGold.shiftedIndex, 0, 1, 1, 1)};
+	private static final StructurePieceTreasure[] chestLoot = new StructurePieceTreasure[]{new StructurePieceTreasure(Item.enderPearl.shiftedIndex, 0, 1, 1, 10), new StructurePieceTreasure(Item.diamond.shiftedIndex, 0, 1, 3, 3), new StructurePieceTreasure(Item.ingotIron.shiftedIndex, 0, 1, 5, 10), new StructurePieceTreasure(Item.ingotGold.shiftedIndex, 0, 1, 3, 5), new StructurePieceTreasure(Item.redstone.shiftedIndex, 0, 4, 9, 5), new StructurePieceTreasure(Item.bread.shiftedIndex, 0, 1, 3, 15), new StructurePieceTreasure(Item.appleRed.shiftedIndex, 0, 1, 3, 15), new StructurePieceTreasure(Item.pickaxeSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.swordSteel.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.plateChain.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.helmetChain.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.legsChain.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.bootsChain.shiftedIndex, 0, 1, 1, 5), new StructurePieceTreasure(Item.appleGold.shiftedIndex, 0, 1, 1, 1)};
 	private final EnumDoor doorType;
 	private boolean hasMadeChest;
 
--- /dev/null
+++ net/minecraft/src/GuiBiomeSlot.java
@@ -1,0 +1,40 @@
+package net.minecraft.src;
+
+import java.util.Arrays;
+import java.util.Comparator;
+import java.util.List;
+import java.util.stream.Collectors;
+
+public class GuiBiomeSlot extends GuiSlot {
+	private static final List<BiomeGenBase> biomes = Arrays.stream(BiomeGenBase.biomeList)
+			.filter(b -> b != null)
+			.sorted(Comparator.comparing(a -> a.biomeName))
+			.collect(Collectors.toList());
+	protected final GuiCustomizeSingleBiome parentBiomeGui;
+
+	public GuiBiomeSlot(GuiCustomizeSingleBiome var1) {
+		super(var1.mc, var1.width, var1.height, 32, var1.height - 32, 16);
+		this.parentBiomeGui = var1;
+	}
+
+	protected int getSize() {
+		return biomes.size();
+	}
+
+	protected void elementClicked(int var1, boolean var2) {
+		this.parentBiomeGui.selectedBiome = biomes.get(var1).biomeID;
+	}
+
+	protected boolean isSelected(int var1) {
+		return this.parentBiomeGui.selectedBiome == biomes.get(var1).biomeID;
+	}
+
+	protected void drawBackground() {
+		this.parentBiomeGui.drawDefaultBackground();
+	}
+
+	protected void drawSlot(int var1, int var2, int var3, int var4, Tessellator var5) {
+		BiomeGenBase biome = biomes.get(var1);
+		this.parentBiomeGui.drawString(this.parentBiomeGui.fontRenderer, biome.biomeName, var2 + 2, var3 + 2, biome.getBiomeGrassColor());
+	}
+}
--- net/minecraft/src/MovementInputFromOptions.java
+++ net/minecraft/src/MovementInputFromOptions.java
@@ -28,6 +28,7 @@
 
 		this.jump = this.gameSettings.keyBindJump.pressed;
 		this.sneak = this.gameSettings.keyBindSneak.pressed;
+		this.sprint = this.gameSettings.keyBindSprint.pressed;
 		if(this.sneak) {
 			this.moveStrafe = (float)((double)this.moveStrafe * 0.3D);
 			this.moveForward = (float)((double)this.moveForward * 0.3D);
--- net/minecraft/src/GenLayerAddSnow.java
+++ net/minecraft/src/GenLayerAddSnow.java
@@ -16,8 +16,8 @@
 
 		for(int var11 = 0; var11 < var4; ++var11) {
 			for(int var12 = 0; var12 < var3; ++var12) {
-				int var13 = var9[var12 + 1 + (var11 + 1) * var7];
 				this.initChunkSeed((long)(var12 + var1), (long)(var11 + var2));
+				int var13 = var9[var12 + 1 + (var11 + 1) * var7];
 				if(var13 == 0) {
 					var10[var12 + var11 * var3] = 0;
 				} else {
--- net/minecraft/src/Item.java
+++ net/minecraft/src/Item.java
@@ -69,7 +69,7 @@
 	public static Item legsGold = (new ItemArmor(60, EnumArmorMaterial.GOLD, 4, 2)).setIconCoord(4, 2).setItemName("leggingsGold");
 	public static Item bootsGold = (new ItemArmor(61, EnumArmorMaterial.GOLD, 4, 3)).setIconCoord(4, 3).setItemName("bootsGold");
 	public static Item flint = (new Item(62)).setIconCoord(6, 0).setItemName("flint");
-	public static Item porkRaw = (new ItemFood(63, 3, 0.3F, true)).setIconCoord(7, 5).setItemName("porkchopRaw");
+	public static Item porkRaw = (new ItemFood(63, 3, 0.3F, true)).setPotionEffect(Potion.hunger.id, 20, 1, 0.5F).setIconCoord(7, 5).setItemName("porkchopRaw");
 	public static Item porkCooked = (new ItemFood(64, 8, 0.8F, true)).setIconCoord(8, 5).setItemName("porkchopCooked");
 	public static Item painting = (new ItemPainting(65)).setIconCoord(10, 1).setItemName("painting");
 	public static Item appleGold = (new ItemAppleGold(66, 4, 1.2F, false)).setAlwaysEdible().setPotionEffect(Potion.regeneration.id, 5, 0, 1.0F).setIconCoord(11, 0).setItemName("appleGold");
@@ -99,7 +99,7 @@
 	public static Item fishingRod = (new ItemFishingRod(90)).setIconCoord(5, 4).setItemName("fishingRod");
 	public static Item pocketSundial = (new Item(91)).setIconCoord(6, 4).setItemName("clock");
 	public static Item lightStoneDust = (new Item(92)).setIconCoord(9, 4).setItemName("yellowDust").setPotionEffect(PotionHelper.glowstoneEffect);
-	public static Item fishRaw = (new ItemFood(93, 2, 0.3F, false)).setIconCoord(9, 5).setItemName("fishRaw");
+	public static Item fishRaw = (new ItemFood(93, 2, 0.3F, false)).setPotionEffect(Potion.hunger.id, 20, 1, 0.5F).setIconCoord(9, 5).setItemName("fishRaw");
 	public static Item fishCooked = (new ItemFood(94, 5, 0.6F, false)).setIconCoord(10, 5).setItemName("fishCooked");
 	public static Item dyePowder = (new ItemDye(95)).setIconCoord(14, 4).setItemName("dyePowder");
 	public static Item bone = (new Item(96)).setIconCoord(12, 1).setItemName("bone").setFull3D();
@@ -115,9 +115,9 @@
 	public static Item melonSeeds = (new ItemSeeds(106, Block.melonStem.blockID, Block.tilledField.blockID)).setIconCoord(14, 3).setItemName("seeds_melon");
 	public static Item beefRaw = (new ItemFood(107, 3, 0.3F, true)).setIconCoord(9, 6).setItemName("beefRaw");
 	public static Item beefCooked = (new ItemFood(108, 8, 0.8F, true)).setIconCoord(10, 6).setItemName("beefCooked");
-	public static Item chickenRaw = (new ItemFood(109, 2, 0.3F, true)).setPotionEffect(Potion.hunger.id, 30, 0, 0.3F).setIconCoord(9, 7).setItemName("chickenRaw");
+	public static Item chickenRaw = (new ItemFood(109, 2, 0.3F, true)).setPotionEffect(Potion.hunger.id, 20, 1, 0.5F).setIconCoord(9, 7).setItemName("chickenRaw");
 	public static Item chickenCooked = (new ItemFood(110, 6, 0.6F, true)).setIconCoord(10, 7).setItemName("chickenCooked");
-	public static Item rottenFlesh = (new ItemFood(111, 4, 0.1F, true)).setPotionEffect(Potion.hunger.id, 30, 0, 0.8F).setIconCoord(11, 5).setItemName("rottenFlesh");
+	public static Item rottenFlesh = (new ItemFood(111, 4, 0.1F, true)).setPotionEffect(Potion.poison.id, 10, 0, 1.0F).setIconCoord(11, 5).setItemName("rottenFlesh");
 	public static Item enderPearl = (new ItemEnderPearl(112)).setIconCoord(11, 6).setItemName("enderPearl");
 	public static Item blazeRod = (new Item(113)).setIconCoord(12, 6).setItemName("blazeRod");
 	public static Item ghastTear = (new Item(114)).setIconCoord(11, 7).setItemName("ghastTear").setPotionEffect(PotionHelper.ghastTearEffect);
@@ -136,6 +136,9 @@
 	public static Item monsterPlacer = (new ItemMonsterPlacer(127)).setIconCoord(9, 9).setItemName("monsterPlacer");
 	public static Item expBottle = (new ItemExpBottle(128)).setIconCoord(11, 10).setItemName("expBottle");
 	public static Item fireballCharge = (new ItemFireball(129)).setIconCoord(14, 2).setItemName("fireball");
+	public static Item muttonRaw = (new ItemFood(130, 2, 0.3F, true)).setIconCoord(7, 7).setItemName("muttonRaw");
+	public static Item muttonCooked = (new ItemFood(131, 6, 0.6F, true)).setIconCoord(8, 7).setItemName("muttonCooked");
+	public static Item pigmanFlesh = (new ItemFood(132, 6, 0.1F, true)).setPotionEffect(Potion.hunger.id, 20, 2, 1.0F).setIconCoord(6, 6).setItemName("pigmanFlesh");
 	public static Item record13 = (new ItemRecord(2000, "13")).setIconCoord(0, 15).setItemName("record");
 	public static Item recordCat = (new ItemRecord(2001, "cat")).setIconCoord(1, 15).setItemName("record");
 	public static Item recordBlocks = (new ItemRecord(2002, "blocks")).setIconCoord(2, 15).setItemName("record");
@@ -394,6 +397,26 @@
 
 	public int func_46057_a(int var1, int var2) {
 		return this.getIconFromDamage(var1);
+	}
+
+	public static void enableClassicTweaks() {
+		for (Item item : itemsList) {
+			if (item != null)
+				item.setClassicTweaks();
+		}
+	}
+
+	public static void disableClassicTweaks() {
+		for (Item item : itemsList) {
+			if (item != null)
+				item.unsetClassicTweaks();
+		}
+	}
+
+	protected void setClassicTweaks() {
+	}
+
+	protected void unsetClassicTweaks() {
 	}
 
 	static {
--- net/minecraft/src/EntityExpBottle.java
+++ net/minecraft/src/EntityExpBottle.java
@@ -27,8 +27,19 @@
 
 	protected void onImpact(MovingObjectPosition var1) {
 		if(!this.worldObj.isRemote) {
+			if (this.worldObj.worldInfo.isClassicModeEnabled()) {
+			this.worldObj.playAuxSFX(2001, (int)Math.round(this.posX), (int)Math.round(this.posY), (int)Math.round(this.posZ), Block.glass.blockID);
+				this.worldObj.playSoundAtEntity(this, "random.break", 1.0F, 0.8F + this.worldObj.rand.nextFloat() * 0.4F);
+				this.setDead();
+				return;
+			}
+
 			this.worldObj.playAuxSFX(2002, (int)Math.round(this.posX), (int)Math.round(this.posY), (int)Math.round(this.posZ), 0);
-			int var2 = 3 + this.worldObj.rand.nextInt(5) + this.worldObj.rand.nextInt(5);
+
+			int var2 = 1 + this.worldObj.rand.nextInt(5) + this.worldObj.rand.nextInt(5);
+			if (this.worldObj.worldInfo.isHardcoreModeEnabled()) {
+				var2 *= 2;
+			}
 
 			while(var2 > 0) {
 				int var3 = EntityXPOrb.getXPSplit(var2);
--- net/minecraft/src/BiomeCacheBlock.java
+++ net/minecraft/src/BiomeCacheBlock.java
@@ -24,4 +24,12 @@
 	public BiomeGenBase getBiomeGenAt(int var1, int var2) {
 		return this.biomes[var1 & 15 | (var2 & 15) << 4];
 	}
+
+	public float getTemperatureAt(int var1, int var2) {
+		return this.temperatureValues[var1 & 15 | (var2 & 15) << 4];
+	}
+
+	public float getRainfallAt(int var1, int var2) {
+		return this.rainfallValues[var1 & 15 | (var2 & 15) << 4];
+	}
 }
--- net/minecraft/src/MapGenStructure.java
+++ net/minecraft/src/MapGenStructure.java
@@ -86,7 +86,7 @@
 		double var23;
 		while(var16.hasNext()) {
 			StructureStart var17 = (StructureStart)var16.next();
-			if(var17.isSizeableStructure()) {
+			if(var17.isFindable() && var17.isSizeableStructure()) {
 				StructureComponent var18 = (StructureComponent)var17.getComponents().get(0);
 				var19 = var18.getCenter();
 				var20 = var19.x - var2;
--- net/minecraft/src/SaveFormatComparator.java
+++ net/minecraft/src/SaveFormatComparator.java
@@ -8,8 +8,9 @@
 	private final boolean requiresConversion;
 	private final int gameType;
 	private final boolean hardcore;
+	private final boolean classic;
 
-	public SaveFormatComparator(String var1, String var2, long var3, long var5, int var7, boolean var8, boolean var9) {
+	public SaveFormatComparator(String var1, String var2, long var3, long var5, int var7, boolean var8, boolean var9, boolean var10) {
 		this.fileName = var1;
 		this.displayName = var2;
 		this.lastTimePlayed = var3;
@@ -17,6 +18,7 @@
 		this.gameType = var7;
 		this.requiresConversion = var8;
 		this.hardcore = var9;
+		this.classic = var10;
 	}
 
 	public String getFileName() {
@@ -45,6 +47,10 @@
 
 	public boolean isHardcoreModeEnabled() {
 		return this.hardcore;
+	}
+
+	public boolean isClassicModeEnabled() {
+		return this.classic;
 	}
 
 	public int compareTo(Object var1) {
--- /dev/null
+++ net/minecraft/src/WorldGenCrags.java
@@ -1,0 +1,35 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenCrags extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		int height = var2.nextInt(12) + 4;
+		int radius = var2.nextInt(6) + 2;
+		float radiusSquare = radius * radius;
+
+		for (int x = -radius; x <= radius; x++) {
+			for (int z = -radius; z <= radius; z++) {
+				float distSquare = x * x + z * z;
+				float slope = 1 - distSquare / radiusSquare;
+
+				if (slope < 0) continue;
+				if (slope > 1) slope = 1;
+
+				slope *= slope;
+				int intSlope = (int) (slope * height);
+
+				int ground = var1.getTopSolidOrLiquidBlock(x + var3, z + var5);
+				if (intSlope > 0 && var1.getBlockId(x + var3, ground - 1, z + var5) == Block.grass.blockID) {
+					this.setBlockAndMetadata(var1, x + var3, ground - 1, z + var5, Block.dirt.blockID, 0);
+				}
+
+				for (int y = 0; y < intSlope; y++) {
+					this.setBlockAndMetadata(var1, x + var3, y + ground, z + var5, Block.stone.blockID, 0);
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/ItemRenderer.java
+++ net/minecraft/src/ItemRenderer.java
@@ -401,7 +401,7 @@
 			this.renderFireInFirstPerson(var1);
 		}
 
-		if(this.mc.thePlayer.isEntityInsideOpaqueBlock()) {
+		if(this.mc.thePlayer.isEntityInsideOpaqueBlock() && !this.mc.thePlayer.noClip) {
 			var2 = MathHelper.floor_double(this.mc.thePlayer.posX);
 			int var3 = MathHelper.floor_double(this.mc.thePlayer.posY);
 			int var4 = MathHelper.floor_double(this.mc.thePlayer.posZ);
--- net/minecraft/src/ContainerCreative.java
+++ net/minecraft/src/ContainerCreative.java
@@ -8,7 +8,7 @@
 	public List itemList = new ArrayList();
 
 	public ContainerCreative(EntityPlayer var1) {
-		Block[] var2 = new Block[]{Block.cobblestone, Block.stone, Block.oreDiamond, Block.oreGold, Block.oreIron, Block.oreCoal, Block.oreLapis, Block.oreRedstone, Block.stoneBrick, Block.stoneBrick, Block.stoneBrick, Block.stoneBrick, Block.blockClay, Block.blockDiamond, Block.blockGold, Block.blockSteel, Block.bedrock, Block.blockLapis, Block.brick, Block.cobblestoneMossy, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.obsidian, Block.netherrack, Block.slowSand, Block.glowStone, Block.wood, Block.wood, Block.wood, Block.wood, Block.leaves, Block.leaves, Block.leaves, Block.leaves, Block.dirt, Block.grass, Block.sand, Block.sandStone, Block.sandStone, Block.sandStone, Block.gravel, Block.web, Block.planks, Block.planks, Block.planks, Block.planks, Block.sapling, Block.sapling, Block.sapling, Block.sapling, Block.deadBush, Block.sponge, Block.ice, Block.blockSnow, Block.plantYellow, Block.plantRed, Block.mushroomBrown, Block.mushroomRed, Block.cactus, Block.melon, Block.pumpkin, Block.pumpkinLantern, Block.vine, Block.fenceIron, Block.thinGlass, Block.netherBrick, Block.netherFence, Block.stairsNetherBrick, Block.whiteStone, Block.mycelium, Block.waterlily, Block.tallGrass, Block.tallGrass, Block.chest, Block.workbench, Block.glass, Block.tnt, Block.bookShelf, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.dispenser, Block.stoneOvenIdle, Block.music, Block.jukebox, Block.pistonStickyBase, Block.pistonBase, Block.fence, Block.fenceGate, Block.ladder, Block.rail, Block.railPowered, Block.railDetector, Block.torchWood, Block.stairCompactPlanks, Block.stairCompactCobblestone, Block.stairsBrick, Block.stairsStoneBrickSmooth, Block.lever, Block.pressurePlateStone, Block.pressurePlatePlanks, Block.torchRedstoneActive, Block.button, Block.trapdoor, Block.enchantmentTable, Block.redstoneLampIdle};
+		Block[] var2 = new Block[]{Block.cobblestone, Block.stone, Block.oreDiamond, Block.oreGold, Block.oreIron, Block.oreCoal, Block.oreLapis, Block.oreRedstone, Block.stoneBrick, Block.stoneBrick, Block.stoneBrick, Block.stoneBrick, Block.blockClay, Block.blockDiamond, Block.blockGold, Block.blockSteel, Block.bedrock, Block.blockLapis, Block.brick, Block.cobblestoneMossy, Block.stairSingle, Block.stairSingle, Block.woodStairSingle, Block.woodStairSingle, Block.woodStairSingle, Block.woodStairSingle, Block.stairSingle, Block.stairSingle, Block.stairSingle, Block.obsidian, Block.netherrack, Block.slowSand, Block.glowStone, Block.wood, Block.wood, Block.wood, Block.wood, Block.leaves, Block.leaves, Block.leaves, Block.leaves, Block.dirt, Block.grass, Block.sand, Block.sandStone, Block.sandStone, Block.sandStone, Block.gravel, Block.web, Block.planks, Block.planks, Block.planks, Block.planks, Block.sapling, Block.sapling, Block.sapling, Block.sapling, Block.deadBush, Block.sponge, Block.ice, Block.blockSnow, Block.plantYellow, Block.plantRed, Block.mushroomBrown, Block.mushroomRed, Block.mushroomCapBrown, Block.mushroomCapRed, Block.mushroomCapBrown, Block.mushroomCapBrown, Block.cactus, Block.melon, Block.pumpkin, Block.pumpkinLantern, Block.vine, Block.fenceIron, Block.thinGlass, Block.netherBrick, Block.netherFence, Block.stairsNetherBrick, Block.stairSingle, Block.whiteStone, Block.endPortalFrame, Block.mycelium, Block.waterlily, Block.tallGrass, Block.tallGrass, Block.chest, Block.workbench, Block.glass, Block.tnt, Block.bookShelf, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.cloth, Block.dispenser, Block.stoneOvenIdle, Block.music, Block.jukebox, Block.pistonStickyBase, Block.pistonBase, Block.fence, Block.fence, Block.fence, Block.fence, Block.fenceGate, Block.ladder, Block.rail, Block.railPowered, Block.railDetector, Block.torchWood, Block.stairCompactPlanks, Block.stairsSpruce, Block.stairsBirch, Block.stairsJungle, Block.stairCompactCobblestone, Block.stairsBrick, Block.stairsStoneBrickSmooth, Block.stairsSandstone, Block.lever, Block.pressurePlateStone, Block.pressurePlatePlanks, Block.torchRedstoneActive, Block.button, Block.trapdoor, Block.enchantmentTable, Block.redstoneLampIdle};
 		int var3 = 0;
 		int var4 = 0;
 		int var5 = 0;
@@ -18,6 +18,9 @@
 		int var9 = 0;
 		int var10 = 0;
 		int var11 = 1;
+		int uar14 = 0;
+		int uar15 = 0;
+		int uar16 = 0;
 
 		int var12;
 		int var13;
@@ -27,6 +30,9 @@
 				var13 = var3++;
 			} else if(var2[var12] == Block.stairSingle) {
 				var13 = var4++;
+				if (var13 == 2) {
+					var13 = var4++;
+				}
 			} else if(var2[var12] == Block.wood) {
 				var13 = var5++;
 			} else if(var2[var12] == Block.planks) {
@@ -41,6 +47,17 @@
 				var13 = var11++;
 			} else if(var2[var12] == Block.leaves) {
 				var13 = var10++;
+			} else if(var2[var12] == Block.woodStairSingle) {
+				var13 = uar14++;
+			} else if(var2[var12] == Block.fence) {
+				var13 = uar15++;
+			} else if(var2[var12] == Block.mushroomCapBrown || var2[var12] == Block.mushroomCapRed) {
+				if (uar16 < 2) {
+					var13 = 14;
+				} else if (uar16 < 3) {
+					var13 = 15;
+				}
+				uar16++;
 			}
 
 			this.itemList.add(new ItemStack(var2[var12], 1, var13));
@@ -103,5 +120,8 @@
 	}
 
 	protected void retrySlotClick(int var1, int var2, boolean var3, EntityPlayer var4) {
+		if (var1 - 72 < 9) {
+			var4.inventory.setInventorySlotContents(var1 - 72, null);
+		}
 	}
 }
--- net/minecraft/src/BiomeGenPlains.java
+++ net/minecraft/src/BiomeGenPlains.java
@@ -1,10 +1,16 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class BiomeGenPlains extends BiomeGenBase {
 	protected BiomeGenPlains(int var1) {
 		super(var1);
-		this.biomeDecorator.treesPerChunk = -999;
+		this.biomeDecorator.treesPerChunk = 0;
 		this.biomeDecorator.flowersPerChunk = 4;
 		this.biomeDecorator.grassPerChunk = 10;
+	}
+
+	public void decorate(World var1, Random var2, int var3, int var4) {
+		super.decorate(var1, var2, var3, var4);
 	}
 }
--- net/minecraft/src/GenLayerZoom.java
+++ net/minecraft/src/GenLayerZoom.java
@@ -87,7 +87,7 @@
 		}
 	}
 
-	public static GenLayer func_35515_a(long var0, GenLayer var2, int var3) {
+	public static GenLayer octaves(long var0, GenLayer var2, int var3) {
 		Object var4 = var2;
 
 		for(int var5 = 0; var5 < var3; ++var5) {
--- net/minecraft/src/BiomeCache.java
+++ net/minecraft/src/BiomeCache.java
@@ -55,6 +55,14 @@
 		return this.getBiomeCacheBlock(var1, var2).biomes;
 	}
 
+	public float getTemperature(int var1, int var2) {
+		return this.getBiomeCacheBlock(var1, var2).getTemperatureAt(var1, var2);
+	}
+
+	public float getRainfall(int var1, int var2) {
+		return this.getBiomeCacheBlock(var1, var2).getRainfallAt(var1, var2);
+	}
+
 	static WorldChunkManager getChunkManager(BiomeCache var0) {
 		return var0.chunkManager;
 	}
--- net/minecraft/src/GuiWorldSlot.java
+++ net/minecraft/src/GuiWorldSlot.java
@@ -55,6 +55,8 @@
 			var9 = GuiSelectWorld.getLocalizedGameMode(this.parentWorldGui)[var6.getGameType()];
 			if(var6.isHardcoreModeEnabled()) {
 				var9 = "\u00a74" + StatCollector.translateToLocal("gameMode.hardcore") + "\u00a78";
+			} else if(var6.isClassicModeEnabled()) {
+				var9 = StatCollector.translateToLocal("gameMode.classic");
 			}
 		}
 
--- net/minecraft/src/BlockSoulSand.java
+++ net/minecraft/src/BlockSoulSand.java
@@ -13,5 +13,6 @@
 	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
 		var5.motionX *= 0.4D;
 		var5.motionZ *= 0.4D;
+		var5.motionY -= 0.1D;
 	}
 }
--- net/minecraft/src/GenLayerBiome.java
+++ net/minecraft/src/GenLayerBiome.java
@@ -1,33 +1,85 @@
 package net.minecraft.src;
 
 public class GenLayerBiome extends GenLayer {
-	private BiomeGenBase[] allowedBiomes = new BiomeGenBase[]{BiomeGenBase.desert, BiomeGenBase.forest, BiomeGenBase.extremeHills, BiomeGenBase.swampland, BiomeGenBase.plains, BiomeGenBase.taiga, BiomeGenBase.jungle};
+	private BiomeGenBase[] allowedBiomes = {
+			BiomeGenBase.desert,
+			BiomeGenBase.forest,
+			BiomeGenBase.extremeHills,
+			BiomeGenBase.swampland,
+			BiomeGenBase.plains,
+			BiomeGenBase.taiga,
+			BiomeGenBase.jungle,
+			BiomeGenBase.highlands
+	};
+	private BiomeGenBase[] oceanBiomes = {
+			BiomeGenBase.seaCrags,
+			BiomeGenBase.archipelago
+	};
+	private final WorldType worldType;
 
 	public GenLayerBiome(long var1, GenLayer var3, WorldType var4) {
 		super(var1);
 		this.parent = var3;
+		this.worldType = var4;
 		if(var4 == WorldType.DEFAULT_1_1) {
-			this.allowedBiomes = new BiomeGenBase[]{BiomeGenBase.desert, BiomeGenBase.forest, BiomeGenBase.extremeHills, BiomeGenBase.swampland, BiomeGenBase.plains, BiomeGenBase.taiga};
+			this.allowedBiomes = new BiomeGenBase[] {
+					BiomeGenBase.desert,
+					BiomeGenBase.forest,
+					BiomeGenBase.extremeHills,
+					BiomeGenBase.swampland,
+					BiomeGenBase.plains,
+					BiomeGenBase.snowyTaiga
+			};
+			this.oceanBiomes = new BiomeGenBase[] {
+					BiomeGenBase.ocean
+			};
 		}
-
 	}
 
 	public int[] getInts(int var1, int var2, int var3, int var4) {
+		int singleBiome = -1;
+		boolean singleOcean = false;
+		boolean oceanBiomes = true;
+		if (this.worldType instanceof WorldTypeSingleBiome) {
+			WorldTypeSingleBiome sb = (WorldTypeSingleBiome)this.worldType;
+			singleBiome = sb.getBiome();
+			singleOcean = BiomeGenBase.oceanList[singleBiome] && singleBiome != 0;
+			oceanBiomes = !singleOcean && sb.hasOceanBiomes();
+		}
+
 		int[] var5 = this.parent.getInts(var1, var2, var3, var4);
 		int[] var6 = IntCache.getIntCache(var3 * var4);
 
 		for(int var7 = 0; var7 < var4; ++var7) {
 			for(int var8 = 0; var8 < var3; ++var8) {
 				this.initChunkSeed((long)(var8 + var1), (long)(var7 + var2));
-				int var9 = var5[var8 + var7 * var3];
-				if(var9 == 0) {
-					var6[var8 + var7 * var3] = 0;
-				} else if(var9 == BiomeGenBase.mushroomIsland.biomeID) {
-					var6[var8 + var7 * var3] = var9;
-				} else if(var9 == 1) {
-					var6[var8 + var7 * var3] = this.allowedBiomes[this.nextInt(this.allowedBiomes.length)].biomeID;
+				int pos = var8 + var7 * var3;
+				int var9 = var5[pos];
+
+				if (singleBiome >= 0 &&
+						(var9 == BiomeGenBase.mushroomIsland.biomeID
+						|| var9 == BiomeGenBase.mushroomIslandShore.biomeID
+						|| var9 == BiomeGenBase.frozenOcean.biomeID)) {
+					var6[pos] = var9;
+				} else if (var9 > 0 || singleOcean) {
+					BiomeGenBase biome = singleBiome >= 0 ? BiomeGenBase.biomeList[singleBiome] : this.allowedBiomes[this.nextInt(this.allowedBiomes.length)];
+					if (var9 == BiomeGenBase.icePlains.biomeID && singleBiome < 0) {
+						if (biome.snowyVariant != null) {
+							biome = biome.snowyVariant;
+						} else {
+							biome = BiomeGenBase.icePlains;
+						}
+					}
+
+					if (singleBiome < 0 && biome.strangeVariant != null && this.nextInt(3) == 0) {
+						biome = biome.strangeVariant;
+					}
+
+					var6[pos] = biome.biomeID;
+				} else if (oceanBiomes && this.nextInt(3) == 0) {
+					var6[pos] = this.oceanBiomes[this.nextInt(this.oceanBiomes.length)].biomeID;
 				} else {
-					var6[var8 + var7 * var3] = BiomeGenBase.icePlains.biomeID;
+					var6[pos] = 0;
 				}
 			}
 		}
--- net/minecraft/src/GameSettings.java
+++ net/minecraft/src/GameSettings.java
@@ -26,6 +26,8 @@
 	public boolean fancyGraphics = true;
 	public boolean ambientOcclusion = true;
 	public boolean clouds = true;
+	public boolean coloredWater = true;
+	public float lightFixSpeed = 1.0F;
 	public String skin = "Default";
 	public KeyBinding keyBindForward = new KeyBinding("key.forward", 17);
 	public KeyBinding keyBindLeft = new KeyBinding("key.left", 30);
@@ -40,7 +42,8 @@
 	public KeyBinding keyBindUseItem = new KeyBinding("key.use", -99);
 	public KeyBinding keyBindPlayerList = new KeyBinding("key.playerlist", 15);
 	public KeyBinding keyBindPickBlock = new KeyBinding("key.pickItem", -98);
-	public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindAttack, this.keyBindUseItem, this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock};
+	public KeyBinding keyBindSprint = new KeyBinding("key.sprint", 29);
+	public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindAttack, this.keyBindUseItem, this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.keyBindSprint};
 	protected Minecraft mc;
 	private File optionsFile;
 	public int difficulty = 2;
@@ -111,6 +114,10 @@
 			this.gammaSetting = var2;
 		}
 
+		if(var1 == EnumOptions.LIGHT_FIX_SPEED) {
+			this.lightFixSpeed = var2;
+		}
+
 	}
 
 	public void setOptionValue(EnumOptions var1, int var2) {
@@ -166,29 +173,35 @@
 			this.mc.renderGlobal.loadRenderers();
 		}
 
+		if(var1 == EnumOptions.COLORED_WATER) {
+			this.coloredWater = !coloredWater;
+			this.mc.renderEngine.updateDynamicTextures();
+			this.mc.renderGlobal.loadRenderers();
+		}
+
 		this.saveOptions();
 	}
 
 	public float getOptionFloatValue(EnumOptions var1) {
-		return var1 == EnumOptions.FOV ? this.fovSetting : (var1 == EnumOptions.GAMMA ? this.gammaSetting : (var1 == EnumOptions.MUSIC ? this.musicVolume : (var1 == EnumOptions.SOUND ? this.soundVolume : (var1 == EnumOptions.SENSITIVITY ? this.mouseSensitivity : 0.0F))));
+		return var1 == EnumOptions.FOV ? this.fovSetting
+				: var1 == EnumOptions.GAMMA ? this.gammaSetting
+				: var1 == EnumOptions.MUSIC ? this.musicVolume
+				: var1 == EnumOptions.SOUND ? this.soundVolume
+				: var1 == EnumOptions.SENSITIVITY ? this.mouseSensitivity
+				: var1 == EnumOptions.LIGHT_FIX_SPEED ? this.lightFixSpeed
+				: 0.0F;
 	}
 
 	public boolean getOptionOrdinalValue(EnumOptions var1) {
-		switch(EnumOptionsMappingHelper.enumOptionsMappingHelperArray[var1.ordinal()]) {
-		case 1:
-			return this.invertMouse;
-		case 2:
-			return this.viewBobbing;
-		case 3:
-			return this.anaglyph;
-		case 4:
-			return this.advancedOpengl;
-		case 5:
-			return this.ambientOcclusion;
-		case 6:
-			return this.clouds;
-		default:
-			return false;
+		switch(var1) {
+			case INVERT_MOUSE: return this.invertMouse;
+			case VIEW_BOBBING: return this.viewBobbing;
+			case ANAGLYPH: return this.anaglyph;
+			case ADVANCED_OPENGL: return this.advancedOpengl;
+			case AMBIENT_OCCLUSION: return this.ambientOcclusion;
+			case RENDER_CLOUDS: return this.clouds;
+			case COLORED_WATER: return this.coloredWater;
+			default: return false;
 		}
 	}
 
@@ -206,12 +219,38 @@
 		String var3 = var2.translateKey(var1.getEnumString()) + ": ";
 		if(var1.getEnumFloat()) {
 			float var5 = this.getOptionFloatValue(var1);
-			return var1 == EnumOptions.SENSITIVITY ? (var5 == 0.0F ? var3 + var2.translateKey("options.sensitivity.min") : (var5 == 1.0F ? var3 + var2.translateKey("options.sensitivity.max") : var3 + (int)(var5 * 200.0F) + "%")) : (var1 == EnumOptions.FOV ? (var5 == 0.0F ? var3 + var2.translateKey("options.fov.min") : (var5 == 1.0F ? var3 + var2.translateKey("options.fov.max") : var3 + (int)(70.0F + var5 * 40.0F))) : (var1 == EnumOptions.GAMMA ? (var5 == 0.0F ? var3 + var2.translateKey("options.gamma.min") : (var5 == 1.0F ? var3 + var2.translateKey("options.gamma.max") : var3 + "+" + (int)(var5 * 100.0F) + "%")) : (var5 == 0.0F ? var3 + var2.translateKey("options.off") : var3 + (int)(var5 * 100.0F) + "%")));
+			return var1 == EnumOptions.SENSITIVITY ? (var5 == 0.0F
+							? var3 + var2.translateKey("options.sensitivity.min")
+							: (var5 == 1.0F
+									? var3 + var2.translateKey("options.sensitivity.max")
+									: var3 + (int)(var5 * 200.0F) + "%"))
+					: var1 == EnumOptions.FOV ? (var5 == 0.0F
+							? var3 + var2.translateKey("options.fov.min")
+							: (var5 == 1.0F
+									? var3 + var2.translateKey("options.fov.max")
+									: var3 + (int)(70.0F + var5 * 40.0F)))
+					: var1 == EnumOptions.GAMMA ? (var5 == 0.0F
+							? var3 + var2.translateKey("options.gamma.min")
+							: (var5 == 1.0F
+									? var3 + var2.translateKey("options.gamma.max")
+									: var3 + "+" + (int)(var5 * 100.0F) + "%"))
+					: var1 == EnumOptions.LIGHT_FIX_SPEED ? (var5 == 0.0F
+							? var3 + var2.translateKey("options.lightFixSpeed.min")
+							: (var5 == 1.0F
+									? var3 + var2.translateKey("options.lightFixSpeed.max")
+									: var3 + (int)(var5 * 100.0F) + "%"))
+					: (var5 == 0.0F ? var3 + var2.translateKey("options.off") : var3 + (int)(var5 * 100.0F) + "%");
 		} else if(var1.getEnumBoolean()) {
 			boolean var4 = this.getOptionOrdinalValue(var1);
 			return var4 ? var3 + var2.translateKey("options.on") : var3 + var2.translateKey("options.off");
 		} else {
-			return var1 == EnumOptions.RENDER_DISTANCE ? var3 + func_48571_a(RENDER_DISTANCES, this.renderDistance) : (var1 == EnumOptions.DIFFICULTY ? var3 + func_48571_a(DIFFICULTIES, this.difficulty) : (var1 == EnumOptions.GUI_SCALE ? var3 + func_48571_a(GUISCALES, this.guiScale) : (var1 == EnumOptions.PARTICLES ? var3 + func_48571_a(PARTICLES, this.particleSetting) : (var1 == EnumOptions.FRAMERATE_LIMIT ? var3 + func_48571_a(LIMIT_FRAMERATES, this.limitFramerate) : (var1 == EnumOptions.GRAPHICS ? (this.fancyGraphics ? var3 + var2.translateKey("options.graphics.fancy") : var3 + var2.translateKey("options.graphics.fast")) : var3)))));
+			return var1 == EnumOptions.RENDER_DISTANCE ? var3 + func_48571_a(RENDER_DISTANCES, this.renderDistance)
+					: var1 == EnumOptions.DIFFICULTY ? var3 + func_48571_a(DIFFICULTIES, this.difficulty)
+					: var1 == EnumOptions.GUI_SCALE ? var3 + func_48571_a(GUISCALES, this.guiScale)
+					: var1 == EnumOptions.PARTICLES ? var3 + func_48571_a(PARTICLES, this.particleSetting)
+					: var1 == EnumOptions.FRAMERATE_LIMIT ? var3 + func_48571_a(LIMIT_FRAMERATES, this.limitFramerate)
+					: var1 == EnumOptions.GRAPHICS ? (this.fancyGraphics ? var3 + var2.translateKey("options.graphics.fancy") : var3 + var2.translateKey("options.graphics.fast"))
+					: var3;
 		}
 	}
 
@@ -314,6 +353,14 @@
 						this.language = var3[1];
 					}
 
+					if(var3[0].equals("fastLighting")) {
+						this.lightFixSpeed = 0.0F;
+					}
+
+					if(var3[0].equals("lightFixSpeed")) {
+						this.lightFixSpeed = this.parseFloat(var3[1]);
+					}
+
 					for(int var4 = 0; var4 < this.keyBindings.length; ++var4) {
 						if(var3[0].equals("key_" + this.keyBindings[var4].keyDescription)) {
 							this.keyBindings[var4].keyCode = Integer.parseInt(var3[1]);
@@ -354,6 +401,8 @@
 			var1.println("fancyGraphics:" + this.fancyGraphics);
 			var1.println("ao:" + this.ambientOcclusion);
 			var1.println("clouds:" + this.clouds);
+			var1.println("lightFixSpeed:" + this.lightFixSpeed);
+			var1.println("coloredWater:" + this.coloredWater);
 			var1.println("skin:" + this.skin);
 			var1.println("lastServer:" + this.lastServer);
 			var1.println("lang:" + this.language);
--- net/minecraft/src/GuiVideoSettings.java
+++ net/minecraft/src/GuiVideoSettings.java
@@ -5,7 +5,21 @@
 	protected String screenTitle = "Video Settings";
 	private GameSettings guiGameSettings;
 	private boolean is64bit = false;
-	private static EnumOptions[] videoOptions = new EnumOptions[]{EnumOptions.GRAPHICS, EnumOptions.RENDER_DISTANCE, EnumOptions.AMBIENT_OCCLUSION, EnumOptions.FRAMERATE_LIMIT, EnumOptions.ANAGLYPH, EnumOptions.VIEW_BOBBING, EnumOptions.GUI_SCALE, EnumOptions.ADVANCED_OPENGL, EnumOptions.GAMMA, EnumOptions.RENDER_CLOUDS, EnumOptions.PARTICLES};
+	private static EnumOptions[] videoOptions = {
+			EnumOptions.GRAPHICS,
+			EnumOptions.RENDER_DISTANCE,
+			EnumOptions.AMBIENT_OCCLUSION,
+			EnumOptions.FRAMERATE_LIMIT,
+			EnumOptions.ANAGLYPH,
+			EnumOptions.VIEW_BOBBING,
+			EnumOptions.GUI_SCALE,
+			EnumOptions.ADVANCED_OPENGL,
+			EnumOptions.GAMMA,
+			EnumOptions.RENDER_CLOUDS,
+			EnumOptions.PARTICLES,
+			EnumOptions.LIGHT_FIX_SPEED,
+			EnumOptions.COLORED_WATER,
+	};
 
 	public GuiVideoSettings(GuiScreen var1, GameSettings var2) {
 		this.parentGuiScreen = var1;
@@ -31,7 +45,7 @@
 			++var2;
 		}
 
-		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, var1.translateKey("gui.done")));
+		this.controlList.add(new GuiButton(200, this.width / 2 - 100, Math.min(this.height / 6 + 192, this.height - 32), var1.translateKey("gui.done")));
 		this.is64bit = false;
 		String[] var9 = new String[]{"sun.arch.data.model", "com.ibm.vm.bitmode", "os.arch"};
 		String[] var10 = var9;
--- net/minecraft/src/ColorizerGrass.java
+++ net/minecraft/src/ColorizerGrass.java
@@ -13,4 +13,8 @@
 		int var5 = (int)((1.0D - var2) * 255.0D);
 		return grassBuffer[var5 << 8 | var4];
 	}
+
+	public static int getGrassColorBasic() {
+		return 7324746;
+	}
 }
